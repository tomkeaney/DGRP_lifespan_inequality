[
  {
    "objectID": "data_collation.html",
    "href": "data_collation.html",
    "title": "Data collation",
    "section": "",
    "text": "Show the code\nlibrary(tidyverse) # tidy coding, ggplot etc"
  },
  {
    "objectID": "data_collation.html#the-raw-data",
    "href": "data_collation.html#the-raw-data",
    "title": "Data collation",
    "section": "The raw data",
    "text": "The raw data\nThe entire raw dataset can be downloaded as a .csv file here. The dataset contains the following columns:\nline: the DGRP line (genotype).\nSex: is the fly a female or a male?\nVial_ID: in many of the studies (but not all), multiple flies were kept together in the same environment. It is common practice to record which flies shared the same environment, because a common environment can explain why some flies might exhibit similar mortality related phenotypes e.g. if humidity is slightly lower in one environment than another, an increased risk of desiccation is shared by all flies in that environment. It is called Vial_ID because the most common way to house Drosophila is in cylindrical vials.\nDeath_day: the number of days the fly survived as an adult, that were tracked during the lifespan assay.\nAdult_age_at_start: often, a few days elapsed before adult flies entered the lifespan assay. Thus, for comparison across studies, these days must be added to the Death_day count to find the true adult lifespan.\nLifespan: the number of days the fly survived as an adult.\nBlock: because of the large number of DGRP lines, often studies split their experiment into separate blocks, each of which assays a fraction of the total number of lines. These blocks are temporally separated, and generally deal with different generations of flies. Note that blocks are rarely balanced with respect to line e.g. all the sampling of line 10 is done in block 1.\nTreatment: some studies measure lifespan in multiple environmental contexts. We explicitly include some of these treatments in our analysis, whereas others are left out. To deal with these enviornmental within-study differences, we use this treatment variable as a random effect in our demographic models.\nStudy: the study that first reports the data.\nTemperature: the temperature, in degrees Celsius, that the lifespan assay was completed at.\nYeast_percentage: the overall % of the food recipe made up by brewers yeast. This is a common ingredient in Drosophila food, and the key source of protein. Several studies in our dataset were specifically interested in restriction of protein availability as a method to extend lifespan. Exact dietary compositions are rarely reported, making this a difficult variable to include in meta-analysis.\nSocial_group_size: the number of flies housed together in a vial (or bottle), at the onset of the fitness assay. As individuals died, social group sizes decreased.\nDensity: the number of flies per cm^3 of available space. Calculated as Social_group_size / 47cm^3 for Drosophila vials and Social_group_size / 150cm^3 for Drosophila bottles.\nMated: across our identified studies, three mating states were used in the lifespan assays. Flies were either kept as virgins for their entire lives (Mated = NO), were allowed to mate for a short period prior to the lifespan assay (Mated = Prior to assay), or kept in mixed sex groups and thus allowed to mate throughout their lives.\nProp_female: the proportion of females kept within each environment.\nGenotyped: indicates whether the DGRP line has sequence data available. Most do, but a few lines included in the early studies (pre-2012) did not end up getting genotyped.\n\n\nShow the code\n# Load genotyped lines reported in Huang et al for cross-matching and filtering\n\ngenotyped_lines &lt;- read_csv(\"data/Input/Genotyped_lines.csv\") %&gt;% \n  mutate(line = as.factor(line),\n         Genotyped = \"YES\")\n\n# Load the lifespan datasets \n\nArya_raw_data &lt;- read_csv(\"data/Input/Raw_data/Arya_2010.csv\") %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\")) %&gt;% \n  mutate(line = as.factor(line),\n         Sex = as.factor(Sex),\n         Vial_ID = as.factor(Vial_ID),\n         Block = as.factor(Block),\n         Diet = as.numeric(Diet),\n         Adult_age_at_start = 2,\n         Social_group_size = Density,\n         Density = Density / 47,\n         Death_day = Lifespan,\n         Lifespan = Death_day + Adult_age_at_start,\n         Treatment = 1) %&gt;% \n  dplyr::select(line, Sex, Vial_ID, Lifespan, Adult_age_at_start, Death_day, Block, Treatment, Study, Temperature, Diet, Social_group_size, Density, Mated, Prop_female)\n\nArya_lines &lt;- Arya_raw_data %&gt;% distinct(line) %&gt;% inner_join(genotyped_lines) %&gt;% nrow() # differs from Ivanov because they collected a little bit more data in that study and combined with Ivanov. Those data were not emailed.\n\nHuang_raw_data &lt;- read_csv(\"data/Input/Raw_data/Huang_2020.csv\") %&gt;% \n  dplyr::select(-Vial_ID2) %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Sex),\n         Vial_ID = as.factor(Vial_ID),\n         Block = as.factor(Block),\n         Diet = as.numeric(Diet),\n         Study = \"Huang_2020\",\n         Adult_age_at_start = 1,\n         Social_group_size = Density,\n         Density = Density / 47,\n         Death_day = Lifespan,\n         Lifespan = Death_day + Adult_age_at_start,\n         Treatment = case_when(Temperature == 18 ~ 1,\n                               Temperature == 25 ~ 2,\n                               Temperature == 28 ~ 3)) %&gt;% \n  dplyr::select(line, Sex, Vial_ID, Lifespan, Adult_age_at_start, Death_day, Block, Treatment, Study, Temperature, Diet, Social_group_size, Density, Mated, Prop_female)\n\nHuang_lines &lt;- Huang_raw_data %&gt;% distinct(line) %&gt;% inner_join(genotyped_lines) %&gt;% nrow() # perfect match with study\n\nWilson_raw_data &lt;- read_csv(\"data/Input/Raw_data/Wilson_2020.csv\") %&gt;% \n  rename(Vial_ID = Replicate,\n         Block = Week) %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Sex),\n         Vial_ID = as.factor(Vial_ID),\n         Block = as.factor(Block),\n         Diet = as.numeric(Diet),\n         Adult_age_at_start = 2,\n         Social_group_size = Density,\n         Density = Density / 47,\n         Death_day = Lifespan,\n         Lifespan = Death_day + Adult_age_at_start,\n         Treatment = if_else(Diet == 0.5, 1, 2)) %&gt;% \n  dplyr::select(line, Sex, Vial_ID, Lifespan, Adult_age_at_start, Death_day, Block, Treatment, Study, Temperature, Diet, Social_group_size, Density, Mated, Prop_female)\n\nWilson_lines &lt;- Wilson_raw_data %&gt;% distinct(line) %&gt;% inner_join(genotyped_lines) %&gt;%  nrow() # perfect match with study\n\n\nDurham_raw_data &lt;- read_csv(\"data/Input/Raw_data/Durham_2014.csv\") %&gt;% \n  dplyr::select(1:4, 6, 14:18) %&gt;% \n  rename(Vial_ID = Fly_ID) %&gt;% \n  mutate(Sex = \"Female\") %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Sex),\n         Vial_ID = as.factor(Vial_ID),\n         Block = as.factor(Block),\n         Diet = as.numeric(Diet),\n         Adult_age_at_start = 0,\n         Social_group_size = Density,\n         Density = Density / 47,\n         Death_day = Lifespan,\n         Lifespan = Death_day + Adult_age_at_start,\n         Treatment = 1) %&gt;% \n  dplyr::select(line, Sex, Vial_ID, Lifespan, Adult_age_at_start, Death_day, Block, Treatment, Study, Temperature, Diet, Social_group_size, Density, Mated, Prop_female)\n\nDurham_lines &lt;- Durham_raw_data %&gt;% distinct(line) %&gt;% inner_join(genotyped_lines) %&gt;%  nrow() # 189 lines, but only 176 that have been genotyped\n\nPatel_raw_data &lt;- read_csv(\"data/Input/Raw_data/Patel_2021.csv\") %&gt;% \n  left_join(read_csv(\"data/Input/Raw_data/Patel_2021.csv\") %&gt;% distinct(Line) %&gt;% mutate(Vial_ID = 1:n())) %&gt;%\n  mutate(Diet = 4,\n         line = str_remove(Line, \"DGRP \"),\n         line = as.factor(line),\n         Sex = as.factor(Sex),\n         Vial_ID = as.factor(Vial_ID),\n         Block = as.factor(Block),\n         Diet = as.numeric(Diet),\n         Adult_age_at_start = 2,\n         Social_group_size = Density,\n         Density = Density / 47,\n         Death_day = Lifespan,\n         Lifespan = Death_day + Adult_age_at_start,\n         Treatment = 1) %&gt;% \n  dplyr::select(line, Sex, Vial_ID, Lifespan, Adult_age_at_start, Death_day, Block, Treatment, Study, Temperature, Diet, Social_group_size, Density, Mated, Prop_female)\n\nPatel_lines &lt;- Patel_raw_data %&gt;% distinct(line) %&gt;% inner_join(genotyped_lines) %&gt;% nrow() # perfect match with study\n  \n  \nDick_raw_data &lt;- read_csv(\"data/Input/Raw_data/Dick_2011_tidy.csv\") %&gt;% \n  dplyr::select(-Replicate) %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Sex),\n         Vial_ID = as.factor(Vial_ID),\n         Block = as.factor(Block),\n         Adult_age_at_start = 0,\n         Social_group_size = Density,\n         Density = Density / 150,\n         Death_day = Lifespan,\n         Lifespan = Death_day + Adult_age_at_start,\n         Diet = if_else(Diet == \"R_M\", \"5\", Diet),\n         Diet = as.numeric(Diet)) %&gt;% # note that some flies had their diet supplemented with water, hence why there are three treatment levels\n  dplyr::select(line, Sex, Vial_ID, Lifespan, Adult_age_at_start, Death_day, Block, Treatment, Study, Temperature, Diet, Social_group_size, Density, Mated, Prop_female)\n\nDick_lines &lt;- Dick_raw_data %&gt;% distinct(line) %&gt;% inner_join(genotyped_lines) %&gt;% nrow() # perfect match with study\n  \nHoffman_raw_data &lt;- read.csv(\"data/Input/Raw_data/tidy_Hoffman_2021.csv\") %&gt;% \n  as_tibble() %&gt;% \n  rename(Vial_ID = Vial) %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Sex),\n         Vial_ID = as.factor(Vial_ID),\n         Block = as.factor(Block),\n         Diet = as.numeric(Diet),\n         Adult_age_at_start = 5,\n         Social_group_size = Density,\n         Density = Density / 47,\n         Death_day = Lifespan,\n         Lifespan = Death_day + Adult_age_at_start) %&gt;% \n  dplyr::select(line, Sex, Vial_ID, Lifespan, Adult_age_at_start, Death_day, Block, Treatment, Study, Temperature, Diet, Social_group_size, Density, Mated, Prop_female)\n\nHoffman_lines &lt;- Hoffman_raw_data %&gt;% distinct(line) %&gt;% inner_join(genotyped_lines) %&gt;% nrow()\n# note that Hoffman et al report data from 12 lines, but their dataset contains 16 lines. This is because they were interested in repeatability and only 12 lines were measured in both of their treatments. We use all 16 lines.\n\nZhao_raw_data &lt;- read_csv(\"data/Input/Raw_data/tidy_Zhao_2022.csv\") %&gt;% \n  rename(Vial_ID = Vial) %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Sex),\n         Vial_ID = as.factor(Vial_ID),\n         Block = as.factor(Block),\n         Diet = as.numeric(10),\n         Adult_age_at_start = 0, # they were 3 days old upon entrance, but this is already accounted for in the death day measure\n         Social_group_size = Density,\n         Density = Density / 47,\n         Death_day = Lifespan,\n         Lifespan = Death_day + Adult_age_at_start,\n         Treatment = 1) %&gt;% \n  dplyr::select(line, Sex, Vial_ID, Lifespan, Adult_age_at_start, Death_day, Block, Treatment, Study, Temperature, Diet, Social_group_size, Density, Mated, Prop_female)\n\nZhao_lines &lt;- Zhao_raw_data %&gt;% distinct(line) %&gt;% inner_join(genotyped_lines) %&gt;% nrow()\n\n# combine them into a single tibble\n\nAll_raw_data &lt;- \n  bind_rows(Arya_raw_data,\n            Huang_raw_data,\n            Wilson_raw_data,\n            Durham_raw_data,\n            Patel_raw_data,\n            Dick_raw_data,\n            Hoffman_raw_data,\n            Zhao_raw_data) %&gt;% \n  filter(!is.na(Lifespan)) %&gt;% \n  rename(Yeast_percentage = Diet) %&gt;% \n  left_join(genotyped_lines, by = \"line\") %&gt;% \n    mutate(Genotyped = if_else(is.na(Genotyped), \"NO\", Genotyped),\n           Density = round(Density, 3))\n\n#write_csv(All_raw_data, file =\"data/Input/all_raw_data.csv\")\n\n#my_data_table(All_raw_data)"
  },
  {
    "objectID": "GWAS.html",
    "href": "GWAS.html",
    "title": "Genome wide analyses",
    "section": "",
    "text": "The MASS package is required to run the CPASSOC. Unfortunately this clashes with the dplyr select(). So be prepared to use dplyr::select() to get some things to work if you’re adapting the code for your own use.\n\n\nShow the code\nlibrary(tidyverse) # tidy coding, ggplot etc\nlibrary(data.table) # for the rleid function\nlibrary(glue) # for coding within strings\nlibrary(bigsnpr) # to install: devtools::install_github(\"privefl/bigsnpr\")\n#library(pander) # for slick simple tables\nlibrary(kableExtra) # for medium sized tables\nlibrary(DT) # for large, searchable tables\nlibrary(brms) # for bayesian models\nlibrary(tidybayes) # for bayesian plots\nlibrary(ggtext) # for markdown syntax in ggplot\nlibrary(ggnewscale) # to reset colour scales\nlibrary(MetBrewer) # for more colour palettes\nlibrary(MoMAColors) # nicer colours once again\nlibrary(PNWColors) # even more colours\n#library(hexbin) # for density heat maps\n#library(rcartocolor) # even more nice colours\nlibrary(patchwork) # for combining plots\n#library(ggrepel) # for labelling ggplots\nlibrary(pheatmap) # for heat maps\nlibrary(MASS) # needed for CPASSOC\nlibrary(Matrix) # needed for CPASSOC\n#library(flexsurv) # for survival analysis\n#library(rptR) # for finding the intraclass correlation coefficient\n\n# build a helper function that produces a table to display our data\n\n# Create a function to build HTML searchable tables\n\nmy_data_table &lt;- function(df){\n  datatable(\n    df, rownames=FALSE,\n    autoHideNavigation = TRUE,\n    extensions = c(\"Scroller\",  \"Buttons\"),\n    options = list(\n      autoWidth = TRUE,\n      dom = 'Bfrtip',\n      deferRender=TRUE,\n      scrollX=TRUE, scrollY=1000,\n      scrollCollapse=TRUE,\n      buttons =\n        list('pageLength', 'colvis', 'csv', list(\n          extend = 'pdf',\n          pageSize = 'A4',\n          orientation = 'landscape',\n          filename = 'Lifespan_data')),\n      pageLength = 100\n    )\n  )\n}\n\n\n\n\nDGRP variant annotations were downloaded from the DGRP website and gene annotations for all the genes covered by DGRP variants, from the org.Dm.eg.db database object from Bioconductor.\nThese will be useful later when we aim to identify whether variants with notable associations with a trait overlap with any genes.\n\n\nShow the code\n# Helper function to split a vector into chunks \nchunker &lt;- function(x, max_chunk_size) split(x, ceiling(seq_along(x) / max_chunk_size))\n\nif(!file.exists(\"data/derived/annotations.csv\")){\n  \n  # Load annotation file, get important info\n  \n  annot &lt;- read.table(\"data/input/dgrp.fb557.annot.txt\", header = FALSE, stringsAsFactors = FALSE)\n  \n  get.info &lt;- function(rows){\n    lapply(rows, function(row){\n      site.class.field &lt;- strsplit(annot$V3[row], split = \"]\")[[1]][1]\n      num.genes &lt;- str_count(site.class.field, \";\") + 1\n      output &lt;- cbind(rep(annot$V1[row], num.genes), \n                      do.call(\"rbind\", lapply(strsplit(site.class.field, split = \";\")[[1]], \n                                              function(x) strsplit(x, split = \"[|]\")[[1]])))\n      if(ncol(output) == 5) return(output[,c(1,2,4,5)]) # only return SNPs that have some annotation. Don't get the gene symbol\n      else return(NULL)\n    }) %&gt;% do.call(\"rbind\", .)\n  }\n  \n  variant.details &lt;- lapply(chunker(1:nrow(annot), max_chunk_size = 10000), get.info) %&gt;% \n    do.call(\"rbind\", .) %&gt;% as.data.frame()\n  \n  names(variant.details) &lt;- c(\"SNP\", \"FBID\", \"site.class\", \"distance.to.gene\")\n  variant.details$FBID &lt;- unlist(str_extract_all(variant.details$FBID, \"FBgn[:digit:]+\")) # clean up text strings for Flybase ID\n  variant.details %&gt;%\n    dplyr::filter(site.class != \"FBgn0003638\") %&gt;% # NB this is a bug in the DGRP's annotation file\n    mutate(chr = str_remove_all(substr(SNP, 1, 2), \"_\")) # get chromosome now for faster sorting later\n  \n  annotations &lt;- variant.details\n} else annotations &lt;- read_csv(\"data/derived/annotations.csv\")\n\nannotations &lt;-\n  annotations %&gt;% \n  left_join(read.csv(\"data/Input/all_dmel_genes.csv\")) %&gt;% \n  dplyr::select(SNP, FBID, site.class, distance.to.gene, gene_name, chromosome)\n\n\n\n\n\n\n\nShow the code\nraw_data &lt;- \n  read_delim(\"data/Input/Raw_data/all_raw_data.csv\",delim=',') %&gt;% \n  mutate(line = as.factor(line),\n         Treatment = as.character(Treatment)) %&gt;% \n  unite(Treatment, c(\"Study\", \"Treatment\", \"Sex\"), sep = \"_\") %&gt;% \n  filter(Genotyped == \"YES\") %&gt;% \n  #unite(\"Treatment\", c(Treatment, Sex), sep = \"_\") %&gt;% \n  dplyr::select(line, Lifespan, Treatment, Vial_ID)\n\n\n\n\n\nIn the demographic component of this study, we calculated mean values and standard error for each combination of line, sex, study, temperature and mating status. These data are displayed, and can be downloaded from the below table. Note that for quantitative genetic, GWA and other SNP based analysis, we removed lines that had not been genotyped (shown as Genotyped = NO). Lines with unknown genotypes also have unknown Wolbachia and inversions status’. Durham et al (2014) cleared all lines of Wolbachia via treatment with tetracycline.\n\n\nShow the code\ngenotyped_lines &lt;- \n  read_csv(\"data/input/Genotyped_lines.csv\") %&gt;% \n  mutate(Genotyped = \"YES\",\n         line = as.factor(line))\n  \nfull_dataset &lt;- \n  read.csv(\"data/input/lifespan_data.csv\") %&gt;% \n  as_tibble() %&gt;% \n  mutate(line = as.factor(Line),\n         Treatment = str_replace(Treatment, \" \", \"_\"),\n         Treatment = case_when(Temperature == 18 & Study == \"Huang_2020\" ~ \"Huang_2020_1\",\n                               Temperature == 25 & Study == \"Huang_2020\" ~ \"Huang_2020_2\",\n                               Temperature == 28 & Study == \"Huang_2020\" ~ \"Huang_2020_3\",\n                               .default = Treatment)) %&gt;%\n  dplyr::select(-Line) %&gt;% \n  left_join(genotyped_lines, by = \"line\") %&gt;% \n  mutate(Genotyped = if_else(is.na(Genotyped), \"NO\", Genotyped)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Study, Treatment, Block, e0, SE_e0, h, SE_h, samp, Genotyped)\n\n# DGRP studies often correct for the most common inversions and wolbachia presence. \n\ninversions_wolbachia &lt;- \n  read_csv(\"data/Input/inversions_wolbachia.csv\") %&gt;%\n  mutate(line = as.factor(str_remove(line, \"DGRP_\")),\n         Wolbachia = if_else(Wolbachia == \"y\", 1, 0),\n         across(2:17, ~ case_when(.x == \"ST\" ~ 0,\n                                 .x == \"INV/ST\" ~ 1,\n                                 .x == \"INV\" ~ 2))) %&gt;% \n  dplyr::select(line, `In(2L)t`, `In(2R)NS`, `In(3R)P`, `In(3R)K`, `In(3R)Mo`, Wolbachia) %&gt;% \n  rename(In_2L_t = `In(2L)t`,\n         In_2R_NS = `In(2R)NS`,\n         In_3R_P = `In(3R)P`,\n         In_3R_K = `In(3R)K`,\n         In_3R_Mo = `In(3R)Mo`)\n# inversions pruned to those Huang et al 2015 PNAS corrected for\n\nfull_dataset &lt;- \n  full_dataset %&gt;% \n  left_join(inversions_wolbachia) %&gt;% \n  mutate(Wolbachia = if_else(Study == \"Durham_2014\", 0, Wolbachia)) # study cleared wolbachia with tetracycline before phenotyping \n  \nmy_data_table(full_dataset %&gt;% \n                mutate(across(8:11, ~ round(.x, 2))) %&gt;% \n                dplyr::select(1:13))"
  },
  {
    "objectID": "GWAS.html#load-variantgene-annotations",
    "href": "GWAS.html#load-variantgene-annotations",
    "title": "Genome wide analyses",
    "section": "",
    "text": "DGRP variant annotations were downloaded from the DGRP website and gene annotations for all the genes covered by DGRP variants, from the org.Dm.eg.db database object from Bioconductor.\nThese will be useful later when we aim to identify whether variants with notable associations with a trait overlap with any genes.\n\n\nShow the code\n# Helper function to split a vector into chunks \nchunker &lt;- function(x, max_chunk_size) split(x, ceiling(seq_along(x) / max_chunk_size))\n\nif(!file.exists(\"data/derived/annotations.csv\")){\n  \n  # Load annotation file, get important info\n  \n  annot &lt;- read.table(\"data/input/dgrp.fb557.annot.txt\", header = FALSE, stringsAsFactors = FALSE)\n  \n  get.info &lt;- function(rows){\n    lapply(rows, function(row){\n      site.class.field &lt;- strsplit(annot$V3[row], split = \"]\")[[1]][1]\n      num.genes &lt;- str_count(site.class.field, \";\") + 1\n      output &lt;- cbind(rep(annot$V1[row], num.genes), \n                      do.call(\"rbind\", lapply(strsplit(site.class.field, split = \";\")[[1]], \n                                              function(x) strsplit(x, split = \"[|]\")[[1]])))\n      if(ncol(output) == 5) return(output[,c(1,2,4,5)]) # only return SNPs that have some annotation. Don't get the gene symbol\n      else return(NULL)\n    }) %&gt;% do.call(\"rbind\", .)\n  }\n  \n  variant.details &lt;- lapply(chunker(1:nrow(annot), max_chunk_size = 10000), get.info) %&gt;% \n    do.call(\"rbind\", .) %&gt;% as.data.frame()\n  \n  names(variant.details) &lt;- c(\"SNP\", \"FBID\", \"site.class\", \"distance.to.gene\")\n  variant.details$FBID &lt;- unlist(str_extract_all(variant.details$FBID, \"FBgn[:digit:]+\")) # clean up text strings for Flybase ID\n  variant.details %&gt;%\n    dplyr::filter(site.class != \"FBgn0003638\") %&gt;% # NB this is a bug in the DGRP's annotation file\n    mutate(chr = str_remove_all(substr(SNP, 1, 2), \"_\")) # get chromosome now for faster sorting later\n  \n  annotations &lt;- variant.details\n} else annotations &lt;- read_csv(\"data/derived/annotations.csv\")\n\nannotations &lt;-\n  annotations %&gt;% \n  left_join(read.csv(\"data/Input/all_dmel_genes.csv\")) %&gt;% \n  dplyr::select(SNP, FBID, site.class, distance.to.gene, gene_name, chromosome)"
  },
  {
    "objectID": "GWAS.html#the-raw-dataset",
    "href": "GWAS.html#the-raw-dataset",
    "title": "Genome wide analyses",
    "section": "",
    "text": "Show the code\nraw_data &lt;- \n  read_delim(\"data/Input/Raw_data/all_raw_data.csv\",delim=',') %&gt;% \n  mutate(line = as.factor(line),\n         Treatment = as.character(Treatment)) %&gt;% \n  unite(Treatment, c(\"Study\", \"Treatment\", \"Sex\"), sep = \"_\") %&gt;% \n  filter(Genotyped == \"YES\") %&gt;% \n  #unite(\"Treatment\", c(Treatment, Sex), sep = \"_\") %&gt;% \n  dplyr::select(line, Lifespan, Treatment, Vial_ID)"
  },
  {
    "objectID": "GWAS.html#line-mean-data",
    "href": "GWAS.html#line-mean-data",
    "title": "Genome wide analyses",
    "section": "",
    "text": "In the demographic component of this study, we calculated mean values and standard error for each combination of line, sex, study, temperature and mating status. These data are displayed, and can be downloaded from the below table. Note that for quantitative genetic, GWA and other SNP based analysis, we removed lines that had not been genotyped (shown as Genotyped = NO). Lines with unknown genotypes also have unknown Wolbachia and inversions status’. Durham et al (2014) cleared all lines of Wolbachia via treatment with tetracycline.\n\n\nShow the code\ngenotyped_lines &lt;- \n  read_csv(\"data/input/Genotyped_lines.csv\") %&gt;% \n  mutate(Genotyped = \"YES\",\n         line = as.factor(line))\n  \nfull_dataset &lt;- \n  read.csv(\"data/input/lifespan_data.csv\") %&gt;% \n  as_tibble() %&gt;% \n  mutate(line = as.factor(Line),\n         Treatment = str_replace(Treatment, \" \", \"_\"),\n         Treatment = case_when(Temperature == 18 & Study == \"Huang_2020\" ~ \"Huang_2020_1\",\n                               Temperature == 25 & Study == \"Huang_2020\" ~ \"Huang_2020_2\",\n                               Temperature == 28 & Study == \"Huang_2020\" ~ \"Huang_2020_3\",\n                               .default = Treatment)) %&gt;%\n  dplyr::select(-Line) %&gt;% \n  left_join(genotyped_lines, by = \"line\") %&gt;% \n  mutate(Genotyped = if_else(is.na(Genotyped), \"NO\", Genotyped)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Study, Treatment, Block, e0, SE_e0, h, SE_h, samp, Genotyped)\n\n# DGRP studies often correct for the most common inversions and wolbachia presence. \n\ninversions_wolbachia &lt;- \n  read_csv(\"data/Input/inversions_wolbachia.csv\") %&gt;%\n  mutate(line = as.factor(str_remove(line, \"DGRP_\")),\n         Wolbachia = if_else(Wolbachia == \"y\", 1, 0),\n         across(2:17, ~ case_when(.x == \"ST\" ~ 0,\n                                 .x == \"INV/ST\" ~ 1,\n                                 .x == \"INV\" ~ 2))) %&gt;% \n  dplyr::select(line, `In(2L)t`, `In(2R)NS`, `In(3R)P`, `In(3R)K`, `In(3R)Mo`, Wolbachia) %&gt;% \n  rename(In_2L_t = `In(2L)t`,\n         In_2R_NS = `In(2R)NS`,\n         In_3R_P = `In(3R)P`,\n         In_3R_K = `In(3R)K`,\n         In_3R_Mo = `In(3R)Mo`)\n# inversions pruned to those Huang et al 2015 PNAS corrected for\n\nfull_dataset &lt;- \n  full_dataset %&gt;% \n  left_join(inversions_wolbachia) %&gt;% \n  mutate(Wolbachia = if_else(Study == \"Durham_2014\", 0, Wolbachia)) # study cleared wolbachia with tetracycline before phenotyping \n  \nmy_data_table(full_dataset %&gt;% \n                mutate(across(8:11, ~ round(.x, 2))) %&gt;% \n                dplyr::select(1:13))"
  },
  {
    "objectID": "GWAS.html#loading-data-used-in-gwa-tests",
    "href": "GWAS.html#loading-data-used-in-gwa-tests",
    "title": "Genome wide analyses",
    "section": "Loading data used in GWA tests",
    "text": "Loading data used in GWA tests\nFor GWAS and later CPASSOC, we split the data by study, removed studies that phenotyped &lt; 100 lines and adjusted line means to account for experimental block where applicable. Importantly, we also split the Wilson et al (2020) data by dietary treatment; while we do not explicitly consider diet in our analysis, lifespan in one dietary treatment is considered a separate trait from lifespan measured in a second dietary treatment.\n\n\nShow the code\nArya_2010_f &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Arya_2010\" & Sex == \"Female\" & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\nArya_2010_m &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Arya_2010\" & Sex == \"Male\" & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\nHuang_2020_f_18 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Female\" & Temperature == 18 & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\nHuang_2020_m_18 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Male\" & Temperature == 18 & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\nHuang_2020_f_25 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Female\" & Temperature == 25 & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\nHuang_2020_m_25 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Male\" & Temperature == 25 & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\nHuang_2020_f_28 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Female\" & Temperature == 28 & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\nHuang_2020_m_28 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Male\" & Temperature == 28 & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\n# In this study, some lines were measured twice per treatment, and a small subset were measured three times. We take the mean across blocks as the line mean, following the original study.\n\nWilson_2020_f_1 &lt;-\n  full_dataset %&gt;% \n  filter(Treatment == \"Wilson_2020_1\" & Genotyped == \"YES\") %&gt;%\n  group_by(line) %&gt;% \n  mutate(e0 = mean(e0),\n         h = mean(h)) %&gt;% \n  ungroup() %&gt;% \n  distinct(line, .keep_all = TRUE) %&gt;%\n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\nWilson_2020_f_2 &lt;-\n  full_dataset %&gt;% \n  filter(Treatment == \"Wilson_2020_2\" & Genotyped == \"YES\") %&gt;% \n  group_by(line) %&gt;% \n  mutate(e0 = mean(e0),\n         h = mean(h)) %&gt;% \n  ungroup() %&gt;% \n  distinct(line, .keep_all = TRUE) %&gt;%\n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\n# In this study, each line was measured three times. We take the mean across blocks as the line mean\n\nDurham_2014_f &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Durham_2014\" & Genotyped == \"YES\") %&gt;% \n  group_by(line) %&gt;% \n  mutate(e0 = mean(e0),\n         h = mean(h)) %&gt;% \n  ungroup() %&gt;% \n  distinct(line, .keep_all = TRUE) %&gt;%\n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)\n\n\nPatel_2021_f &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Patel_2021\" & Genotyped == \"YES\") %&gt;% \n  mutate(e0_scaled = scale(e0),\n         h_scaled = scale(h)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Treatment, e0, e0_scaled, h, h_scaled)"
  },
  {
    "objectID": "GWAS.html#install-neccessary-software-and-build-helper-functions",
    "href": "GWAS.html#install-neccessary-software-and-build-helper-functions",
    "title": "Genome wide analyses",
    "section": "Install neccessary software and build helper functions",
    "text": "Install neccessary software and build helper functions\nIn addition to the R packages we load, plink 1.9 and beagle must also be installed. These software packages allow us to wrangle the data into the correct format and impute missing values, both of which are required to run GWAS with the plink.\nplink is run from the terminal, but we pass the terminal command to R first, which then writes to the terminal. This makes our analysis reproducible. However, Windows and mac operating systems liase with the terminal differently, meaning different functions are required depending on your operating system. To make this easy we include the following code chunk, where you can specify whether you’re a windows or mac user.\n\n\nShow the code\nOperating_system &lt;- \"mac\" # change this to \"windows\" if appropriate. Note that all downstream functions are informed by this\n\n\n\n\nShow the code\n# build functions to prepare data for GWAS\n\nprep_for_e0_GWAS &lt;- function(data, sex){\ndata %&gt;% \n  mutate(line = glue(\"line{line}\")) %&gt;% \n  dplyr::select(line, e0)\n}\n\nprep_for_h_GWAS &lt;- function(data, sex){\ndata %&gt;% \n  mutate(line = glue(\"line{line}\")) %&gt;% \n  dplyr::select(line, h)\n}\n\nprep_for_ageing_GWAS &lt;- function(data){\n  data %&gt;%\n    mutate(line = glue(\"line{line}\")) %&gt;% \n    dplyr::select(line, ageing_axis_centered)\n}\n\nprep_for_baseline_mortality_GWAS &lt;- function(data){\n  data %&gt;%\n    mutate(line = glue(\"line{line}\")) %&gt;% \n    dplyr::select(line, baseline_mortality_axis_centered)\n}\n\n# I used bigsnpr::download_plink(dir = \"code/windows\") which puts it in the code folder - I'm using a windows operating system. The macOS version can also be downloaded into \"code/macOS\" \n\n# Beagle is a software package for phasing genotypes and imputing ungenotyped markers.\nif(Operating_system == \"mac\"){plink &lt;- paste(getwd(), \"code/macOS/plink\", sep = \"/\")}\nif(Operating_system == \"windows\"){plink &lt;- paste(getwd(), \"code/windows/plink\", sep = \"/\")}\n\n# only need to download this once - change path depending on operating system\n#beagle &lt;- bigsnpr::download_beagle(\n #   dir = \"/Users/tkeaney/Library/CloudStorage/OneDrive-JGU/Postdoc/DGRP_lifespan/DGRP_lifespan_inequality/code/macOS\") \n\n# helper function to pass commands to the terminal\n# Note that we set `intern = TRUE`, and pass the result of `system()` to `cat()`, \n# ensuring that the Terminal output will be printed in this knitr report.\n# \n# This is the mac OS function\nif(Operating_system == \"mac\"){\n  run_command_mac &lt;- function(shell_command, wd = getwd(), path = \"\"){\n    cat(system(glue(\"cd \", wd, path, # tell terminal which directory to work in\n                    \"\\n\",shell_command), # on a second terminal line, run the plink command\n               intern = TRUE), sep = '\\n')  \n  }\n}\n\n# This is the windows function \nif(Operating_system == \"windows\"){\n  run_command_windows &lt;- function(plink_command, wd = getwd(), path = \"\") {\n    # Specify the full path to the plink executable within the 'code' subdirectory.\n    plink_path &lt;- paste(getwd(), \"code/windows/plink\", sep = \"/\")\n    \n    # Create the full shell command with the plink executable.\n    command &lt;- glue(\"cmd.exe /c cd /d {shQuote(file.path(wd, path))} && {shQuote(plink_path)} {plink_command}\")\n    \n    # Execute the combined command.\n    result &lt;- system(command, intern = TRUE)\n    \n    # Print the result.\n    cat(result, sep = '\\n')\n    \n    # Return the result as a character vector.\n    return(result)\n  }\n  \n  # sometimes we need to run terminal commands without plink - for windows, create a slightly different function to do this\n  \n  run_command_no_plink &lt;- function(shell_command, wd = getwd(), path = \"\") {\n    \n    # Create the full shell command with the plink executable.\n    command &lt;- glue(\"cmd.exe /c cd /d {shQuote(file.path(wd, path))} && {shell_command}\")\n    \n    # Execute the combined command.\n    result &lt;- system(command, intern = TRUE)\n    \n    # Print the result.\n    cat(result, sep = '\\n')\n    \n    # Return the result as a character vector.\n    return(result)\n  }\n}"
  },
  {
    "objectID": "GWAS.html#perform-snp-quality-control-and-impute-missing-data",
    "href": "GWAS.html#perform-snp-quality-control-and-impute-missing-data",
    "title": "Genome wide analyses",
    "section": "Perform SNP quality control and impute missing data",
    "text": "Perform SNP quality control and impute missing data\nPlink recognises three types of files that are necessary for GWA analysis: the .bed, .bim and .fam files.\n.bed: the binary biallelic genotype table. Four options are possible:\n\n00 = homozygous for minor allele\n01 = missing genotype\n10 = heterozygous genotype\n11 = homozygous for major allele\n\nThe overwhelming majority of genotypes in the DGRP are homozygous for one of the alleles (i.e. 00 or 11).\n.bim: extended variant information file accompanying the .bed file. It has six fields:\n\nchromosome code\nvariant identifier\nposition in morgans\nbase-pair coordinate\nMinor allele\nMajor allele\n\n.fam: Plink sample information file. It can have the following elements:\n\nFamily ID (‘FID’) (in our case just the DGRP line)\nWithin-family ID (‘IID’; cannot be ‘0’) (in our case just the DGRP line)\nWithin-family ID of father (‘0’ if father isn’t in dataset)\nWithin-family ID of mother (‘0’ if mother isn’t in dataset)\nSex code (‘1’ = male, ‘2’ = female, ‘0’ = unknown) - not important for us because we analyse the sexes separately.\nPhenotype value (‘1’ = control, ‘2’ = case, ‘-9’/‘0’/non-numeric = missing data): -9 for us because we supply the phenotypic data later.\n\nWe cleaned up the DGRP’s .bed/.bim/.fam files (available from the Mackay lab website) by:\n\nRemoving any SNPs for which genotypes are missing in &gt;10% of the 205 DGRP lines. We then use the software Beagle to impute the remaining missing genotypes. Imputation takes about half an hour, so ideally you only want to do it once.\nRemoving SNPs with a minor allele frequency of less than 5% across the 205 lines. We have negligible power to detect associations for rare SNPs that occur at frequencies below this threshold.\n\nIn the plink-formatted genotype files, lines fixed for the major allele are coded as 2, and lines fixed for the minor allele as 0. SNPs with negative \\(\\beta\\) coefficients therefore indicate that the minor allele is associated with higher trait values, while positive effect sizes means that the minor allele is associated with lower trait values.\n\n\nShow the code\nRun_function &lt;- FALSE # Change this to TRUE to run - read through the code before you do this \n\nif(Run_function){\n  \n  # Use Plink to clean and subset the DGRP's SNP data as follows:\n  # Only keep SNPs for which at least 90% of the 205 DGRP lines were successfully genotyped (--geno 0.1)\n  # Only keep SNPs with a minor allele frequency of 0.05 or higher (--maf 0.05) across the 205 lines\n  # Write the processed BIM/BED/FAM files to the data/Derived/plink_output directory\n  \n  output_directory &lt;-  paste(getwd(), \"data/Derived/plink_output\", sep = \"/\")\n  \n  if(Operating_system == \"windows\"){\n    run_command_windows(glue(\"--bfile dgrp2\",\n                             \" --geno 0.1 --maf 0.05 --allow-no-sex\", \n                             \" --make-bed --out {shQuote(output_directory)}/dgrp2_QC_all_lines\"), path = \"data/Input/bfiles/\")\n  }\n  \n  if(Operating_system == \"mac\"){\n    run_command_mac(glue(\"{plink} --bfile dgrp2\",\n                         \" --geno 0.1 --maf 0.05 --allow-no-sex\", \n                         \" --make-bed --out ../dgrp2_QC_all_lines\"), path = \"/data/input/bfiles/\")\n  }\n  # Use the shell command 'sed' to remove underscores from the DGRP line names in the .fam file (e.g. 'line_120' becomes 'line120')\n  # Otherwise, these underscores cause trouble when we need to convert from PLINK to vcf format (vcf format uses underscore as a separator)\n  if(Operating_system == \"windows\"){  \n    for(i in 1:2) run_command_no_plink(\"sed -i '' 's/_//' dgrp2_QC_all_lines.fam\", path = \"/data/Derived/\")\n  }\n  \n  if(Operating_system == \"mac\"){            \n    for(i in 1:2) run_command_mac(\"sed -i '' 's/_//' dgrp2_QC_all_lines.fam\", path = \"/data/Derived/\")\n  }\n  # Now impute the missing genotypes using Beagle\n  # This part uses the data for the full DGRP panel of &gt;200 lines, to infer missing genotypes as accurately as possible. \n  # The bigsnpr package provides a helpful wrapper for Beagle called snp_beagleImpute(): it translates to a VCF file and back again using PLINK\n  # Imputation with the below optimisation took about 25 mins on my computer, which is a high spec macbook by 2025 standards\n  snp_beagleImpute(beagle, plink, \n                   bedfile.in = \"data/Derived/plink_output/dgrp2_QC_all_lines.bed\", \n                   bedfile.out = \"data/Derived/plink_output/dgrp2_QC_all_lines_imputed.bed\",\n                   ncores = 10, \n                   memory.max = 32)\n  \n  # assign a sex of 'female' to all the DGRP lines (Beagle removes the sex, and it seems PLINK needs individuals to have a sex, \n  # despite PLINK having a command called --allow-no-sex)\n  \n  if(Operating_system == \"windows\"){ \n    run_command_windows(\"sed -i '' 's/    0   0   0/  0   0   2/' dgrp2_QC_all_lines_imputed.fam\", \n                        path = \"/data/Derived/plink_output/\")\n  }\n  if(Operating_system == \"mac\"){ \n    run_command_mac(\"sed -i '' 's/    0   0   0/  0   0   2/' dgrp2_QC_all_lines_imputed.fam\", \n                    path = \"/data/Derived/plink_output/\")\n  }\n  # Re-write the .bed file, to make sure the MAF threshold and minor/major allele designations are correctly assigned post-Beagle\n  \n  if(Operating_system == \"windows\"){ \n    run_command_windows(glue(\"--bfile dgrp2_QC_all_lines_imputed\",\n                             \" --geno 0.1 --maf 0.05 --allow-no-sex\", \n                             \" --make-bed --out dgrp2_QC_all_lines_imputed_correct\"), path = \"/data/Derived/plink_output/\")\n  }\n  \n  if(Operating_system == \"mac\"){ \n    run_command_mac(glue(\"{plink} --bfile dgrp2_QC_all_lines_imputed\",\n                         \" --geno 0.1 --maf 0.05 --allow-no-sex\", \n                         \" --make-bed --out dgrp2_QC_all_lines_imputed_correct\"), path = \"/data/Derived/plink_output/\")\n  }\n  #unlink(list.files(\"data/derived\", pattern = \"~\", full.names = TRUE)) # delete the original files, which were given a ~ file name by PLINK\n}"
  },
  {
    "objectID": "GWAS.html#get-minor-allele-frequencies-in-the-dgrp",
    "href": "GWAS.html#get-minor-allele-frequencies-in-the-dgrp",
    "title": "Genome wide analyses",
    "section": "Get minor allele frequencies in the DGRP",
    "text": "Get minor allele frequencies in the DGRP\n\n\nShow the code\n# Use PLINK to get the allele IDs and calculate the MAFs across the whole DGRP, for all SNPs that survived QC\n  # The file created is called data/derived/plink.frq\nif(!file.exists(\"data/Derived/plink_output/plink.frq\")){\n  if(Operating_system == \"windows\"){ \n    run_command_windows(glue(\"--bfile dgrp2_QC_all_lines_imputed_correct\",\n                             \" --freq\"), path = \"/data/Derived/plink_output/\")\n  }\n  if(Operating_system == \"mac\"){ \n    run_command_mac(glue(\"{plink} --bfile dgrp2_QC_all_lines_imputed_correct\",\n                         \" --freq\"), path = \"/data/Derived/plink_output/\")\n  }\n}\n\n# Extract and save the MAFs, SNP positions, and major/minor alleles\nMAFs &lt;- \n  read.table(\"data/Derived/plink_output/plink.frq\", header = TRUE, stringsAsFactors = FALSE) %&gt;% \n  mutate(position = map_chr(\n    strsplit(SNP, split = \"_\"), \n    function(x) x[2])) %&gt;%\n  dplyr::select(SNP, position, MAF, A1, A2) %&gt;% \n  rename(minor_allele = A1,\n         major_allele = A2) %&gt;% \n  as_tibble()"
  },
  {
    "objectID": "GWAS.html#create-a-reduced-list-of-ld-pruned-snps-with-plink",
    "href": "GWAS.html#create-a-reduced-list-of-ld-pruned-snps-with-plink",
    "title": "Genome wide analyses",
    "section": "Create a reduced list of LD-pruned SNPs with PLINK",
    "text": "Create a reduced list of LD-pruned SNPs with PLINK\n1,646,615 variants passed the MAF and missingness quality control. However, proximity causes strong linkage disequilibrium, such that neighbouring SNPs tend to have similar associations with the trait under consideration in GWAS. Separate genomic regions can be identified by pruning the number of SNPs within a genomic region using the plink arguments --indep-pairwise 100 10 0.2, which prunes SNPs within 100kB sliding windows, sliding 10 variants along with each step, and allows a maximum pairwise correlation (\\(r^2\\)) threshold of 0.2 between loci within the window. With these parameters, 1,419,773 variants were removed, leaving 226,842.\n\n\nShow the code\n# indep-pairwise arguments are: \n# 100kB window size, \n# variant count to shift the window by 10 variants at the end of each step, \n# pairwise r^2 threshold of 0.2\n\nif(!file.exists(\"data/Derived/plink_output/dgrp2_QC_all_lines_imputed_correct_pruned.prune.out\")) {\n  \n  if(Operating_system == \"windows\"){ \n    run_command_windows(glue(\"--bfile dgrp2_QC_all_lines_imputed_correct\",\n                             \" --indep-pairwise 100 10 0.2\"), path = \"/data/Derived/plink_output/\")\n  }\n  \n  if(Operating_system == \"mac\"){ \n    run_command_mac(glue(\"{plink} --bfile dgrp2_QC_all_lines_imputed_correct\",\n                         \" --indep-pairwise 100 10 0.2\"), path = \"/data/Derived/plink_output/\")\n  }\n}\n\nGenomic_regions &lt;-\n  read.table(\"data/Derived/plink_output/dgrp2_QC_all_lines_imputed_correct_pruned.prune.in\") %&gt;% \n  rename(SNP = V1)"
  },
  {
    "objectID": "GWAS.html#build-gwas-function",
    "href": "GWAS.html#build-gwas-function",
    "title": "Genome wide analyses",
    "section": "Build GWAS function",
    "text": "Build GWAS function\nWe use the --assoc flag to run a basic linear regression, fit with two data points: the mean phenotype for individuals homozygous for the minor allele and the mean phenotype for individuals homozygous for the major allele. The effect size (\\(\\beta\\)) is the slope of this regression line. Negative effect sizes indicate that the minor allele is associated with a higher trait value than the major allele. The test statistic T and p-value are produced by a Wald test.\n\n\nShow the code\nrun_GWAS &lt;- function(phenotypes){\n  \n  # Make a list of the lines in our sample and save as a text file for passing to PLINK\n  lines_to_keep &lt;- phenotypes %&gt;% dplyr::select(line) %&gt;% mutate(line_2 = line)\n  write.table(lines_to_keep, \n              row.names = FALSE, \n              col.names = FALSE, \n              file = \"data/Derived/plink_output/lines_to_keep.txt\", \n              quote = FALSE)\n\n  # Now cull the PLINK files to just the lines that we measured, and re-apply the \n  # MAF cut-off of 0.05 for the new smaller sample of DGRP lines\n  if(Operating_system == \"windows\"){ \n    run_command_windows(glue(\"--bfile dgrp2_QC_all_lines_imputed_correct\",\n                             \" --keep-allele-order\", # force PLINK to retain the major/minor allele designations that apply to the DGRP as a whole\n                             \" --keep lines_to_keep.txt --geno 0.1 --maf 0.05\", \n                             \" --make-bed --out dgrp2_QC_focal_lines\"), path = \"/data/Derived/plink_output/\")\n  }\n  \n  if(Operating_system == \"mac\"){ \n    run_command_mac(glue(\"{plink} --bfile dgrp2_QC_all_lines_imputed_correct\",\n                         \" --keep-allele-order\", # force PLINK to retain the major/minor allele designations that apply to the DGRP as a whole\n                         \" --keep lines_to_keep.txt --geno 0.1 --maf 0.05\", \n                         \" --make-bed --out dgrp2_QC_focal_lines\"), path = \"/data/Derived/plink_output/\")\n  }\n  \n\n  \n    # Define a function to add our phenotype data to a .fam file, which is needed for GWAS analysis and to make sure PLINK includes these samples\n  # The 'phenotypes' data frame needs to have a column called 'line'\n  add_phenotypes_to_fam &lt;- function(filepath, phenotypes){\n    read_delim(filepath, col_names = FALSE, delim = \" \") %&gt;% \n      dplyr::select(X1, X2, X3, X4, X5) %&gt;% # Get all the non-phenotype columns\n      left_join(phenotypes, \n                by = c(\"X1\" = \"line\")) %&gt;%\n      write.table(file = \"data/Derived/plink_output/dgrp2_QC_focal_lines_NEW.fam\", \n                  col.names = FALSE, row.names = FALSE, \n                  quote = FALSE, sep = \" \")\n    \n    unlink(\"data/Derived/plink_output/dgrp2_QC_focal_lines.fam\")\n    file.rename(\"data/Derived/plink_output/dgrp2_QC_focal_lines_NEW.fam\", \n                \"data/Derived/plink_output/dgrp2_QC_focal_lines.fam\")\n  }\n  \n  # edit the new FAM file to add the phenotype data from 'phenotypes'\n  add_phenotypes_to_fam(\"data/Derived/plink_output/dgrp2_QC_focal_lines.fam\", phenotypes)\n  \n  # Run GWAS \n  if(Operating_system == \"windows\"){ \n    run_command_windows(\"--bfile dgrp2_QC_focal_lines  --assoc --maf 0.05 --allow-no-sex\", \n                        path = \"/data/Derived/plink_output\")\n  }\n  \n  if(Operating_system == \"mac\"){ \n    run_command_mac(\"{plink} --bfile dgrp2_QC_focal_lines  --assoc --maf 0.05 --allow-no-sex\", \n                    path = \"/data/Derived/plink_output\")\n  }\n  \n  # wrangle the GWAS results\n  \n  Focal_name &lt;- deparse(substitute(phenotypes))\n  \n  gwas_results &lt;- read.table(\"data/Derived/plink_output/plink.qassoc\", \n                             header = TRUE) %&gt;% \n    dplyr::select(SNP, BETA, SE, \"T\", P)\n\n  # Rename and compress the GWAS summary stats file \n  # The filter step means that only variants in the LD-pruned subset get saved to disk.\n  gwas_results %&gt;% \n  #  filter(SNP %in% (pull(read_tsv(\"data/Derived/plink_output/dgrp2_QC_all_lines_imputed_correct_pruned.prune.in\", col_names = \"SNP\"), SNP))) %&gt;% \n    write_tsv(glue(\"data/Derived/GWAS_results/{Focal_name}.tsv.gz\"))\n  unlink(\"data/Derived/plink_output/plink.qassoc\")\n  \n  # Rename the plink log file\n  file.rename(\"data/Derived/plink_output/plink.log\",\n              glue(\"data/Derived/plink_output/{Focal_name}_log.txt\"))\n  \n  unlink(\"data/Derived/plink_output/dgrp2_QC_focal_lines.bim\")\n  unlink(\"data/Derived/plink_output/dgrp2_QC_focal_lines.bed\")\n  unlink(\"data/Derived/plink_output/dgrp2_QC_focal_lines.fam\")\n  unlink(\"data/Derived/plink_output/dgrp2_QC_focal_lines.log\")\n}"
  },
  {
    "objectID": "GWAS.html#build-manhattan-plot-function",
    "href": "GWAS.html#build-manhattan-plot-function",
    "title": "Genome wide analyses",
    "section": "Build manhattan plot function",
    "text": "Build manhattan plot function\n\n\nShow the code\nbuild_manhattan_plot &lt;- function(gwas_results){\n  \n  manhattan_data &lt;- gwas_results %&gt;%\n    mutate(position = str_split(SNP, \"_\"), # split the SNP name into logical bits\n           chr = map_chr(position, ~ .x[1]), # the first bit is the chromosome arm - name the column appropriately\n           position = as.numeric(map_chr(position, ~ .x[2])), # where on the chromosome is the SNP found\n           pval = -1 * log10(P)) %&gt;% # make visualising the p values easier\n    dplyr::select(chr, position, pval) %&gt;% \n    filter(chr != \"4\")\n  \n  # this next chunk finds convenient cuts for labels and colour changes \n  \n  max_pos &lt;- manhattan_data %&gt;%\n    group_by(chr) %&gt;%\n    summarise(\n      max_pos = max(position), \n      middle_pos = (max_pos - min(position)) / 2,\n      .groups = \"drop\") %&gt;%\n    as.data.frame()\n  \n  max_pos$max_pos &lt;- c(0, cumsum(max_pos$max_pos[1:4]))\n  \n  max_pos$label_pos &lt;- max_pos$max_pos + max_pos$middle_pos\n  \n  # combine the two dataframes created above\n  \n  manhattan_data &lt;- manhattan_data %&gt;%\n    left_join(max_pos, by = \"chr\") %&gt;%\n    mutate(position = position + max_pos,\n           chromosome_colour = case_when(chr == \"2L\" | chr == \"3L\" | chr == \"X\" ~ \"A\",\n                                         .default = \"B\"),\n           Notable = if_else(pval &gt;= -log10(1e-08), \"YES\", \"NO\"))\n  \n  plot &lt;- manhattan_data %&gt;% filter(Notable == \"NO\") %&gt;% \n    ggplot(aes(position, pval, group = chr, stroke = 0.01)) +\n    geom_point(aes(colour = chromosome_colour), size = 1.8, alpha = 1) +\n    geom_point(data =manhattan_data %&gt;% filter(Notable == \"YES\"),\n               aes(fill = chromosome_colour), colour = \"black\", shape = 21, size = 3.5, alpha = 1) +\n    geom_hline(yintercept = -log10(1e-08), linetype = 2, colour = \"#33271e\", linewidth = 1, alpha = 0.8) +\n    #geom_hline(yintercept = -log10(1e-05), linetype = 2, colour = \"#33271e\", linewidth = 1, alpha = 0.8) +\n    scale_colour_manual(values = c(met.brewer(name = \"Hokusai3\")[3], met.brewer(name = \"Hokusai3\")[6])) +\n    scale_fill_manual(values = c(met.brewer(name = \"Hokusai3\")[3], met.brewer(name = \"Hokusai3\")[6])) +\n    scale_x_continuous(breaks = max_pos$label_pos, labels = max_pos$chr) +\n    ylab(\"-log~10~(_p_)\") + \n    xlab(\"Chromosome and position\") +\n    theme_classic() +\n    theme(legend.position = \"none\",\n          axis.title.y = element_markdown(size = 14),\n          axis.title.x = element_markdown(size = 14),\n          axis.text.x = element_text(size = 12),\n          axis.text.y = element_text(size = 12))  \n}"
  },
  {
    "objectID": "GWAS.html#the-functions",
    "href": "GWAS.html#the-functions",
    "title": "Genome wide analyses",
    "section": "The functions",
    "text": "The functions\nThese are directly loaded from here\n\n\nShow the code\nrequire(compiler)\nenableJIT(4)\n\n\n[1] 3\n\n\nShow the code\nNon_Trucated_TestScore &lt;- function(X, SampleSize, CorrMatrix)\n{\n  Wi = matrix(SampleSize, nrow = 1);\n  sumW = sqrt(sum(Wi^2));\n  W = Wi / sumW;\n  \n  Sigma = ginv(CorrMatrix);\n  XX = apply(X, 1, function(x) {\n    x1 &lt;- matrix(x, ncol = length(x), nrow = 1);\n    T = W %*% Sigma %*% t(x1);\n    T = (T*T) / (W %*% Sigma %*% t(W));\n    return(T[1,1]);\n  }\n  );\n  return(XX);\n}\nSHom &lt;- cmpfun(Non_Trucated_TestScore);\n\nTrucated_TestScore &lt;- function(X, SampleSize, CorrMatrix, correct = 1, startCutoff = 0, endCutoff = 1, CutoffStep = 0.05, isAllpossible = T)\n{\n  N = dim(X)[2];\n  \n  Wi = matrix(SampleSize, nrow = 1);\n  sumW = sqrt(sum(Wi^2));\n  W = Wi / sumW;\n  \n  XX = apply(X, 1, function(x) {\n    TTT = -1;\n    \n    if (isAllpossible == T ) {\n      cutoff = sort(unique(abs(x)));      ## it will filter out any of them.\n    } else {\n      cutoff = seq(startCutoff, endCutoff, CutoffStep);\n    }\n    \n    for (threshold in cutoff) {\n      x1 = x;\n      index = which(abs(x1) &lt; threshold);\n      \n      if (length(index) == N) break;\n      \n      A = CorrMatrix;\n      \n      W1 = W;\n      if (length(index) !=0 ) {\n        x1 = x1[-index];\n        A  = A[-index, -index];   ## update the matrix\n        W1 = W[-index];\n      }\n      \n      if (correct == 1)\n      {\n        index = which(x1 &lt; 0);\n        if (length(index) != 0) {\n          W1[index] = -W1[index];    ## update the sign\n        }\n      }\n      \n      A = ginv(A);\n      x1 = matrix(x1, nrow = 1);\n      W1 = matrix(W1, nrow = 1);\n      T = W1 %*% A %*% t(x1);\n      T = (T*T) / (W1 %*% A %*% t(W1));\n      \n      if (TTT &lt; T[1,1]) TTT = T[1,1];\n    }\n    return(TTT);\n  }\n  );\n  return(XX);\n}\nSHet &lt;- cmpfun(Trucated_TestScore);\n\nEstimateGamma &lt;- function (N = 1E6, SampleSize, CorrMatrix, correct = 1, startCutoff = 0, endCutoff = 1, CutoffStep = 0.05, isAllpossible = T) {\n  \n  Wi = matrix(SampleSize, nrow = 1);\n  sumW = sqrt(sum(Wi^2));\n  W = Wi / sumW;\n  \n  Permutation = mvrnorm(n = N, mu = c(rep(0, length(SampleSize))), Sigma = CorrMatrix, tol = 1e-8, empirical = F);\n  \n  Stat =  Trucated_TestScore(X = Permutation, SampleSize = SampleSize, CorrMatrix = CorrMatrix,\n                             correct = correct, startCutoff = startCutoff, endCutoff = endCutoff,\n                             CutoffStep = CutoffStep, isAllpossible = isAllpossible);\n  a = min(Stat)*3/4\n  ex3 = mean(Stat*Stat*Stat)\n  V =   var(Stat);\n  \n  for (i in 1:100){\n    E = mean(Stat)-a;\n    k = E^2/V\n    theta = V/E\n    a = (-3*k*(k+1)*theta**2+sqrt(9*k**2*(k+1)**2*theta**4-12*k*theta*(k*(k+1)*(k+2)*theta**3-ex3)))/6/k/theta\n  }\n  \n  para = c(k,theta,a);\n  return(para);\n}\n\nEmpDist &lt;- function (N = 1E6, SampleSize, CorrMatrix, correct = 1, startCutoff = 0, endCutoff = 1, CutoffStep = 0.05, isAllpossible = T) {\n  \n  Wi = matrix(SampleSize, nrow = 1);\n  sumW = sqrt(sum(Wi^2));\n  W = Wi / sumW;\n  \n  Permutation = mvrnorm(n = N, mu = c(rep(0, length(SampleSize))), Sigma = CorrMatrix, tol = 1e-8, empirical = F);\n  \n  Stat =  Trucated_TestScore(X = Permutation, SampleSize = SampleSize, CorrMatrix = CorrMatrix, correct = correct, startCutoff = startCutoff, endCutoff = endCutoff, CutoffStep = CutoffStep, isAllpossible = isAllpossible);\n  \n  return(Stat);\n}"
  },
  {
    "objectID": "GWAS.html#run-univariate-gwas",
    "href": "GWAS.html#run-univariate-gwas",
    "title": "Genome wide analyses",
    "section": "Run univariate GWAS",
    "text": "Run univariate GWAS\nRun GWAS for each environmental context and save the results.\n\n\nShow the code\n# prepare phenotype data for GWAS\n\nArya_f_l &lt;- prep_for_e0_GWAS(Arya_2010_f)\nArya_m_l &lt;- prep_for_e0_GWAS(Arya_2010_m)\nArya_f_h &lt;- prep_for_h_GWAS(Arya_2010_f)\nArya_m_h &lt;- prep_for_h_GWAS(Arya_2010_m)\nHuang_f_18_l &lt;- prep_for_e0_GWAS(Huang_2020_f_18)\nHuang_f_18_h &lt;- prep_for_h_GWAS(Huang_2020_f_18)\nHuang_m_18_l &lt;- prep_for_e0_GWAS(Huang_2020_m_18)\nHuang_m_18_h &lt;- prep_for_h_GWAS(Huang_2020_m_18)\nHuang_f_25_l &lt;- prep_for_e0_GWAS(Huang_2020_f_25)\nHuang_f_25_h &lt;- prep_for_h_GWAS(Huang_2020_f_25)\nHuang_m_25_l &lt;- prep_for_e0_GWAS(Huang_2020_m_25)\nHuang_m_25_h &lt;- prep_for_h_GWAS(Huang_2020_m_25)\nHuang_f_28_l &lt;- prep_for_e0_GWAS(Huang_2020_f_28)\nHuang_f_28_h &lt;- prep_for_h_GWAS(Huang_2020_f_28)\nHuang_m_28_l &lt;- prep_for_e0_GWAS(Huang_2020_m_28)\nHuang_m_28_h &lt;- prep_for_h_GWAS(Huang_2020_m_28)\nWilson_f_l_1 &lt;- prep_for_e0_GWAS(Wilson_2020_f_1)\nWilson_f_h_1 &lt;- prep_for_h_GWAS(Wilson_2020_f_1)\nWilson_f_l_2 &lt;- prep_for_e0_GWAS(Wilson_2020_f_2)\nWilson_f_h_2 &lt;- prep_for_h_GWAS(Wilson_2020_f_2)\nDurham_f_l &lt;- prep_for_e0_GWAS(Durham_2014_f)\nDurham_f_h &lt;- prep_for_h_GWAS(Durham_2014_f)\nPatel_f_l &lt;- prep_for_e0_GWAS(Patel_2021_f)\nPatel_f_h &lt;- prep_for_h_GWAS(Patel_2021_f)\n\n# if not already done, run the GWA tests\n\nif(!file.exists(\"data/Derived/GWAS_results/Arya_f_l.tsv.gz\")) {\nrun_GWAS(Arya_f_l)\nrun_GWAS(Arya_m_l)\nrun_GWAS(Arya_f_h)\nrun_GWAS(Arya_m_h)\nrun_GWAS(Huang_f_18_l)\nrun_GWAS(Huang_f_18_h)\nrun_GWAS(Huang_m_18_l)\nrun_GWAS(Huang_m_18_h)\nrun_GWAS(Huang_f_25_l)\nrun_GWAS(Huang_f_25_h)\nrun_GWAS(Huang_m_25_l)\nrun_GWAS(Huang_m_25_h)\nrun_GWAS(Huang_f_28_l)\nrun_GWAS(Huang_f_28_h)\nrun_GWAS(Huang_m_28_l)\nrun_GWAS(Huang_m_28_h)\nrun_GWAS(Wilson_f_l_1)\nrun_GWAS(Wilson_f_h_1)\nrun_GWAS(Wilson_f_l_2)\nrun_GWAS(Wilson_f_h_2)\nrun_GWAS(Durham_f_l)\nrun_GWAS(Durham_f_h)\nrun_GWAS(Patel_f_l)\nrun_GWAS(Patel_f_h)\n}\n\n\nLoad the results\n\n\nShow the code\n# load GWAS results\n\n# Life expectancy\n\nArya_f_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_f_l.tsv.gz\") \n  \nHuang_f_18_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_18_l.tsv.gz\")\n\nHuang_f_25_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_25_l.tsv.gz\") \n\nHuang_f_28_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_28_l.tsv.gz\")\n\nWilson_f_l_1_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_l_1.tsv.gz\") \n\nWilson_f_l_2_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_l_2.tsv.gz\") \n\nDurham_f_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Durham_f_l.tsv.gz\")\n\nPatel_f_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Patel_f_l.tsv.gz\")\n\nArya_m_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_m_l.tsv.gz\")\n\nHuang_m_18_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_18_l.tsv.gz\")\n\nHuang_m_25_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_25_l.tsv.gz\")\n\nHuang_m_28_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_28_l.tsv.gz\")\n\n# Lifespan equality\n\nArya_f_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_f_h.tsv.gz\")\n  \nHuang_f_18_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_18_h.tsv.gz\")\n\nHuang_f_25_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_25_h.tsv.gz\") \n\nHuang_f_28_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_28_h.tsv.gz\")\n\nWilson_f_h_1_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_h_1.tsv.gz\")\n\nWilson_f_h_2_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_h_2.tsv.gz\")\n\nDurham_f_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Durham_f_h.tsv.gz\")\n\nPatel_f_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Patel_f_h.tsv.gz\")\n\nArya_m_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_m_h.tsv.gz\")\n\nHuang_m_18_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_18_h.tsv.gz\")\n\nHuang_m_25_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_25_h.tsv.gz\")\n\nHuang_m_28_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_28_h.tsv.gz\")\n\n\nAs a point of comparison, we find the sum of significant associations detected by univariate GWAS\nTable SX. Genotype to phenotype associations detected by univariate GWAS, for life expectancy. The total row shows the number of unique candidate variants identified across all studies. *Wilson et al phenotyped lifespan under two separate dietary conditions, which we include separately in our analysis. The number of genomic regions indicates the number of assocations found after LD pruning.\n\n\nShow the code\n# filter down to sig associations\ne0_table &lt;-\n  bind_rows(\n    tibble(`p &lt; 1e-05 variants` = nrow(Arya_f_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Arya_f_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Arya_f_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Arya_f_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_18_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_18_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_18_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_18_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_25_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_25_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_25_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_25_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_28_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_28_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_28_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_28_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Wilson_f_l_1_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Wilson_f_l_1_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Wilson_f_l_1_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Wilson_f_l_1_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Wilson et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Wilson_f_l_2_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Wilson_f_l_2_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Wilson_f_l_2_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Wilson_f_l_2_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Wilson et al 2020*\",\n             Treatment = \"2\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Durham_f_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Durham_f_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Durham_f_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Durham_f_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Durham et al 2014\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Patel_f_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Patel_f_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Patel_f_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Patel_f_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Patel et al 2021\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"23\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Arya_m_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Arya_m_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Arya_m_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Arya_m_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_18_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_18_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_18_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_18_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_25_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_25_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_25_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_25_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_28_l_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_28_l_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_28_l_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_28_l_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n  ) \n\n# how many unique variants have been detected?\np_05_SNPs_l &lt;-\n  bind_rows(\n    \n    Arya_f_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Arya_m_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_18_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_25_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_28_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_18_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_25_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_28_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Wilson_f_l_1_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Wilson_f_l_2_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Durham_f_l_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Patel_f_l_GWAS %&gt;% \n      filter(P &lt; 1e-05)\n  ) %&gt;% \n  distinct(SNP) %&gt;% \n  left_join(Genomic_regions %&gt;% mutate(Pruned_variant = \"YES\")) \n\ne0_table %&gt;% \n  add_row(Study = \"Totals\",\n          Sex = \"\",\n          Temperature = \"\",\n          `p &lt; 1e-05 variants` = nrow(p_05_SNPs_l),\n          `p &lt; 1e-05 genomic regions` = nrow(p_05_SNPs_l %&gt;% filter(Pruned_variant == \"YES\")),\n          `p &lt; 1e-08 variants` = sum(e0_table$`p &lt; 1e-08 variants`),\n          `p &lt; 1e-08 genomic regions` = sum(e0_table$`p &lt; 1e-08 genomic regions`)) %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\n\n\n\nStudy\nSex\nTemperature\np &lt; 1e-05 variants\np &lt; 1e-05 genomic regions\np &lt; 1e-08 variants\np &lt; 1e-08 genomic regions\n\n\n\n\nArya et al 2010\nFemale\n25\n29\n5\n0\n0\n\n\nHuang et al 2020\nFemale\n18\n14\n4\n0\n0\n\n\nHuang et al 2020\nFemale\n25\n43\n7\n0\n0\n\n\nHuang et al 2020\nFemale\n28\n34\n0\n0\n0\n\n\nWilson et al 2020\nFemale\n25\n22\n4\n0\n0\n\n\nWilson et al 2020*\nFemale\n25\n10\n1\n0\n0\n\n\nDurham et al 2014\nFemale\n25\n51\n5\n0\n0\n\n\nPatel et al 2021\nFemale\n23\n96\n4\n0\n0\n\n\nArya et al 2010\nMale\n25\n12\n5\n0\n0\n\n\nHuang et al 2020\nMale\n18\n26\n2\n0\n0\n\n\nHuang et al 2020\nMale\n25\n39\n2\n0\n0\n\n\nHuang et al 2020\nMale\n28\n22\n2\n0\n0\n\n\nTotals\n\n\n389\n39\n0\n0\n\n\n\n\n\n\n\nTable SX. Genotype to phenotype associations detected by univariate GWAS, for lifespan equality. The total row shows the number of unique candidate variants identified across all studies. *Wilson et al phenotyped lifespan under two separate dietary conditions, which we include separately in our analysis. The number of genomic regions indicates the number of assocations found after LD pruning.\n\n\nShow the code\n# filter down to sig associations\nh_table &lt;-\n  bind_rows(\n    tibble(`p &lt; 1e-05 variants` = nrow(Arya_f_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Arya_f_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Arya_f_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Arya_f_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_18_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_18_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_18_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_18_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_25_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_25_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_25_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_25_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_28_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_28_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_28_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_f_28_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Wilson_f_h_1_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Wilson_f_h_1_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Wilson_f_h_1_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Wilson_f_h_1_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Wilson et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Wilson_f_h_2_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Wilson_f_h_2_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Wilson_f_h_2_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Wilson_f_h_2_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Wilson et al 2020*\",\n             Treatment = \"2\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Durham_f_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Durham_f_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Durham_f_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Durham_f_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Durham et al 2014\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Patel_f_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Patel_f_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Patel_f_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Patel_f_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Patel et al 2021\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"23\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Arya_m_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Arya_m_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Arya_m_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Arya_m_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_18_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_18_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_18_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_18_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_25_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_25_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_25_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_25_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_28_h_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_28_h_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_28_h_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, Huang_m_28_h_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n  ) \n\n# how many unique variants have been detected?\np_05_SNPs_h &lt;-\n  bind_rows(\n    \n    Arya_f_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Arya_m_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_18_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_25_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_28_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_18_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_25_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_28_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Wilson_f_h_1_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Wilson_f_h_2_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Durham_f_h_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Patel_f_h_GWAS %&gt;% \n      filter(P &lt; 1e-05)\n  ) %&gt;% \n  distinct(SNP) %&gt;% \n  left_join(Genomic_regions %&gt;% mutate(Pruned_variant = \"YES\")) \n\nh_table %&gt;% \n  add_row(Study = \"Totals\",\n          Sex = \"\",\n          Temperature = \"\",\n          `p &lt; 1e-05 variants` = nrow(p_05_SNPs_h),\n          `p &lt; 1e-05 genomic regions` = nrow(p_05_SNPs_h %&gt;% filter(Pruned_variant == \"YES\")),\n          `p &lt; 1e-08 variants` = sum(h_table$`p &lt; 1e-08 variants`),\n          `p &lt; 1e-08 genomic regions` = sum(h_table$`p &lt; 1e-08 genomic regions`)) %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\n\n\n\nStudy\nSex\nTemperature\np &lt; 1e-05 variants\np &lt; 1e-05 genomic regions\np &lt; 1e-08 variants\np &lt; 1e-08 genomic regions\n\n\n\n\nArya et al 2010\nFemale\n25\n12\n3\n0\n0\n\n\nHuang et al 2020\nFemale\n18\n4\n1\n0\n0\n\n\nHuang et al 2020\nFemale\n25\n15\n8\n0\n0\n\n\nHuang et al 2020\nFemale\n28\n41\n5\n0\n0\n\n\nWilson et al 2020\nFemale\n25\n50\n3\n0\n0\n\n\nWilson et al 2020*\nFemale\n25\n49\n3\n0\n0\n\n\nDurham et al 2014\nFemale\n25\n12\n4\n0\n0\n\n\nPatel et al 2021\nFemale\n23\n17\n2\n0\n0\n\n\nArya et al 2010\nMale\n25\n14\n3\n0\n0\n\n\nHuang et al 2020\nMale\n18\n14\n2\n0\n0\n\n\nHuang et al 2020\nMale\n25\n24\n1\n0\n0\n\n\nHuang et al 2020\nMale\n28\n38\n3\n0\n0\n\n\nTotals\n\n\n270\n37\n0\n0"
  },
  {
    "objectID": "GWAS.html#applying-cross-phenotype-meta-analysis",
    "href": "GWAS.html#applying-cross-phenotype-meta-analysis",
    "title": "Genome wide analyses",
    "section": "Applying cross-phenotype meta-analysis",
    "text": "Applying cross-phenotype meta-analysis\n\nGenerate the genetic correlation matrix\nWe calculate the genetic correlations between traits using both the line mean and SNP effect size comparisons. Following Zhu et al. (2015), we use the SNP correlations for analysis.\n\n\nShow the code\n# use the BETA coefficients to build the SNP correlation matrix\n\nSNP_beta_e0 &lt;-\n  bind_rows(\n    Arya_f_l_GWAS %&gt;% \n      mutate(Study = \"Arya_2010\", Sex = \"Female\", Temperature = 25),\n    Huang_f_18_l_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Female\", Temperature= 18),\n    Huang_f_25_l_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Female\", Temperature= 25),\n    Huang_f_28_l_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Female\", Temperature= 28),\n    Wilson_f_l_1_GWAS %&gt;% \n      mutate(Study= \"Wilson_2020_1\", Sex= \"Female\", Temperature= 25),\n    Wilson_f_l_2_GWAS %&gt;% \n      mutate(Study= \"Wilson_2020_2\", Sex= \"Female\", Temperature= 25),\n    Durham_f_l_GWAS %&gt;% \n      mutate(Study= \"Durham_2014\", Sex= \"Female\", Temperature= 25),\n    Patel_f_l_GWAS %&gt;% \n      mutate(Study= \"Patel_2021\", Sex= \"Female\", Temperature= 23),\n    Arya_m_l_GWAS %&gt;% \n      mutate(Study= \"Arya_2010\", Sex= \"Male\", Temperature= 25),\n    Huang_m_18_l_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Male\", Temperature= 18),\n    Huang_m_25_l_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Male\", Temperature = 25),\n    Huang_m_28_l_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Sex = \"Male\", Temperature = 28)) %&gt;% \n  dplyr::select(SNP, BETA, Study, Sex, Temperature) %&gt;% \n  pivot_wider(values_from = BETA, names_from = c(Study, Sex, Temperature)) %&gt;% \n  rename(Arya_f_25 = Arya_2010_Female_25,\n         Huang_f_18 = Huang_2020_Female_18,\n         Huang_f_25 = Huang_2020_Female_25,\n         Huang_f_28 = Huang_2020_Female_28,\n         Wilson_f_25_1 = Wilson_2020_1_Female_25,\n         Wilson_f_25_2 = Wilson_2020_2_Female_25,\n         Durham_f_25 = Durham_2014_Female_25,\n         Patel_f_23 = Patel_2021_Female_23,\n         Arya_m_25 = Arya_2010_Male_25,\n         Huang_m_18 = Huang_2020_Male_18,\n         Huang_m_25 = Huang_2020_Male_25,\n         Huang_m_28 = Huang_2020_Male_28)\n\nSNP_beta_e0_LD_pruned &lt;-\n  SNP_beta_e0 %&gt;% \n  inner_join(Genomic_regions)\n\nSNP_beta_h &lt;-\n  bind_rows(\n    Arya_f_h_GWAS %&gt;% \n      mutate(Study = \"Arya_2010\", Sex = \"Female\", Temperature = 25),\n    Huang_f_18_h_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Female\", Temperature= 18),\n    Huang_f_25_h_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Female\", Temperature= 25),\n    Huang_f_28_h_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Female\", Temperature= 28),\n    Wilson_f_h_1_GWAS %&gt;% \n      mutate(Study= \"Wilson_2020_1\", Sex= \"Female\", Temperature= 25),\n    Wilson_f_h_2_GWAS %&gt;% \n      mutate(Study= \"Wilson_2020_2\", Sex= \"Female\", Temperature= 25),\n    Durham_f_h_GWAS %&gt;% \n      mutate(Study= \"Durham_2014\", Sex= \"Female\", Temperature= 25),\n    Patel_f_h_GWAS %&gt;% \n      mutate(Study= \"Patel_2021\", Sex= \"Female\", Temperature= 23),\n    Arya_m_h_GWAS %&gt;% \n      mutate(Study= \"Arya_2010\", Sex= \"Male\", Temperature= 25),\n    Huang_m_18_h_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Male\", Temperature= 18),\n    Huang_m_25_h_GWAS %&gt;% \n      mutate(Study= \"Huang_2020\", Sex= \"Male\", Temperature = 25),\n    Huang_m_28_h_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Sex = \"Male\", Temperature = 28)) %&gt;% \n  dplyr::select(SNP, BETA, Study, Sex, Temperature) %&gt;% \n  pivot_wider(values_from = BETA, names_from = c(Study, Sex, Temperature)) %&gt;% \n  rename(Arya_f_25 = Arya_2010_Female_25,\n         Huang_f_18 = Huang_2020_Female_18,\n         Huang_f_25 = Huang_2020_Female_25,\n         Huang_f_28 = Huang_2020_Female_28,\n         Wilson_f_25_1 = Wilson_2020_1_Female_25,\n         Wilson_f_25_2 = Wilson_2020_2_Female_25,\n         Durham_f_25 = Durham_2014_Female_25,\n         Patel_f_23 = Patel_2021_Female_23,\n         Arya_m_25 = Arya_2010_Male_25,\n         Huang_m_18 = Huang_2020_Male_18,\n         Huang_m_25 = Huang_2020_Male_25,\n         Huang_m_28 = Huang_2020_Male_28)\n\nSNP_beta_h_LD_pruned &lt;-\n  SNP_beta_h %&gt;% \n  inner_join(Genomic_regions)\n  \n\nSNP_e0_corr_matrix &lt;- cor(SNP_beta_e0_LD_pruned %&gt;% dplyr::select(-SNP), use = \"pairwise.complete.obs\", method = \"spearman\")\nSNP_h_corr_matrix &lt;- cor(SNP_beta_h_LD_pruned %&gt;% dplyr::select(-SNP), use = \"pairwise.complete.obs\", method = \"spearman\")\n\n\nline_data &lt;-\n  bind_rows(Arya_2010_f,\n            Huang_2020_f_18,\n            Huang_2020_f_25,\n            Huang_2020_f_28,\n            Wilson_2020_f_1,\n            Wilson_2020_f_2,\n            Durham_2014_f,\n            Patel_2021_f,\n            Arya_2010_m,\n            Huang_2020_m_18,\n            Huang_2020_m_25,\n            Huang_2020_m_28) %&gt;% \n  dplyr::select(line, Treatment, Sex, Temperature, e0, h) %&gt;% \n  pivot_wider(values_from = c(e0, h), names_from = c(Treatment, Sex, Temperature)) \n\nline_data_e0 &lt;-\n  line_data %&gt;% \n  dplyr::select(contains(\"e0\")) %&gt;% \n  rename(Arya_f_25 = e0_Arya_2010_1_Female_25,\n         Huang_f_18 = e0_Huang_2020_1_Female_18,\n         Huang_f_25 =  e0_Huang_2020_2_Female_25,\n         Huang_f_28 = e0_Huang_2020_3_Female_28,\n         Wilson_f_25_1 = e0_Wilson_2020_1_Female_25,\n         Wilson_f_25_2 = e0_Wilson_2020_2_Female_25,\n         Durham_f_25 = e0_Durham_2014_1_Female_25,\n         Patel_f_23 = e0_Patel_2021_1_Female_23,\n         Arya_m_25 = e0_Arya_2010_1_Male_25,\n         Huang_m_18 = e0_Huang_2020_1_Male_18,\n         Huang_m_25 = e0_Huang_2020_2_Male_25,\n         Huang_m_28 = e0_Huang_2020_3_Male_28)\n\nline_data_h &lt;-\n  line_data %&gt;% \n  dplyr::select(!contains(\"e0\"), -line) %&gt;% \n  rename(Arya_f_25 = h_Arya_2010_1_Female_25,\n         Huang_f_18 = h_Huang_2020_1_Female_18,\n         Huang_f_25 =  h_Huang_2020_2_Female_25,\n         Huang_f_28 = h_Huang_2020_3_Female_28,\n         Wilson_f_25_1 = h_Wilson_2020_1_Female_25,\n         Wilson_f_25_2 = h_Wilson_2020_2_Female_25,\n         Durham_f_25 = h_Durham_2014_1_Female_25,\n         Patel_f_23 = h_Patel_2021_1_Female_23,\n         Arya_m_25 = h_Arya_2010_1_Male_25,\n         Huang_m_18 = h_Huang_2020_1_Male_18,\n         Huang_m_25 = h_Huang_2020_2_Male_25,\n         Huang_m_28 = h_Huang_2020_3_Male_28)\n\nline_e0_corr_matrix &lt;- cor(line_data_e0, use = \"pairwise.complete.obs\", method = \"spearman\")\nline_h_corr_matrix &lt;- cor(line_data_h, use = \"pairwise.complete.obs\", method = \"spearman\")\n\n\nLet’s visualise the genetic correlation between lifespan measures. First for life expectancy:\n\n\nShow the code\nbreaksList &lt;- seq(-1, 1, by = 0.02)\n\npheatmap(SNP_e0_corr_matrix, breaks = breaksList, \nmain = \"\", legend_labels = c(\"-1\", \"-0.5\", \"0\", \"0.5\", \"Genetic correlation\\n\"),\ncolor = colorRampPalette(rev(met.brewer(\"Benedictus\", direction = 1)))(length(breaksList)),\nlegend = TRUE, cutree_rows = 3, cutree_cols = 3, angle_col = 45, border_color = \"white\")\n\n\n\n\n\n\n\n\n\nNow for lifespan equality\n\n\nShow the code\npheatmap(SNP_h_corr_matrix, breaks = breaksList, \nmain = \"\", legend_labels = c(\"-1\", \"-0.5\", \"0\", \"0.5\", \"Genetic correlation\\n\"),\ncolor = colorRampPalette(rev(met.brewer(\"Benedictus\", direction = 1)))(length(breaksList)),\nlegend = TRUE, cutree_rows = 3, cutree_cols = 3, angle_col = 45, border_color = \"white\")\n\n\n\n\n\n\n\n\n\n\n\nCalculate meta-analytic test statistics\nThe purpose of this meta-analysis is to search for SNPs that have some effect on life expectancy or lifespan equality, expressed in many different contexts (sexes, temperatures and mating status’).\nTo conduct CPASSOC for a given SNP, we need a \\(T\\) statistic from each environmental context. A different number of lines were included in each GWAS, which caused small differences in the number of SNPs assessed in each cohort. We therefore prune the list of SNPs to those included in all univariate analyses. After pruning, 1,603,213 SNPs remain.\nThe Bonferroni adjusted significance threshold for this number of tests is \\(p_{adj} = \\frac{0.05}{1603213} = 3.12\\times 10^{-8}\\); here and for all future analysis, we use p \\(&lt; 10^{-8}\\) as our significance threshold, as this is slightly more conservative and easier to quickly interpret.\n\nLife expectancy\n\n\nShow the code\nArya_f_l_T &lt;- Arya_f_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_f = T)\n  \nHuang_f_18_l_T &lt;- Huang_f_18_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_18 = T)\n\nHuang_f_25_l_T &lt;- Huang_f_25_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_25 = T)\n\nHuang_f_28_l_T &lt;- Huang_f_28_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_28 = T)\n\nWilson_f_l_1_T &lt;- Wilson_f_l_1_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Wilson_f_25_1 = T)\n\nWilson_f_l_2_T &lt;- Wilson_f_l_2_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Wilson_f_25_2 = T)\n\nDurham_f_l_T &lt;- Durham_f_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Durham_f_25 = T)\n\nPatel_f_l_T &lt;- Patel_f_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Patel_f_23 = T)\n\nArya_m_l_T &lt;- Arya_m_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_m = T)\n\nHuang_m_18_l_T &lt;- Huang_m_18_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_18  = T)\n\nHuang_m_25_l_T &lt;- Huang_m_25_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_25 = T)\n\nHuang_m_28_l_T &lt;- Huang_m_28_l_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_28  = T)\n\nall_e0_t_stats &lt;-\n  Arya_f_l_T %&gt;%\n  inner_join(Huang_f_18_l_T, by = \"SNP\") %&gt;%\n  inner_join(Huang_f_25_l_T, by = \"SNP\") %&gt;%\n  inner_join(Huang_f_28_l_T, by = \"SNP\") %&gt;% \n  inner_join(Wilson_f_l_1_T, by = \"SNP\") %&gt;% \n  inner_join(Wilson_f_l_2_T, by = \"SNP\") %&gt;% \n  inner_join(Durham_f_l_T, by = \"SNP\") %&gt;% \n  inner_join(Patel_f_l_T, by = \"SNP\") %&gt;% \n  inner_join(Arya_m_l_T, by = \"SNP\") %&gt;% \n  inner_join(Huang_m_18_l_T, by = \"SNP\") %&gt;% \n  inner_join(Huang_m_25_l_T, by = \"SNP\") %&gt;%\n  inner_join(Huang_m_28_l_T, by = \"SNP\")\n\nall_e0_t_stats_values &lt;-\n  all_e0_t_stats %&gt;% \n  dplyr::select(2:13)\n\nSample_size_all &lt;- c(165, 183, 186, 177, 161, 161, 176, 193, 165, 183, 186, 177) \n\nif(!file.exists(\"data/Derived/GWAS_results/all_e0_meta_results.csv\")) {\n\n# run the homogeneous effect meta-analysis\n\nS_hom &lt;- SHom(all_e0_t_stats_values, Sample_size_all, SNP_e0_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary (potentially in sign) for different traits e.g. if a SNP has a sex or enviornment opposite effect on lifespan)\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_all, SNP_e0_corr_matrix);\n\nS_het &lt;- SHet(all_e0_t_stats_values, Sample_size_all, SNP_e0_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n# bind meta statistics with the univariate effect sizes\n\nall_e0_meta_results &lt;- \n  all_e0_t_stats %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) \n\nwrite_csv(all_e0_meta_results, \"data/Derived/GWAS_results/all_e0_meta_results.csv\")\n\n} else all_e0_meta_results &lt;- read_csv(\"data/Derived/GWAS_results/all_e0_meta_results.csv\")\n\n\n\n\nLifespan equality\n\n\nShow the code\nArya_f_h_T &lt;- Arya_f_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_f = T)\n  \nHuang_f_18_h_T &lt;- Huang_f_18_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_18 = T)\n\nHuang_f_25_h_T &lt;- Huang_f_25_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_25 = T)\n\nHuang_f_28_h_T &lt;- Huang_f_28_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_28 = T)\n\nWilson_f_h_1_T &lt;- Wilson_f_h_1_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Wilson_f_25_1 = T)\n\nWilson_f_h_2_T &lt;- Wilson_f_h_2_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Wilson_f_25_2 = T)\n\nDurham_f_h_T &lt;- Durham_f_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Durham_f_25 = T)\n\nPatel_f_h_T &lt;- Patel_f_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Patel_f_23 = T)\n\nArya_m_h_T &lt;- Arya_m_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_m = T)\n\nHuang_m_18_h_T &lt;- Huang_m_18_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_18  = T)\n\nHuang_m_25_h_T &lt;- Huang_m_25_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_25 = T)\n\nHuang_m_28_h_T &lt;- Huang_m_28_h_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_28  = T)\n\n\nall_h_t_stats &lt;-\n  Arya_f_h_T %&gt;%\n  inner_join(Huang_f_18_h_T, by = \"SNP\") %&gt;%\n  inner_join(Huang_f_25_h_T, by = \"SNP\") %&gt;%\n  inner_join(Huang_f_28_h_T, by = \"SNP\") %&gt;% \n  inner_join(Wilson_f_h_1_T, by = \"SNP\") %&gt;%\n  inner_join(Wilson_f_h_2_T, by = \"SNP\") %&gt;% \n  inner_join(Durham_f_h_T, by = \"SNP\") %&gt;% \n  inner_join(Patel_f_h_T, by = \"SNP\") %&gt;% \n  inner_join(Arya_m_h_T, by = \"SNP\") %&gt;% \n  inner_join(Huang_m_18_h_T, by = \"SNP\") %&gt;% \n  inner_join(Huang_m_25_h_T, by = \"SNP\") %&gt;%\n  inner_join(Huang_m_28_h_T, by = \"SNP\") \n  \n\nall_h_t_stats_values &lt;-\n  all_h_t_stats %&gt;% \n  dplyr::select(2:13)\n\nif(!file.exists(\"data/Derived/GWAS_results/all_h_meta_results.csv\")) {\n\nS_hom &lt;- SHom(all_h_t_stats_values, Sample_size_all, SNP_h_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary (potentially in sign) for different traits e.g. if a SNP has a sex or enviornment opposite effect on lifespan)\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_all, SNP_h_corr_matrix);\n\nS_het &lt;- SHet(all_h_t_stats_values, Sample_size_all, SNP_h_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n# bind meta statistics with the univariate effect sizes\n\nall_h_meta_results &lt;- \n  all_h_t_stats %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het)\n\nwrite_csv(all_h_meta_results, \"data/Derived/GWAS_results/all_h_meta_results.csv\")\n} else all_h_meta_results &lt;- read_csv(\"data/Derived/GWAS_results/all_h_meta_results.csv\")"
  },
  {
    "objectID": "GWAS.html#visualise-the-results",
    "href": "GWAS.html#visualise-the-results",
    "title": "Genome wide analyses",
    "section": "Visualise the results",
    "text": "Visualise the results\nWe combine GWAS summary statistics calculated from lifespan data measured across different contexts. It’s likely that some SNPs have G x E interactions that would lead to a heterogeneous effect across treatments. We therefore utilise the S_het calculated p-values.\nFirst lets show the effect of CPASSOC on the number of variants found to be associated with life expectancy and lifespan equality.\nTable SX. the number of variants associated with life expectancy and lifespan equality at various significance thresholds, estimated by univariate GWAS or CPASSOC.\n\n\nShow the code\ntibble(Analysis = c(\"CPASSOC\", \"Univariate\", \"CPASSOC\", \"Univariate\"),\n       Trait = c(\"Life expectancy\", \"Life expectancy\", \"Lifespan equality\", \"Lifespan equality\"),\n       `p &lt; 1e-05 variants` = c(sum(all_e0_meta_results$meta_p_het &lt; 1e-05),\n                                nrow(p_05_SNPs_l),\n                                sum(all_h_meta_results$meta_p_het &lt; 1e-05),\n                                nrow(p_05_SNPs_h)),\n       `p &lt; 1e-05 genomic regions` = c(nrow(all_e0_meta_results %&gt;% filter(meta_p_het &lt; 1e-05) %&gt;% inner_join(Genomic_regions)),\n                                          nrow(p_05_SNPs_l %&gt;% filter(Pruned_variant == \"YES\")),\n                                          nrow(all_h_meta_results %&gt;% filter(meta_p_het &lt; 1e-05) %&gt;% inner_join(Genomic_regions)),\n                                          nrow(p_05_SNPs_h %&gt;% filter(Pruned_variant == \"YES\"))),\n       `p &lt; 1e-08 variants` = c(sum(all_e0_meta_results$meta_p_het &lt; 1e-08),\n                                sum(e0_table$`p &lt; 1e-08 variants`),\n                                sum(all_h_meta_results$meta_p_het &lt; 1e-08),\n                                sum(h_table$`p &lt; 1e-08 variants`)),\n       `p &lt; 1e-08 genomic regions` = c(nrow(all_e0_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% inner_join(Genomic_regions)),\n                                          sum(h_table$`p &lt; 1e-08 variants`),\n                                          nrow(all_h_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% inner_join(Genomic_regions)),\n                                          sum(h_table$`p &lt; 1e-08 variants`)))  %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\n\n\n\nAnalysis\nTrait\np &lt; 1e-05 variants\np &lt; 1e-05 genomic regions\np &lt; 1e-08 variants\np &lt; 1e-08 genomic regions\n\n\n\n\nCPASSOC\nLife expectancy\n467\n248\n121\n58\n\n\nUnivariate\nLife expectancy\n389\n39\n0\n0\n\n\nCPASSOC\nLifespan equality\n158\n78\n19\n10\n\n\nUnivariate\nLifespan equality\n270\n37\n0\n0\n\n\n\n\n\n\n\nTable SX. genes that encompass or are very close to the genetic variants that have strong associations with life expectancy.\n\n\nShow the code\n# join gene annotations with the list of analysed variants \n# note that some SNPs are associated with &gt;1 gene, because the gene annotations overlap (I think) or the variant is close to multiple annotated genes. Others are not near any known genes, producing NAs.\n\nlife_expectancy_variants &lt;-\n  all_e0_meta_results %&gt;%\n  filter(meta_p_het &lt; 1e-08) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het) %&gt;%\n  left_join(annotations %&gt;% filter(distance.to.gene &lt;= 500)) %&gt;% \n  mutate(meta_p_het = signif(meta_p_het*10^18, 3)/10^18,\n         S_het = round(S_het, 3)) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het, FBID, gene_name, site.class, distance.to.gene)\n\nlife_expectancy_variants %&gt;% \n  my_data_table()\n\n\n\n\n\n\nTable SX. genes that encompass or are very close to the genetic variants that have strong associations with lifespan equality.\n\n\nShow the code\n# join gene annotations with the list of analysed variants \n# note that some SNPs are associated with &gt;1 gene, because the gene annotations overlap (I think) or the variant is close to multiple annotated genes. Others are not near any known genes, producing NAs.\n\nlifespan_equality_variants &lt;-\n  all_h_meta_results %&gt;%\n  filter(meta_p_het &lt; 1e-08) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het) %&gt;%\n  left_join(annotations %&gt;% filter(distance.to.gene &lt;= 500)) %&gt;% \n  mutate(meta_p_het = signif(meta_p_het*10^15, 3)/10^15,\n         S_het = round(S_het, 3)) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het, FBID, gene_name, site.class, distance.to.gene)\n\nlifespan_equality_variants %&gt;% \n  my_data_table()\n\n\n\n\n\n\nNow build some ‘Manhattan plots’ to show where these significant associations can be found:\n\n\nShow the code\ne0_results &lt;- \n  all_e0_meta_results %&gt;% \n  inner_join(Genomic_regions) %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  mutate(logp = -log10(P))\n\nh_results &lt;- \n  all_h_meta_results %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  inner_join(Genomic_regions) %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  mutate(logp = -log10(P))\n\n# plot the results using the manhattan plot custom function we defined earlier\n\ne0_het_plot &lt;- build_manhattan_plot(e0_results) +\n  labs(title = \"Life expectancy\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 21), expand = c(0, 0))\n\nh_het_plot &lt;- build_manhattan_plot(h_results) +\n  labs(title = \"Lifespan equality\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 21), expand = c(0, 0))\n\ne0_het_plot + h_het_plot + plot_annotation(tag_levels = \"A\")\n\n\n\n\n\n\n\n\n\nFigure XX. Manhattan plot showing the -Log10 p-value for each genomic region’s effect on A) life expectancy and B) lifespan equality.\nPlot the univariate effect sizes for each of the regions associated with life expectancy / lifespan equality at the genome-wide significance threshold (p &lt; \\(0.05^{-8}\\)) after CPASSOC.\nLife expectancy\n\n\nShow the code\nSNP_heatmap_e0 &lt;-\n  SNP_beta_e0 %&gt;% \n  inner_join(\n    all_e0_meta_results %&gt;% \n      filter(meta_p_het &lt; 1e-08) %&gt;% \n      dplyr::select(SNP) %&gt;% \n      inner_join(Genomic_regions))\n\nrow_name &lt;- SNP_heatmap_e0$SNP\n\nSNP_heatmap_e0 &lt;- SNP_heatmap_e0 %&gt;% dplyr::select(-SNP) %&gt;% as.matrix()\n\nrownames(SNP_heatmap_e0) &lt;- row_name\n\nbreaksList &lt;- seq(-7, 7, by = 0.01)\n\nannotation_SNPs &lt;- \n  all_e0_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% dplyr::select(SNP) %&gt;% \n  mutate(Chromosome = case_when(str_detect(SNP, \"2L\") ~ \"2L\",\n                                str_detect(SNP, \"2R\") ~ \"2R\",\n                                str_detect(SNP, \"3L\") ~ \"3L\",\n                                str_detect(SNP, \"3R\") ~ \"3R\",\n                                str_detect(SNP, \"X\") ~ \"X\"))\n\nannotation_studies &lt;- \n  tibble(Study = c(\"Arya_f_25\",\n                   \"Huang_f_18\",\n                   \"Huang_f_25\",\n                   \"Huang_f_28\",\n                   \"Wilson_f_25_1\",\n                   \"Wilson_f_25_2\",\n                   \"Durham_f_25\",\n                   \"Patel_f_23\",\n                   \"Arya_m_25\",\n                   \"Huang_m_18\",\n                   \"Huang_m_25\",\n                   \"Huang_m_28\"),\n         Temperature = c(\"25\",\n                         \"18\",\n                         \"25\",\n                         \"28\",\n                         \"25\",\n                         \"25\",\n                         \"25\",\n                         \"23\",\n                         \"25\",\n                         \"18\",\n                         \"25\",\n                         \"28\")) %&gt;% \n  mutate(Sex = case_when(str_detect(Study, \"_f\") ~ \"Female\",\n                         .default = \"Male\"),\n         Mating = case_when(str_detect(Study, \"Arya\") ~ \"NO\",\n                             str_detect(Study, \"Huang\") ~ \"Throughout life\",\n                             str_detect(Study, \"Wilson\") ~ \"Early life\",\n                             str_detect(Study, \"Durham\") ~ \"Throughout life\",\n                             str_detect(Study, \"Patel\") ~ \"Early life\"),\n         Author = str_extract(Study, \".*(?=\\\\_)\"),\n         Author = str_remove(Author, \"_f\"),\n         Author = str_remove(Author, \"_m\"))\n\n\n# create a study annotation column, need this to be a data.frame rather than a tibble for some reason \n\nStudy_details &lt;- annotation_studies %&gt;%\n  as.data.frame() %&gt;% \n  dplyr::select(Study, Temperature, Mating)\n\nmy_categories &lt;- data.frame(row.names = Study_details[, 1], Temperature = Study_details[, 2],\n                            Mating = Study_details[, 3])\n\nmy_colors &lt;- list(Temperature = c(\"18\" = \"#7bbcd5\", # sailboat colours from pnw\n                                  \"23\" = \"#d0e2af\",\n                                  \"25\" = \"#f5db99\",\n                                  \"28\" = \"#e89c81\"),\n                  Mating = c(\"NO\" = \"#f8e3d1\", # Shuksan from pnw\n                             \"Early life\" = \"#d7b1c5\",\n                             \"Throughout life\" = \"#ac8eab\"),\n                  Chromosome = c(\"2L\" = \"#d8aedd\", # lake colours from pnw\n                                 \"2R\" = \"#cb74ad\",\n                                 \"3L\" = \"#11c2b5\",\n                                 \"3R\" = \"#72e1e1\",\n                                 \"X\" = \"#fbcc74\"))\n# create a SNP annotation column\n\nSNP_details &lt;- annotation_SNPs %&gt;%\n  as.data.frame()\n\nmy_SNP_categories &lt;- data.frame(row.names = SNP_details[, 1], Chromosome = SNP_details[, 2])\n\nmy_col_names &lt;- c(\"Arya et al females\", \"Huang et al females\", \"Huang et al females\",\n                  \"Huang et al females\", \"Wilson et al females 1\", \"Wilson et al females 2\", \"Durham et al females\",\n                  \"Patel et al females\", \"Arya et al males\", \"Huang et al males\", \"Huang et al males\",\n                  \"Huang et al males\")\n\n\npheatmap(SNP_heatmap_e0, breaks = breaksList, \n         main = \"\",\n         color = colorRampPalette(rev(met.brewer(\"Benedictus\", direction = 1)))(length(breaksList)),\n         legend = TRUE, cutree_rows = 6, cutree_cols = 5, \n         angle_col = 45, border_color = \"white\",\n         annotation_col = my_categories, annotation_colors = my_colors, annotation_row = my_SNP_categories,\n         fontsize = 8, labels_col = my_col_names)\n\n\n\n\n\n\n\n\n\nFigure SX. univariate effect sizes for each of the genomic regions associated with life expectancy at the genome-wide significance threshold (p &lt; \\(10^{-8}\\)) after CPASSOC. Effect sizes are expressed in days added to life expectancy per major allele copy. Studies are clustered by similiarity in genetic effects on the X axis, while genomic regions are clustered by similarity in effect size across studies on the Y axis.\nLifespan equality\n\n\nShow the code\nSNP_heatmap_h &lt;-\n  SNP_beta_h %&gt;% \n  inner_join(\n    all_h_meta_results %&gt;% \n      filter(meta_p_het &lt; 1e-08) %&gt;% \n      dplyr::select(SNP) %&gt;% \n      inner_join(Genomic_regions))\n\nrow_name &lt;- SNP_heatmap_h$SNP\nSNP_heatmap_h &lt;- SNP_heatmap_h %&gt;% dplyr::select(-SNP) %&gt;% as.matrix()\nrownames(SNP_heatmap_h) = row_name\n\nbreaksList &lt;- seq(-0.15, 0.15, by = 0.001)\n\nannotation_SNPs_h &lt;- \n  all_h_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% dplyr::select(SNP) %&gt;% \n  mutate(Chromosome = case_when(str_detect(SNP, \"2L\") ~ \"2L\",\n                                str_detect(SNP, \"2R\") ~ \"2R\",\n                                str_detect(SNP, \"3L\") ~ \"3L\",\n                                str_detect(SNP, \"3R\") ~ \"3R\",\n                                str_detect(SNP, \"X\") ~ \"X\"))\n\n\n# create a SNP annotation column\n\nSNP_details_h &lt;- annotation_SNPs_h %&gt;%\n  as.data.frame()\n\nmy_SNP_categories_h &lt;- data.frame(row.names = SNP_details_h[, 1], Chromosome = SNP_details_h[, 2])\n\npheatmap(SNP_heatmap_h, breaks = breaksList, \n         main = \"\",\n         color = colorRampPalette(rev(met.brewer(\"Benedictus\", direction = 1)))(length(breaksList)),\n         legend = TRUE, cutree_rows = 3, cutree_cols = 4, angle_col = 45, border_color = \"white\",\n         annotation_col = my_categories, annotation_colors = my_colors, \n         annotation_row = my_SNP_categories_h,\n         fontsize = 8, labels_col = my_col_names)\n\n\n\n\n\n\n\n\n\nFigure XX. univariate effect sizes for each of the genomic regions associated with lifespan equality at the genome-wide significance threshold (p &lt; \\(10^{-8}\\)) after CPASSOC. Effect sizes are expressed in equality added per major allele copy. Studies are clustered by similiarity in genetic effects on the X axis, while genomic regions are clustered by similarity in effect size across studies on the Y axis."
  },
  {
    "objectID": "GWAS.html#axes-of-ageing-rate-and-baseline-mortality",
    "href": "GWAS.html#axes-of-ageing-rate-and-baseline-mortality",
    "title": "Genome wide analyses",
    "section": "Axes of ageing rate and baseline mortality",
    "text": "Axes of ageing rate and baseline mortality\nWe’ve shown that orthogonal deviation from the regression of lifespan equality on life expectancy closely corresponds to the rate of ageing (\\(\\beta\\)) parameter in a Gompertz-Makeham mortality model. To identify regions of the genome associated with the rate of ageing, we can calculate a rate of ageing index for each line in each treatment. To create this index, we rotate the coordinate system of the life expectancy and lifespan equality plane by \\(\\theta\\) degrees, where \\(\\theta\\) is the angle between the positive x-axis and the regression of lifespan equality on life expectancy.\nFinding the slopes\n\n\nShow the code\n# create a dataframe with which mean regression lines can be predicted from each model. It spans 4 SDs in either direction.\n\n nd &lt;- \n  tibble(e0 = seq(from = 0, to = 180, length.out = 180))\n\n# fit the models\n\nArya_f_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Arya_2010_f, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Arya_f_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nArya_f_slope &lt;-\n  as_draws_df(Arya_f_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Arya_regression_line_f &lt;-\n   fitted(Arya_f_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nArya_m_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Arya_2010_m, chains = 4, cores = 4, file = \"data/Derived/Ageing_axis_slopes/Arya_m_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nArya_m_slope &lt;-\n  as_draws_df(Arya_m_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Arya_regression_line_m &lt;-\n   fitted(Arya_m_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nHuang_f_18_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Huang_2020_f_18, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Huang_f_18_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nHuang_f_18_slope &lt;-\n  as_draws_df(Huang_f_18_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Huang_f_18_regression_line &lt;-\n   fitted(Huang_f_18_model, newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nHuang_m_18_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Huang_2020_m_18, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Huang_m_18_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nHuang_m_18_slope &lt;-\n  as_draws_df(Huang_m_18_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Huang_m_18_regression_line &lt;-\n   fitted(Huang_m_18_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nHuang_f_25_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Huang_2020_f_25, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Huang_f_25_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nHuang_f_25_slope &lt;-\n  as_draws_df(Huang_f_25_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Huang_f_25_regression_line &lt;-\n   fitted(Huang_f_25_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nHuang_m_25_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Huang_2020_m_25, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Huang_m_25_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nHuang_m_25_slope &lt;-\n  as_draws_df(Huang_m_25_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Huang_m_25_regression_line &lt;-\n   fitted(Huang_m_25_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nHuang_f_28_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Huang_2020_f_28, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Huang_f_28_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nHuang_f_28_slope &lt;-\n  as_draws_df(Huang_f_28_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Huang_f_28_regression_line &lt;-\n   fitted(Huang_f_28_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nHuang_m_28_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Huang_2020_m_28, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Huang_m_28_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nHuang_m_28_slope &lt;-\n  as_draws_df(Huang_m_28_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Huang_m_28_regression_line &lt;-\n   fitted(Huang_m_28_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nWilson_f_model_1 &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Wilson_2020_f_1, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Wilson_f_slope_1\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nWilson_f_slope_1 &lt;-\n  as_draws_df(Wilson_f_model_1) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Wilson_f_regression_line_1 &lt;-\n   fitted(Wilson_f_model_1,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nWilson_f_model_2 &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Wilson_2020_f_2, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Wilson_f_slope_2\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nWilson_f_slope_2 &lt;-\n  as_draws_df(Wilson_f_model_2) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Wilson_f_regression_line_2 &lt;-\n   fitted(Wilson_f_model_2,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\nDurham_f_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Durham_2014_f, chains = 4, cores = 4, \n            file = \"data/Derived/Ageing_axis_slopes/Durham_f_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nDurham_f_slope &lt;-\n  as_draws_df(Durham_f_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n\n Durham_f_regression_line &lt;-\n   fitted(Durham_f_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\n\nPatel_f_model &lt;- brm(h ~ 1 + e0,\n            #prior = c(prior(normal(0, 0.1), class = Intercept),\n             #         prior(normal(0, 1), class = b),\n              #        prior(exponential(1), class = sigma)),\n            family = gaussian,\n            iter = 6000, warmup = 2000,\n            control = list(adapt_delta = 0.8, max_treedepth = 10),\n            data = Patel_2021_f, chains = 4, cores = 4, file = \"data/Derived/Ageing_axis_slopes/Patel_f_slope\",\n            backend = \"cmdstanr\", stan_model_args = list(stanc_options = list(\"O1\")),\n            refresh = 400, silent = 0, seed = 1)\n\nPatel_f_slope &lt;-\n  as_draws_df(Patel_f_model) %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(b_e0) %&gt;% \n  summarise(slope = mean(b_e0)) %&gt;% pull(slope)\n \n Patel_regression_line &lt;-\n   fitted(Patel_f_model,\n        newdata = nd) %&gt;% \n   data.frame() %&gt;% \n   bind_cols(nd) %&gt;% \n   dplyr::select(Estimate, e0)\n\n\nWith regression coefficients found, we use the following formula to calculate the angle (in radians) between the mean regression line and the x-axis:\n\\(\\theta = tan^{-1}(\\beta)\\)\nwhere \\(\\beta\\) is the point estimate of the slope from each model posterior distribution.\n\n\nShow the code\nArya_f_angle &lt;- atan(Arya_f_slope)\nArya_m_angle &lt;- atan(Arya_m_slope)\nHuang_f_18_angle &lt;- atan(Huang_f_18_slope)\nHuang_m_18_angle &lt;- atan(Huang_m_18_slope)\nHuang_f_25_angle &lt;- atan(Huang_f_25_slope)\nHuang_m_25_angle &lt;- atan(Huang_m_25_slope)\nHuang_f_28_angle &lt;- atan(Huang_f_28_slope)\nHuang_m_28_angle &lt;- atan(Huang_m_28_slope)\nWilson_f_1_angle &lt;- atan(Wilson_f_slope_1)\nWilson_f_2_angle &lt;- atan(Wilson_f_slope_2)\nDurham_f_angle &lt;- atan(Durham_f_slope)\nPatel_f_angle &lt;- atan(Patel_f_slope)\n\n\nWe then rotated the coordinate system of the life expectancy and lifespan equality plane clockwise by \\(\\theta\\):\n\\[x' = -(x\\cos(\\theta) + y\\sin(\\theta))\\]\n\\[y' = -(x\\sin(\\theta) - y\\cos(\\theta))\\]\nwhere \\(x'\\) and \\(y'\\) are the vectors of genotype means for baseline mortality rate and ageing rate, and \\(x\\) and \\(y\\) are vectors of genotype means for life expectancy and lifespan equality. We perform this transformation on the unscaled data.\n\n\nShow the code\nArya_2010_f &lt;-\n  Arya_2010_f %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Arya_f_angle) + h*sin(Arya_f_angle)),\n         ageing_axis = -1*(e0*sin(Arya_f_angle) - h*cos(Arya_f_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nArya_2010_m &lt;-\n  Arya_2010_m %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Arya_m_angle) + h*sin(Arya_m_angle)),\n         ageing_axis = -1*(e0*sin(Arya_m_angle) - h*cos(Arya_m_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nHuang_2020_f_18 &lt;-\n  Huang_2020_f_18 %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Huang_f_18_angle) + h*sin(Huang_f_18_angle)),\n         ageing_axis = -1*(e0*sin(Huang_f_18_angle) - h*cos(Huang_f_18_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nHuang_2020_m_18 &lt;-\n  Huang_2020_m_18 %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Huang_m_18_angle) + h*sin(Huang_m_18_angle)),\n         ageing_axis = -1*(e0*sin(Huang_m_18_angle) - h*cos(Huang_m_18_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nHuang_2020_f_25 &lt;-\n  Huang_2020_f_25 %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Huang_f_25_angle) + h*sin(Huang_f_25_angle)),\n         ageing_axis = -1*(e0*sin(Huang_f_25_angle) - h*cos(Huang_f_25_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nHuang_2020_m_25 &lt;-\n  Huang_2020_m_25 %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Huang_m_25_angle) + h*sin(Huang_m_25_angle)),\n         ageing_axis = -1*(e0*sin(Huang_m_25_angle) - h*cos(Huang_m_25_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nHuang_2020_f_28 &lt;-\n  Huang_2020_f_28 %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Huang_f_28_angle) + h*sin(Huang_f_28_angle)),\n         ageing_axis = -1*(e0*sin(Huang_f_28_angle) - h*cos(Huang_f_28_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nHuang_2020_m_28 &lt;-\n  Huang_2020_m_28 %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Huang_m_28_angle) + h*sin(Huang_m_28_angle)),\n         ageing_axis = -1*(e0*sin(Huang_m_28_angle) - h*cos(Huang_m_28_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nWilson_2020_f_1 &lt;-\n  Wilson_2020_f_1 %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Wilson_f_1_angle) + h*sin(Wilson_f_1_angle)),\n         ageing_axis = -1*(e0*sin(Wilson_f_1_angle) - h*cos(Wilson_f_1_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nWilson_2020_f_2 &lt;-\n  Wilson_2020_f_2 %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Wilson_f_2_angle) + h*sin(Wilson_f_2_angle)),\n         ageing_axis = -1*(e0*sin(Wilson_f_2_angle) - h*cos(Wilson_f_2_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nDurham_2014_f &lt;-\n  Durham_2014_f %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Durham_f_angle) + h*sin(Durham_f_angle)),\n         ageing_axis = -1*(e0*sin(Durham_f_angle) - h*cos(Durham_f_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\nPatel_2021_f &lt;- \n  Patel_2021_f %&gt;% \n    mutate(baseline_mortality_axis = -1*(e0*cos(Patel_f_angle) + h*sin(Patel_f_angle)),\n         ageing_axis = -1*(e0*sin(Patel_f_angle) - h*cos(Patel_f_angle)),\n         baseline_mortality_axis_centered = baseline_mortality_axis - mean(baseline_mortality_axis),\n         ageing_axis_centered = ageing_axis - mean(ageing_axis))\n\n\nFinally, simulate curves from for the Gompertz-Makeham distribution to show the correlation between the \\(\\alpha\\) and \\(\\beta\\) parametrs and our baseline mortality and ageing rate proxies.\n\n\nShow the code\n# script to draw h~e0 for different gompertz b\n# a sequence\na_seq &lt;- seq(-30,2,0.02)\n# b sequence\nb_seq &lt;- seq(-5,-0.5,0.5)\nb_seq &lt;- exp(b_seq)\n\ngomp_seq &lt;- data.frame(b=NULL,e0=NULL,h=NULL)\n\nage_seq &lt;- seq(0,10000,0.1)\n\nRun_sim &lt;- FALSE # change to TRUE to run the sim\n\nif(Run_sim){\n  \n  for(i in 1:length(b_seq)){\n    for (j in 1:length(a_seq)){\n      lx &lt;- exp(-exp(a_seq[j])/b_seq[i]*(exp(b_seq[i]*age_seq)-1))\n      lx &lt;- lx[lx!=0]\n      if(tail(lx,1)&lt;0.1){\n        e0_gomp &lt;- sum(lx)*0.1\n        disparity &lt;- -sum(lx*log(lx))*0.1\n        h_gomp &lt;- -log(disparity/e0_gomp)\n        \n      }\n      gomp_seq &lt;- rbind(gomp_seq,c(b_seq[i],e0_gomp,h_gomp))\n    }\n  }\n  write_csv(gomp_seq, \"data/Derived/gompertz_simulation.csv\")\n} else{\n  gomp_seq &lt;- read_csv(\"data/Derived/gompertz_simulation.csv\")}\n\nnames(gomp_seq) &lt;- c(\"b\",\"e0\",\"h\")\n\ngomp_seq$b &lt;- log(gomp_seq$b)\n\ngomp_seq$b &lt;- as.factor(gomp_seq$b)\n\n\nPlot the line means, coloured by their value on the ageing rate axis.\n\n\nShow the code\nrotated_axis_plot &lt;- function(data, regression_data, which_axis, fill_title, study_title, limit){\n  data %&gt;% \n    ggplot(aes(x = e0, y = h)) +\n    geom_line(data = gomp_seq,\n              aes(x = e0, y = h, group = b), alpha = 0.4, linetype = 2) +\n    geom_point(aes(fill = which_axis), shape = 21, size = 4) +\n    scale_fill_moma_c(\"Avedon\", direction = -1, limits = c(-1*limit, limit)) +\n    geom_smooth(data = regression_data,\n                aes(y = Estimate),\n                stat = \"identity\",\n                alpha = 1/2, linewidth = 1) +\n    scale_x_continuous(limits = c(5, 145), \n                       breaks = c(0, 30, 60, 90, 120), expand = c(0, 0)) +\n    scale_y_continuous(limits = c(0.1, 3.5), \n                       breaks = c(1, 2, 3), expand = c(0, 0)) +\n    labs(fill = fill_title,\n         x = \"Life expectancy\",\n         y = \"Lifespan equality\",\n         title = study_title) +\n    theme_bw() +\n    theme(plot.title = element_text(hjust = 0.5),\n          panel.grid = element_blank(),\n          axis.title.y = element_markdown(size = 12),\n          axis.title.x = element_markdown(size = 12),\n          axis.text.x = element_text(size = 10),\n          axis.text.y = element_text(size = 10))\n}\n\na &lt;- rotated_axis_plot(Arya_2010_f, Arya_regression_line_f, which_axis = Arya_2010_f$ageing_axis_centered, \n                 \"Ageing\\nrate\", \"Arya 25C females\", limit = 1.6)\n\na.1 &lt;- rotated_axis_plot(Arya_2010_f, Arya_regression_line_f, \n                        which_axis = Arya_2010_f$baseline_mortality_axis_centered, \n                        \"Baseline\\nmortality\", \"Arya 25C females\", limit = 60)\n\nb &lt;- rotated_axis_plot(Arya_2010_m, Arya_regression_line_m, which_axis = Arya_2010_m$ageing_axis_centered, \n                 \"Ageing\\nrate\", \"Arya 25C males\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(20, 80), ylim = c(0.7, 3.3))\n\nb.1 &lt;- rotated_axis_plot(Arya_2010_m, Arya_regression_line_m, \n                         which_axis = Arya_2010_m$baseline_mortality_axis_centered, \n                 \"Baseline\\nmortality\", \"Arya 25C males\", limit = 60) #+\n  #coord_cartesian(xlim = c(20, 80), ylim = c(0.7, 3.3))\n\nc &lt;- rotated_axis_plot(Huang_2020_f_18, Huang_f_18_regression_line, \n                       which_axis = Huang_2020_f_18$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Huang 18C females\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(20, 135), ylim = c(0.4, 2.5))\n\nc.1 &lt;- rotated_axis_plot(Huang_2020_f_18, Huang_f_18_regression_line, \n                       which_axis = Huang_2020_f_18$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Huang 18C females\", limit = 60) #+\n  #coord_cartesian(xlim = c(20, 135), ylim = c(0.4, 2.5))\n\nd &lt;- rotated_axis_plot(Huang_2020_m_18, Huang_m_18_regression_line, \n                       which_axis = Huang_2020_m_18$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Huang 18C males\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(30, 140), ylim = c(0.3, 2.5))\n\nd.1 &lt;- rotated_axis_plot(Huang_2020_m_18, Huang_m_18_regression_line, \n                       which_axis = Huang_2020_m_18$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Huang 18C males\", limit = 60) #+\n  #coord_cartesian(xlim = c(30, 140), ylim = c(0.3, 2.5))\n\ne &lt;- rotated_axis_plot(Huang_2020_f_25, Huang_f_25_regression_line, \n                       which_axis = Huang_2020_f_25$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Huang 25C females\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(10, 70), ylim = c(0.4, 3))\n\ne.1 &lt;- rotated_axis_plot(Huang_2020_f_25, Huang_f_25_regression_line, \n                       which_axis = Huang_2020_f_25$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Huang 25C females\", limit = 60) #+\n  #coord_cartesian(xlim = c(10, 70), ylim = c(0.4, 3))\n\nf &lt;- rotated_axis_plot(Huang_2020_m_25, Huang_m_25_regression_line, \n                       which_axis = Huang_2020_m_25$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Huang 25C males\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(15, 80), ylim = c(0.5, 2.5))\n\nf.1 &lt;- rotated_axis_plot(Huang_2020_m_25, Huang_m_25_regression_line, \n                       which_axis = Huang_2020_m_25$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Huang 25C males\", limit = 60) #+\n  #coord_cartesian(xlim = c(15, 80), ylim = c(0.5, 2.5))\n\ng &lt;- rotated_axis_plot(Huang_2020_f_28, Huang_f_28_regression_line, \n                       which_axis = Huang_2020_f_28$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Huang 28C females\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(5, 45), ylim = c(0.2, 3.1))\n\ng.1 &lt;- rotated_axis_plot(Huang_2020_f_28, Huang_f_28_regression_line, \n                       which_axis = Huang_2020_f_28$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Huang 28C females\", limit = 60) #+\n  #coord_cartesian(xlim = c(5, 45), ylim = c(0.2, 3.1))\n\nh &lt;- rotated_axis_plot(Huang_2020_m_28, Huang_m_28_regression_line, \n                       which_axis = Huang_2020_m_28$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Huang 28C males\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(5, 45), ylim = c(0.2, 3.1))\n\nh.1 &lt;- rotated_axis_plot(Huang_2020_m_28, Huang_m_28_regression_line, \n                       which_axis = Huang_2020_m_28$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Huang 28C males\", limit = 60) #+\n  #coord_cartesian(xlim = c(5, 45), ylim = c(0.2, 3.1))\n\ni &lt;- rotated_axis_plot(Wilson_2020_f_1, Wilson_f_regression_line_1, \n                       which_axis = Wilson_2020_f_1$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Wilson 25C females 1\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(15, 75), ylim = c(0.4, 2.5))\n\ni.1 &lt;- rotated_axis_plot(Wilson_2020_f_1, Wilson_f_regression_line_1, \n                       which_axis = Wilson_2020_f_1$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Wilson 25C females 1\", limit = 60) #+\n  #coord_cartesian(xlim = c(15, 75), ylim = c(0.4, 2.5))\n\nj &lt;- rotated_axis_plot(Wilson_2020_f_2, Wilson_f_regression_line_2, \n                       which_axis = Wilson_2020_f_2$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Wilson 25C females 2\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(5, 55), ylim = c(0.1, 2.5))\n\nj.1 &lt;- rotated_axis_plot(Wilson_2020_f_2, Wilson_f_regression_line_2, \n                       which_axis = Wilson_2020_f_2$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Wilson 25C females 2\", limit = 60) #+\n  #coord_cartesian(xlim = c(5, 55), ylim = c(0.1, 2.5))\n\nk &lt;- rotated_axis_plot(Durham_2014_f, Durham_f_regression_line, \n                       which_axis = Durham_2014_f$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Durham 25C females\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(15, 65), ylim = c(1.1, 2.3))\n\nk.1 &lt;- rotated_axis_plot(Durham_2014_f, Durham_f_regression_line, \n                       which_axis = Durham_2014_f$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Durham 25C females\", limit = 60) #+\n  #coord_cartesian(xlim = c(15, 65), ylim = c(1.1, 2.3))\n\nl &lt;- rotated_axis_plot(Patel_2021_f, Patel_regression_line, \n                       which_axis = Patel_2021_f$ageing_axis_centered,\n                      \"Ageing\\nrate\", \"Patel 23C females\", limit = 1.6) #+\n  #coord_cartesian(xlim = c(10, 75), ylim = c(0.1, 3.3))\n\nl.1 &lt;- rotated_axis_plot(Patel_2021_f, Patel_regression_line, \n                       which_axis = Patel_2021_f$baseline_mortality_axis_centered,\n                      \"Baseline\\nmortality\", \"Patel 23C females\", limit = 60) #+\n  #coord_cartesian(xlim = c(10, 75), ylim = c(0.1, 3.3))\n\n\n\n\nShow the code\n(a | b | c) / (d | e | f) / (g | h| i) / (j | k | l) + #guide_area()) +\n  plot_layout(guides = 'collect')\n\n\n\n\n\n\n\n\n\nFigure SX. Points show DGRP lines, shaded by their genotypic values for the rate of ageing. Dashed curves show simulation outcomes from a Gompertz-Makeham distribution: the rate of ageing differs between curves but is fixed within them, where the baseline mortality decreases as curves progress to the right. Note that colour shows the rate of ageing relative to the mean within the treatment.\n\n\nShow the code\n(a.1 | b.1 | c.1) / (d.1 | e.1 | f.1) / (g.1 | h.1| i.1) / (j.1 | k.1 | l.1) + #guide_area()) +\n  plot_layout(guides = 'collect')\n\n\n\n\n\n\n\n\n\nFigure SX. As per Figure SX, except colours indicate our proxy for the baseline rate of ageing."
  },
  {
    "objectID": "GWAS.html#run-univariate-gwas-1",
    "href": "GWAS.html#run-univariate-gwas-1",
    "title": "Genome wide analyses",
    "section": "Run univariate GWAS",
    "text": "Run univariate GWAS\nConduct GWAS and save the results.\n\n\nShow the code\nArya_f_ageing &lt;- prep_for_ageing_GWAS(Arya_2010_f)\nArya_m_ageing &lt;- prep_for_ageing_GWAS(Arya_2010_m)\nHuang_f_18_ageing &lt;- prep_for_ageing_GWAS(Huang_2020_f_18)\nHuang_m_18_ageing &lt;- prep_for_ageing_GWAS(Huang_2020_m_18)\nHuang_f_25_ageing &lt;- prep_for_ageing_GWAS(Huang_2020_f_25)\nHuang_m_25_ageing &lt;- prep_for_ageing_GWAS(Huang_2020_m_25)\nHuang_f_28_ageing &lt;- prep_for_ageing_GWAS(Huang_2020_f_28)\nHuang_m_28_ageing &lt;- prep_for_ageing_GWAS(Huang_2020_m_28)\nWilson_f_ageing_1 &lt;- prep_for_ageing_GWAS(Wilson_2020_f_1)\nWilson_f_ageing_2 &lt;- prep_for_ageing_GWAS(Wilson_2020_f_2)\nDurham_f_ageing &lt;- prep_for_ageing_GWAS(Durham_2014_f)\nPatel_f_ageing &lt;- prep_for_ageing_GWAS(Patel_2021_f)\n\nArya_f_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Arya_2010_f)\nArya_m_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Arya_2010_m)\nHuang_f_18_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Huang_2020_f_18)\nHuang_m_18_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Huang_2020_m_18)\nHuang_f_25_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Huang_2020_f_25)\nHuang_m_25_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Huang_2020_m_25)\nHuang_f_28_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Huang_2020_f_28)\nHuang_m_28_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Huang_2020_m_28)\nWilson_f_baseline_mortality_1 &lt;- prep_for_baseline_mortality_GWAS(Wilson_2020_f_1)\nWilson_f_baseline_mortality_2 &lt;- prep_for_baseline_mortality_GWAS(Wilson_2020_f_2)\nDurham_f_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Durham_2014_f)\nPatel_f_baseline_mortality &lt;- prep_for_baseline_mortality_GWAS(Patel_2021_f)\n\nif(!file.exists(\"data/Derived/GWAS_results/Arya_f_ageing.tsv.gz\")) {\nrun_GWAS(Arya_f_ageing)\nrun_GWAS(Arya_m_ageing)\nrun_GWAS(Huang_f_18_ageing)\nrun_GWAS(Huang_m_18_ageing)\nrun_GWAS(Huang_f_25_ageing)\nrun_GWAS(Huang_m_25_ageing)\nrun_GWAS(Huang_f_28_ageing)\nrun_GWAS(Huang_m_28_ageing)\nrun_GWAS(Wilson_f_ageing_1)\nrun_GWAS(Wilson_f_ageing_2)\nrun_GWAS(Durham_f_ageing)\nrun_GWAS(Patel_f_ageing)\n\nrun_GWAS(Arya_f_baseline_mortality)\nrun_GWAS(Arya_m_baseline_mortality)\nrun_GWAS(Huang_f_18_baseline_mortality)\nrun_GWAS(Huang_m_18_baseline_mortality)\nrun_GWAS(Huang_f_25_baseline_mortality)\nrun_GWAS(Huang_m_25_baseline_mortality)\nrun_GWAS(Huang_f_28_baseline_mortality)\nrun_GWAS(Huang_m_28_baseline_mortality)\nrun_GWAS(Wilson_f_baseline_mortality_1)\nrun_GWAS(Wilson_f_baseline_mortality_2)\nrun_GWAS(Durham_f_baseline_mortality)\nrun_GWAS(Patel_f_baseline_mortality)\n}\n\nArya_f_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_f_ageing.tsv.gz\") \nArya_m_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_m_ageing.tsv.gz\") \nHuang_f_18_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_18_ageing.tsv.gz\")\nHuang_m_18_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_18_ageing.tsv.gz\")\nHuang_f_25_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_25_ageing.tsv.gz\")\nHuang_m_25_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_25_ageing.tsv.gz\")\nHuang_f_28_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_28_ageing.tsv.gz\")\nHuang_m_28_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_28_ageing.tsv.gz\")\nWilson_f_ageing_1_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_ageing_1.tsv.gz\")\nWilson_f_ageing_2_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_ageing_2.tsv.gz\")\nDurham_f_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Durham_f_ageing.tsv.gz\")\nPatel_f_ageing_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Patel_f_ageing.tsv.gz\")\n\nArya_f_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_f_baseline_mortality.tsv.gz\") \nArya_m_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_m_baseline_mortality.tsv.gz\") \nHuang_f_18_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_18_baseline_mortality.tsv.gz\")\nHuang_m_18_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_18_baseline_mortality.tsv.gz\")\nHuang_f_25_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_25_baseline_mortality.tsv.gz\")\nHuang_m_25_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_25_baseline_mortality.tsv.gz\")\nHuang_f_28_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_28_baseline_mortality.tsv.gz\")\nHuang_m_28_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_28_baseline_mortality.tsv.gz\")\nWilson_f_baseline_mortality_1_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_baseline_mortality_1.tsv.gz\")\nWilson_f_baseline_mortality_2_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_baseline_mortality_2.tsv.gz\")\nDurham_f_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Durham_f_baseline_mortality.tsv.gz\")\nPatel_f_baseline_mortality_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Patel_f_baseline_mortality.tsv.gz\")\n\n\nTable SX. Genotype to phenotype associations detected by univariate GWAS, for the rate of ageing. The number of genomic regions indicates the number of genetic variants associated with the rate of ageing after LD pruning. The total row shows the number of unique candidate variants identified across all studies. *Wilson et al. phenotyped lifespan under two separate dietary conditions, which we include separately in our analysis.\n\n\nShow the code\n# filter down to sig associations\nageing_table &lt;-\n  bind_rows(\n    tibble(`p &lt; 1e-05 variants` = nrow(Arya_f_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Arya_f_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Arya_f_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Arya_f_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_18_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_18_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_18_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_18_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_25_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_25_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_25_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_25_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_28_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_28_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_28_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_28_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Wilson_f_ageing_1_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Wilson_f_ageing_1_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Wilson_f_ageing_1_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Wilson_f_ageing_1_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Wilson et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Wilson_f_ageing_2_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Wilson_f_ageing_2_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Wilson_f_ageing_2_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Wilson_f_ageing_2_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Wilson et al 2020*\",\n             Treatment = \"2\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Durham_f_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Durham_f_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Durham_f_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Durham_f_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Durham et al 2014\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Patel_f_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Patel_f_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Patel_f_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Patel_f_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Patel et al 2021\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"23\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Arya_m_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Arya_m_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Arya_m_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Arya_m_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_18_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_18_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_18_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_18_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_25_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_25_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_25_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_25_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_28_ageing_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_28_ageing_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_28_ageing_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_28_ageing_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n  ) \n\n# how many unique variants have been detected?\nageing_p_05_SNPs &lt;-\n  bind_rows(\n    \n    Arya_f_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Arya_m_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_18_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_25_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_28_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_18_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_25_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_28_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Wilson_f_ageing_1_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Wilson_f_ageing_2_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Durham_f_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Patel_f_ageing_GWAS %&gt;% \n      filter(P &lt; 1e-05)\n  ) %&gt;% \n  distinct(SNP) %&gt;% \n  left_join(Genomic_regions %&gt;% mutate(Pruned_variant = \"YES\")) \n\nageing_table %&gt;% \n  add_row(Study = \"Totals\",\n          Sex = \"\",\n          Temperature = \"\",\n          `p &lt; 1e-05 variants` = nrow(ageing_p_05_SNPs),\n          `p &lt; 1e-05 genomic regions` = nrow(ageing_p_05_SNPs %&gt;% filter(Pruned_variant == \"YES\")),\n          `p &lt; 1e-08 variants` = sum(ageing_table$`p &lt; 1e-08 variants`),\n          `p &lt; 1e-08 genomic regions` = sum(ageing_table$`p &lt; 1e-08 genomic regions`)) %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\n\n\n\nStudy\nSex\nTemperature\np &lt; 1e-05 variants\np &lt; 1e-05 genomic regions\np &lt; 1e-08 variants\np &lt; 1e-08 genomic regions\n\n\n\n\nArya et al 2010\nFemale\n25\n19\n1\n0\n0\n\n\nHuang et al 2020\nFemale\n18\n19\n3\n1\n0\n\n\nHuang et al 2020\nFemale\n25\n34\n8\n0\n0\n\n\nHuang et al 2020\nFemale\n28\n58\n6\n0\n0\n\n\nWilson et al 2020\nFemale\n25\n33\n7\n0\n0\n\n\nWilson et al 2020*\nFemale\n25\n30\n5\n0\n0\n\n\nDurham et al 2014\nFemale\n25\n25\n3\n0\n0\n\n\nPatel et al 2021\nFemale\n23\n12\n3\n0\n0\n\n\nArya et al 2010\nMale\n25\n6\n2\n0\n0\n\n\nHuang et al 2020\nMale\n18\n5\n1\n0\n0\n\n\nHuang et al 2020\nMale\n25\n53\n5\n0\n0\n\n\nHuang et al 2020\nMale\n28\n80\n6\n0\n0\n\n\nTotals\n\n\n351\n49\n1\n0\n\n\n\n\n\n\n\nTable SX. Genotype to phenotype associations detected by univariate GWAS, for baseline mortality rate. The number of genomic regions indicates the number of genetic variants associated with baseline mortality after LD pruning. The total row shows the number of unique candidate variants identified across all studies. *Wilson et al. phenotyped lifespan under two separate dietary conditions, which we include separately in our analysis.\n\n\nShow the code\n# filter down to sig associations\nscaling_table &lt;-\n  bind_rows(\n    tibble(`p &lt; 1e-05 variants` = nrow(Arya_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Arya_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Arya_f_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Arya_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_18_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_18_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_18_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_18_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_25_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_25_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_25_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_25_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_f_28_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_28_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_f_28_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_f_28_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Wilson_f_baseline_mortality_1_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Wilson_f_baseline_mortality_1_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Wilson_f_baseline_mortality_1_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Wilson_f_baseline_mortality_1_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Wilson et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Wilson_f_baseline_mortality_2_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Wilson_f_baseline_mortality_2_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Wilson_f_baseline_mortality_2_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Wilson_f_baseline_mortality_2_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Wilson et al 2020*\",\n             Treatment = \"2\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Durham_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Durham_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Durham_f_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Durham_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Durham et al 2014\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Patel_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Patel_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Patel_f_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Patel_f_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Patel et al 2021\",\n             Treatment = \"1\",\n             Sex = \"Female\",\n             Temperature = \"23\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Arya_m_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Arya_m_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Arya_m_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Arya_m_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_18_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_18_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_18_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_18_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_25_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_25_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_25_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_25_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(Huang_m_28_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_28_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(Huang_m_28_baseline_mortality_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Genomic_regions, \n                                                            Huang_m_28_baseline_mortality_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Huang et al 2020\",\n             Treatment = \"1\",\n             Sex = \"Male\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Sex, Temperature,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n  ) \n\n# how many unique variants have been detected?\nscaling_p_05_SNPs &lt;-\n  bind_rows(\n    \n    Arya_f_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Arya_m_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_18_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_25_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_f_28_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_18_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_25_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Huang_m_28_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Wilson_f_baseline_mortality_1_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Wilson_f_baseline_mortality_2_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Durham_f_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    Patel_f_baseline_mortality_GWAS %&gt;% \n      filter(P &lt; 1e-05)\n  ) %&gt;% \n  distinct(SNP) %&gt;% \n  left_join(Genomic_regions %&gt;% mutate(Pruned_variant = \"YES\")) \n\nscaling_table %&gt;% \n  add_row(Study = \"Totals\",\n          Sex = \"\",\n          Temperature = \"\",\n          `p &lt; 1e-05 variants` = nrow(scaling_p_05_SNPs),\n          `p &lt; 1e-05 genomic regions` = nrow(scaling_p_05_SNPs %&gt;% filter(Pruned_variant == \"YES\")),\n          `p &lt; 1e-08 variants` = sum(scaling_table$`p &lt; 1e-08 variants`),\n          `p &lt; 1e-08 genomic regions` = sum(scaling_table$`p &lt; 1e-08 genomic regions`)) %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\n\n\n\nStudy\nSex\nTemperature\np &lt; 1e-05 variants\np &lt; 1e-05 genomic regions\np &lt; 1e-08 variants\np &lt; 1e-08 genomic regions\n\n\n\n\nArya et al 2010\nFemale\n25\n29\n5\n0\n0\n\n\nHuang et al 2020\nFemale\n18\n14\n4\n0\n0\n\n\nHuang et al 2020\nFemale\n25\n43\n7\n0\n0\n\n\nHuang et al 2020\nFemale\n28\n35\n0\n0\n0\n\n\nWilson et al 2020\nFemale\n25\n22\n4\n0\n0\n\n\nWilson et al 2020*\nFemale\n25\n10\n1\n0\n0\n\n\nDurham et al 2014\nFemale\n25\n51\n5\n0\n0\n\n\nPatel et al 2021\nFemale\n23\n96\n4\n0\n0\n\n\nArya et al 2010\nMale\n25\n12\n5\n0\n0\n\n\nHuang et al 2020\nMale\n18\n26\n2\n0\n0\n\n\nHuang et al 2020\nMale\n25\n39\n2\n0\n0\n\n\nHuang et al 2020\nMale\n28\n22\n2\n0\n0\n\n\nTotals\n\n\n390\n39\n0\n0"
  },
  {
    "objectID": "GWAS.html#applying-cross-phenotype-meta-analysis-1",
    "href": "GWAS.html#applying-cross-phenotype-meta-analysis-1",
    "title": "Genome wide analyses",
    "section": "Applying cross-phenotype meta-analysis",
    "text": "Applying cross-phenotype meta-analysis\n\nGenerate the genetic correlation matrix\nUsing SNP effect sizes, we calculate the genetic correlations between a) rates of ageing and b) baseline mortality, measured in different environmental contexts.\n\n\nShow the code\n# use the BETA coefficients to build the SNP correlation matrix for the rate of ageing\n\nSNP_ageing_axis_data &lt;-\n  bind_rows(\n    Arya_f_ageing_GWAS %&gt;% \n      mutate(Study = \"Arya_2010\", Temperature = 25, Sex = \"Female\"),\n    \n    Arya_m_ageing_GWAS %&gt;% \n      mutate(Study = \"Arya_2010\", Temperature = 25, Sex = \"Male\"),\n    \n    Huang_f_18_ageing_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 18, Sex = \"Female\"),\n    \n    Huang_m_18_ageing_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 18, Sex = \"Male\"),\n    \n    Huang_f_25_ageing_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 25, Sex = \"Female\"),\n    \n    Huang_m_25_ageing_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 25, Sex = \"Male\"),\n    \n    Huang_f_28_ageing_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 28, Sex = \"Female\"),\n    \n    Huang_m_28_ageing_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 28, Sex = \"Male\"),\n    \n    Wilson_f_ageing_1_GWAS %&gt;% \n      mutate(Study = \"Wilson_2020_1\", Temperature = 25, Sex = \"Female\"),\n    \n    Wilson_f_ageing_2_GWAS %&gt;% \n      mutate(Study = \"Wilson_2020_2\", Temperature = 25, Sex = \"Female\"),\n    \n    Durham_f_ageing_GWAS %&gt;% \n      mutate(Study = \"Durham_2014\", Temperature = 25, Sex = \"Female\"),\n    \n    Patel_f_ageing_GWAS %&gt;% \n      mutate(Study = \"Patel_2021\", Temperature = 23, Sex = \"Female\")) %&gt;% \n  dplyr::select(SNP, BETA, Study, Temperature, Sex) %&gt;% \n  pivot_wider(values_from = BETA, names_from = c(Study, Temperature, Sex)) \n\nSNP_ageing_axis_LD_pruned &lt;- SNP_ageing_axis_data %&gt;% inner_join(Genomic_regions)\n\nSNP_ageing_axis_corr_matrix &lt;- cor(SNP_ageing_axis_LD_pruned %&gt;% dplyr::select(-SNP), use = \"pairwise.complete.obs\", method = \"spearman\")\n\n# use the BETA coefficients to build the SNP correlation matrix for scaling\n\nSNP_baseline_mortality_axis_data &lt;-\n bind_rows(\n    Arya_f_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Arya_2010\", Temperature = 25, Sex = \"Female\"),\n    \n    Arya_m_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Arya_2010\", Temperature = 25, Sex = \"Male\"),\n  \n    Huang_f_18_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 18, Sex = \"Female\"),\n    \n    Huang_m_18_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 18, Sex = \"Male\"),\n    \n    Huang_f_25_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 25, Sex = \"Female\"),\n    \n    Huang_m_25_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 25, Sex = \"Male\"),\n  \n    Huang_f_28_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 28, Sex = \"Female\"),\n    \n    Huang_m_28_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Huang_2020\", Temperature = 28, Sex = \"Male\"),\n    \n     Wilson_f_baseline_mortality_1_GWAS %&gt;% \n      mutate(Study = \"Wilson_2020_1\", Temperature = 25, Sex = \"Female\"),\n    \n    Wilson_f_baseline_mortality_2_GWAS %&gt;% \n      mutate(Study = \"Wilson_2020_2\", Temperature = 25, Sex = \"Female\"),\n    \n    Durham_f_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Durham\", Temperature = 25, Sex = \"Female\"),\n  \n    Patel_f_baseline_mortality_GWAS %&gt;% \n      mutate(Study = \"Patel\", Temperature = 23, Sex = \"Female\")) %&gt;% \n  dplyr::select(SNP, BETA, Study, Temperature, Sex) %&gt;% \n  pivot_wider(values_from = BETA, names_from = c(Study, Temperature, Sex))\n\nSNP_baseline_mortality_axis_LD_pruned &lt;- SNP_baseline_mortality_axis_data %&gt;% inner_join(Genomic_regions)\n\n\nSNP_baseline_mortality_axis_corr_matrix &lt;- cor(SNP_baseline_mortality_axis_LD_pruned %&gt;% dplyr::select(-SNP), use = \"pairwise.complete.obs\", method = \"spearman\")\n\n\n\n\nCalculate meta-analytic test statistics\nThe purpose of these meta-analyses is to detect SNPs associated with 1) the rate of ageing and 2) baseline mortality rate.\nRun CPASSOC for the rate of ageing\n\n\nShow the code\n# rate of ageing\n\nageing_axis_Arya_f_T &lt;- \n  Arya_f_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_f = T)\n    \nageing_axis_Arya_m_T &lt;- \n  Arya_m_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_m = T)\n\nageing_axis_Huang_f_18_T &lt;- \n  Huang_f_18_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_18 = T)\n  \nageing_axis_Huang_m_18_T &lt;- \n  Huang_m_18_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_18 = T)\n\nageing_axis_Huang_f_25_T &lt;- \n  Huang_f_25_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_25 = T)\n  \nageing_axis_Huang_m_25_T &lt;- \n  Huang_m_25_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_25 = T)\n\nageing_axis_Huang_f_28_T &lt;- \n  Huang_f_28_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_28 = T)\n  \nageing_axis_Huang_m_28_T &lt;- \n  Huang_m_28_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_28 = T)\n    \nageing_axis_Wilson_f_1_T &lt;- \n  Wilson_f_ageing_1_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Wilson_f_1 = T)\n\nageing_axis_Wilson_f_2_T &lt;- \n  Wilson_f_ageing_2_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Wilson_f_2 = T)\n\nageing_axis_Durham_f_T &lt;- \n  Durham_f_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Durham_f = T)\n\nageing_axis_Patel_f_T &lt;- \n  Patel_f_ageing_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Patel_f = T)\n    \n\nageing_axis_t_stats &lt;-\n  ageing_axis_Arya_f_T %&gt;%\n  inner_join(ageing_axis_Arya_m_T, by = \"SNP\") %&gt;%\n  inner_join(ageing_axis_Huang_f_18_T, by = \"SNP\") %&gt;% \n  inner_join(ageing_axis_Huang_m_18_T, by = \"SNP\") %&gt;% \n  inner_join(ageing_axis_Huang_f_25_T, by = \"SNP\") %&gt;% \n  inner_join(ageing_axis_Huang_m_25_T, by = \"SNP\") %&gt;% \n  inner_join(ageing_axis_Huang_f_28_T, by = \"SNP\") %&gt;% \n  inner_join(ageing_axis_Huang_m_28_T, by = \"SNP\") %&gt;% \n  inner_join(ageing_axis_Wilson_f_1_T, by = \"SNP\") %&gt;%\n  inner_join(ageing_axis_Wilson_f_2_T, by = \"SNP\") %&gt;%\n  inner_join(ageing_axis_Durham_f_T, by = \"SNP\") %&gt;%\n  inner_join(ageing_axis_Patel_f_T, by = \"SNP\") \n\nageing_axis_t_stat_values &lt;-\n  ageing_axis_t_stats %&gt;% \n  dplyr::select(2:13)\n\nSample_size_ageing_axis &lt;- c(165, 165, 183, 183, 186, 186, 177, 177, 161, 161, 176, 193)\n\nif(!file.exists(\"data/Derived/GWAS_results/ageing_axis_meta_results.csv\")) {\n\n# run the homogeneous effect meta-analysis\n\nS_hom &lt;- SHom(ageing_axis_t_stat_values, Sample_size_ageing_axis, SNP_ageing_axis_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary for different traits e.g. if a SNP has a sex or environment opposite effect on lifespan\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_ageing_axis, SNP_ageing_axis_corr_matrix);\n\nS_het &lt;- SHet(ageing_axis_t_stat_values, Sample_size_ageing_axis, SNP_ageing_axis_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n\nageing_axis_meta_results &lt;- \n  ageing_axis_t_stats %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) # add the unadjusted p values\n\nwrite_csv(ageing_axis_meta_results, \"data/Derived/GWAS_results/ageing_axis_meta_results.csv\")\n\n} else ageing_axis_meta_results &lt;- read_csv(\"data/Derived/GWAS_results/ageing_axis_meta_results.csv\")\n\n\nRun CPASSOC for the baseline rate of mortality\n\n\nShow the code\nbaseline_mortality_axis_Arya_f_T &lt;- \n  Arya_f_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_f = T)\n    \nbaseline_mortality_axis_Arya_m_T &lt;- \n  Arya_m_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_m = T)\n\nbaseline_mortality_axis_Huang_f_18_T &lt;- \n  Huang_f_18_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_18 = T)\n  \nbaseline_mortality_axis_Huang_m_18_T &lt;- \n  Huang_m_18_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_18 = T)\n\nbaseline_mortality_axis_Huang_f_25_T &lt;- \n  Huang_f_25_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_25 = T)\n  \nbaseline_mortality_axis_Huang_m_25_T &lt;- \n  Huang_m_25_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_25 = T)\n\nbaseline_mortality_axis_Huang_f_28_T &lt;- \n  Huang_f_28_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_28 = T)\n  \nbaseline_mortality_axis_Huang_m_28_T &lt;- \n  Huang_m_28_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_28 = T)\n    \nbaseline_mortality_axis_Wilson_f_1_T &lt;- \n  Wilson_f_baseline_mortality_1_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Wilson_f_1 = T)\n\nbaseline_mortality_axis_Wilson_f_2_T &lt;- \n  Wilson_f_baseline_mortality_2_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Wilson_f_2 = T)\n\nbaseline_mortality_axis_Durham_f_T &lt;- \n  Durham_f_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Durham_f = T)\n\nbaseline_mortality_axis_Patel_f_T &lt;- \n  Patel_f_baseline_mortality_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Patel_f = T)\n    \n\nbaseline_mortality_axis_t_stats &lt;-\n  baseline_mortality_axis_Arya_f_T %&gt;%\n  inner_join(baseline_mortality_axis_Arya_m_T, by = \"SNP\") %&gt;%\n  inner_join(baseline_mortality_axis_Huang_f_18_T, by = \"SNP\") %&gt;% \n  inner_join(baseline_mortality_axis_Huang_m_18_T, by = \"SNP\") %&gt;% \n  inner_join(baseline_mortality_axis_Huang_f_25_T, by = \"SNP\") %&gt;% \n  inner_join(baseline_mortality_axis_Huang_m_25_T, by = \"SNP\") %&gt;% \n  inner_join(baseline_mortality_axis_Huang_f_28_T, by = \"SNP\") %&gt;% \n  inner_join(baseline_mortality_axis_Huang_m_28_T, by = \"SNP\") %&gt;% \n  inner_join(baseline_mortality_axis_Wilson_f_1_T, by = \"SNP\") %&gt;%\n  inner_join(baseline_mortality_axis_Wilson_f_2_T, by = \"SNP\") %&gt;%\n  inner_join(baseline_mortality_axis_Durham_f_T, by = \"SNP\") %&gt;%\n  inner_join(baseline_mortality_axis_Patel_f_T, by = \"SNP\") \n\n\nbaseline_mortality_axis_t_stat_values &lt;-\n  baseline_mortality_axis_t_stats %&gt;% \n  dplyr::select(2:13)\n\nSample_size_baseline_mortality_axis &lt;- c(165, 165, 183, 183, 186, 186, 177, 177, 161, 161, 176, 193)\n\nif(!file.exists(\"data/Derived/GWAS_results/baseline_mortality_axis_meta_results.csv\")) {\n\n# run the homogeneous effect meta-analysis\n\nS_hom &lt;- SHom(baseline_mortality_axis_t_stat_values, Sample_size_baseline_mortality_axis, SNP_baseline_mortality_axis_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary for different traits (e.g. if a SNP has a sex or enviornment opposite effect on lifespan)\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_baseline_mortality_axis, SNP_baseline_mortality_axis_corr_matrix);\n\nS_het &lt;- SHet(baseline_mortality_axis_t_stat_values, Sample_size_baseline_mortality_axis, SNP_baseline_mortality_axis_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n\nbaseline_mortality_axis_meta_results &lt;- \n  baseline_mortality_axis_t_stats %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) # add the unadjusted p values\n\nwrite_csv(baseline_mortality_axis_meta_results, \"data/Derived/GWAS_results/baseline_mortality_axis_meta_results.csv\")\n\n} else baseline_mortality_axis_meta_results &lt;- read_csv(\"data/Derived/GWAS_results/baseline_mortality_axis_meta_results.csv\")"
  },
  {
    "objectID": "GWAS.html#visualise-the-results-1",
    "href": "GWAS.html#visualise-the-results-1",
    "title": "Genome wide analyses",
    "section": "Visualise the results",
    "text": "Visualise the results\nWe combine GWAS \\(T\\) statistics calculated for the rate of ageing and baseline mortality measured across different contexts. It’s possible that some SNPs have G x E interactions that lead to a heterogeneous effect across phenotypes. We therefore utilise the S_het calculated p-values.\nFirst lets show the effect of CPASSOC on the number of variants found to be associated with the rate of ageing and the scaling of mortality risk.\nTable SX. the number of variants associated with ageing rate and baseline mortality at various significance thresholds, estimated by univariate GWAS or CPASSOC. The number of genomic regions indicates the number of variants detected after LD pruning.\n\n\nShow the code\ntibble(Analysis = c(\"CPASSOC\", \"Univariate\", \"CPASSOC\", \"Univariate\"),\n       Trait = c(\"Ageing rate\", \"Ageing rate\", \"Scaling\", \"Scaling\"),\n       `p &lt; 1e-05 variants` = c(sum(ageing_axis_meta_results$meta_p_het &lt; 1e-05),\n                                nrow(ageing_p_05_SNPs),\n                                sum(baseline_mortality_axis_meta_results$meta_p_het &lt; 1e-05),\n                                nrow(scaling_p_05_SNPs)),\n       `p &lt; 1e-05 genomic regions` = c(nrow(ageing_axis_meta_results %&gt;%\n                                                 filter(meta_p_het &lt; 1e-05) %&gt;%\n                                                 inner_join(Genomic_regions)),\n                                          nrow(ageing_p_05_SNPs %&gt;% filter(Pruned_variant == \"YES\")),\n                                          nrow(baseline_mortality_axis_meta_results %&gt;%\n                                                 filter(meta_p_het &lt; 1e-05) %&gt;%\n                                                 inner_join(Genomic_regions)),\n                                          nrow(scaling_p_05_SNPs %&gt;% filter(Pruned_variant == \"YES\"))),\n       `p &lt; 1e-08 variants` = c(sum(ageing_axis_meta_results$meta_p_het &lt; 1e-08),\n                                sum(ageing_table$`p &lt; 1e-08 variants`),\n                                sum(baseline_mortality_axis_meta_results$meta_p_het &lt; 1e-08),\n                                sum(scaling_table$`p &lt; 1e-08 variants`)),\n       `p &lt; 1e-08 genomic regions` = c(nrow(ageing_axis_meta_results %&gt;% \n                                                 filter(meta_p_het &lt; 1e-08) %&gt;% \n                                                 inner_join(Genomic_regions)),\n                                          sum(ageing_table$`p &lt; 1e-08 genomic regions`),\n                                          nrow(baseline_mortality_axis_meta_results %&gt;%\n                                                 filter(meta_p_het &lt; 1e-08) %&gt;%\n                                                 inner_join(Genomic_regions)),\n                                          sum(scaling_table$`p &lt; 1e-08 genomic regions`)))  %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\n\n\n\nAnalysis\nTrait\np &lt; 1e-05 variants\np &lt; 1e-05 genomic regions\np &lt; 1e-08 variants\np &lt; 1e-08 genomic regions\n\n\n\n\nCPASSOC\nAgeing rate\n219\n118\n28\n21\n\n\nUnivariate\nAgeing rate\n351\n49\n1\n0\n\n\nCPASSOC\nScaling\n456\n243\n116\n54\n\n\nUnivariate\nScaling\n390\n39\n0\n0\n\n\n\n\n\n\n\nTable SX. genes that encompass or are very close to the genetic variants that have associations with the rate of ageing.\n\n\nShow the code\n# join gene annotations with the list of analysed variants \n# note that some SNPs are associated with &gt;1 gene, because the gene annotations overlap (I think) or the variant is close to multiple annotated genes. Others are not near any known genes, producing NAs.\n\nageing_rate_genes &lt;-\n  ageing_axis_meta_results %&gt;%\n  filter(meta_p_het &lt; 1e-08) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het) %&gt;%\n  left_join(annotations %&gt;% filter(distance.to.gene &lt;= 500)) %&gt;% \n  mutate(meta_p_het = signif(meta_p_het*10^9, 3)/10^9,\n         S_het = round(S_het, 3)) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het, FBID, gene_name, site.class, distance.to.gene)\n\nageing_rate_genes %&gt;% \n  my_data_table()\n\n\n\n\n\n\nTable SX. genes that encompass or are very close to the genetic variants that have associations with baseline mortality rate.\n\n\nShow the code\nscaling_genes &lt;-\n  baseline_mortality_axis_meta_results %&gt;% \n  filter(meta_p_het &lt; 1e-08) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het) %&gt;%\n  left_join(annotations %&gt;% filter(distance.to.gene &lt;= 500)) %&gt;% \n  mutate(meta_p_het = signif(meta_p_het*10^10, 3)/10^10,\n         S_het = round(S_het, 3)) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het, FBID, gene_name, site.class, distance.to.gene)\n\nscaling_genes %&gt;% \n  my_data_table()\n\n\n\n\n\n\nNow lets build some ‘Manhattan plots’ to show where these significant associations can be found:\n\n\nShow the code\nageing_axis_results &lt;- \n  ageing_axis_meta_results %&gt;% \n  inner_join(Genomic_regions) %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  mutate(logp = -log10(P))\n\nbaseline_mortality_axis_results &lt;- \n  baseline_mortality_axis_meta_results %&gt;% \n  inner_join(Genomic_regions) %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  mutate(logp = -log10(P))\n\n# plot the results using the manhattan plot custom function we defined earlier\n\nageing_axis_het_plot &lt;- \n  build_manhattan_plot(ageing_axis_results) +\n  labs(title = \"Ageing rate\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 19), expand = c(0, 0))\n\nbaseline_mortality_axis_het_plot &lt;- \n  build_manhattan_plot(baseline_mortality_axis_results) +\n  labs(title = \"Baseline mortality\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 19), expand = c(0, 0))\n\nbaseline_mortality_axis_het_plot + ageing_axis_het_plot  \n\n\n\n\n\n\n\n\n\nFigure XX. Manhattan plots showing the -Log10 p-value for each locus’ effect on baseline mortality and the rate of ageing.\nPlot the univariate effect sizes for each of the genomic regions associated with the rate of ageing at the genome-wide significance threshold (p &lt; \\(10^{-8}\\)) after CPASSOC.\n\n\nShow the code\nSNP_heatmap_ageing_axis &lt;-\n  SNP_ageing_axis_data %&gt;% \n  inner_join(\n    ageing_axis_meta_results %&gt;% \n      filter(meta_p_het &lt; 1e-08) %&gt;% \n      dplyr::select(SNP) %&gt;% \n      inner_join(Genomic_regions))\n\nrow_name &lt;- SNP_heatmap_ageing_axis$SNP\nSNP_heatmap_ageing_axis &lt;- SNP_heatmap_ageing_axis %&gt;% dplyr::select(-SNP) %&gt;% as.matrix()\nrownames(SNP_heatmap_ageing_axis) &lt;- row_name\n\nbreaksList &lt;- seq(-0.1, 0.1, by = 0.001)\n\nannotation_SNPs &lt;- \n  ageing_axis_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% dplyr::select(SNP) %&gt;% \n  mutate(Chromosome = case_when(str_detect(SNP, \"2L\") ~ \"2L\",\n                                str_detect(SNP, \"2R\") ~ \"2R\",\n                                str_detect(SNP, \"3L\") ~ \"3L\",\n                                str_detect(SNP, \"3R\") ~ \"3R\",\n                                str_detect(SNP, \"X\") ~ \"X\"))\n\nannotation_studies &lt;- \n  tibble(Study = c(\"Arya_2010_f_25\",\n                   \"Huang_2020_f_18\",\n                   \"Huang_2020_f_25\",\n                   \"Huang_2020_f_28\",\n                   \"Wilson_2020_f_25_1\",\n                   \"Wilson_2020_f_25_2\",\n                   \"Durham_2014_f_25\",\n                   \"Patel_2021_f_23\",\n                   \"Arya_2010_m_25\",\n                   \"Huang_2020_m_18\",\n                   \"Huang_2020_m_25\",\n                   \"Huang_2020_m_28\"),\n         Temperature = c(\"25\",\n                         \"18\",\n                         \"25\",\n                         \"28\",\n                         \"25\",\n                         \"25\",\n                         \"25\",\n                         \"23\",\n                         \"25\",\n                         \"18\",\n                         \"25\",\n                         \"28\")) %&gt;% \n  mutate(Sex = case_when(str_detect(Study, \"_f\") ~ \"Female\",\n                         .default = \"Male\"),\n         Mating = case_when(str_detect(Study, \"Arya\") ~ \"NO\",\n                             str_detect(Study, \"Huang\") ~ \"Throughout life\",\n                             str_detect(Study, \"Wilson\") ~ \"Early life\",\n                             str_detect(Study, \"Durham\") ~ \"Throughout life\",\n                             str_detect(Study, \"Patel\") ~ \"Early life\"),\n         Author = str_extract(Study, \".*(?=\\\\_)\"),\n         Author = str_remove(Author, \"_f\"),\n         Author = str_remove(Author, \"_m\"))\n\n\n# create a study annotation column, need this to be a data.frame rather than a tibble for some reason \n\nStudy_details &lt;- annotation_studies %&gt;%\n  as.data.frame() %&gt;% \n  dplyr::select(Study, Temperature, Mating)\n\nmy_categories &lt;- data.frame(row.names = Study_details[, 1], Temperature = Study_details[, 2],\n                            Mating = Study_details[, 3])\n\nmy_colors &lt;- list(Temperature = c(\"18\" = \"#7bbcd5\", # sailboat colours from pnw\n                                  \"23\" = \"#d0e2af\",\n                                  \"25\" = \"#f5db99\",\n                                  \"28\" = \"#e89c81\"),\n                  Mating = c(\"NO\" = \"#f8e3d1\", # Shuksan from pnw\n                             \"Early life\" = \"#d7b1c5\",\n                             \"Throughout life\" = \"#ac8eab\"),\n                  Chromosome = c(\"2L\" = \"#d8aedd\", # lake colours from pnw\n                                 \"2R\" = \"#cb74ad\",\n                                 \"3L\" = \"#11c2b5\",\n                                 \"3R\" = \"#72e1e1\",\n                                 \"X\" = \"#fbcc74\"))\n# create a SNP annotation column\n\nSNP_details &lt;- annotation_SNPs %&gt;%\n  as.data.frame()\n\nmy_SNP_categories &lt;- data.frame(row.names = SNP_details[, 1], Chromosome = SNP_details[, 2])\n\nmy_col_names &lt;- c(\"Arya et al females\", \"Huang et al females\", \"Huang et al females\",\n                  \"Huang et al females\", \"Wilson et al females 1\", \"Wilson et al females 2\", \"Durham et al females\",\n                  \"Patel et al females\", \"Arya et al males\", \"Huang et al males\", \"Huang et al males\",\n                  \"Huang et al males\")\n\n  pheatmap(SNP_heatmap_ageing_axis, breaks = breaksList, \n         main = \"\",\n         color = colorRampPalette(rev(met.brewer(\"Benedictus\", direction = 1)))(length(breaksList)),\n         legend = TRUE, cutree_rows = 6, cutree_cols = 5, \n         angle_col = 45, border_color = \"white\",\n         annotation_col = my_categories, annotation_colors = my_colors, annotation_row = my_SNP_categories,\n         fontsize = 8, labels_col = my_col_names)\n\n\n\n\n\n\n\n\n\nFigure XX. univariate effect sizes for each of the genomic regions associated with ageing rate at the genome-wide significance threshold (p &lt; \\(10^{-8}\\)) after CPASSOC. Studies are clustered by similiarity in genetic effects on the X axis, while genomic regions are clustered by similarity in effect size across studies on the Y axis. Positive effect sizes indicate that the minor allele increases ageing rate in the conditions the study was performed in.\nPlot the univariate effect sizes for each of the genomic regions associated with the scaling of mortality risk at the genome-wide significance threshold (p &lt; \\(0.05^{-8}\\)) after CPASSOC.\n\n\nShow the code\nSNP_heatmap_baseline_mortality_axis &lt;-\n  SNP_baseline_mortality_axis_data %&gt;% \n  inner_join(\n    baseline_mortality_axis_meta_results %&gt;% \n      filter(meta_p_het &lt; 1e-08) %&gt;% \n      dplyr::select(SNP) %&gt;% \n      inner_join(Genomic_regions))\n\nrow_name &lt;- SNP_heatmap_baseline_mortality_axis$SNP\nSNP_heatmap_baseline_mortality_axis &lt;- SNP_heatmap_baseline_mortality_axis %&gt;% dplyr::select(-SNP) %&gt;% as.matrix()\nrownames(SNP_heatmap_baseline_mortality_axis) &lt;- row_name\n\nbreaksList &lt;- seq(-7, 7, by = 0.01)\n\nannotation_SNPs &lt;- \n  baseline_mortality_axis_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% dplyr::select(SNP) %&gt;% \n  mutate(Chromosome = case_when(str_detect(SNP, \"2L\") ~ \"2L\",\n                                str_detect(SNP, \"2R\") ~ \"2R\",\n                                str_detect(SNP, \"3L\") ~ \"3L\",\n                                str_detect(SNP, \"3R\") ~ \"3R\",\n                                str_detect(SNP, \"X\") ~ \"X\"))\n\nannotation_studies &lt;- \n  tibble(Study = c(\"Arya_2010_f_25\",\n                   \"Huang_2020_f_18\",\n                   \"Huang_2020_f_25\",\n                   \"Huang_2020_f_28\",\n                   \"Wilson_2020_f_25_1\",\n                   \"Wilson_2020_f_25_2\",\n                   \"Durham_2014_f_25\",\n                   \"Patel_2021_f_23\",\n                   \"Arya_2010_m_25\",\n                   \"Huang_2020_m_18\",\n                   \"Huang_2020_m_25\",\n                   \"Huang_2020_m_28\"),\n         Temperature = c(\"25\",\n                         \"18\",\n                         \"25\",\n                         \"28\",\n                         \"25\",\n                         \"25\",\n                         \"25\",\n                         \"23\",\n                         \"25\",\n                         \"18\",\n                         \"25\",\n                         \"28\")) %&gt;% \n  mutate(Sex = case_when(str_detect(Study, \"_f\") ~ \"Female\",\n                         .default = \"Male\"),\n         Mating = case_when(str_detect(Study, \"Arya\") ~ \"NO\",\n                             str_detect(Study, \"Huang\") ~ \"Throughout life\",\n                             str_detect(Study, \"Wilson\") ~ \"Early life\",\n                             str_detect(Study, \"Durham\") ~ \"Throughout life\",\n                             str_detect(Study, \"Patel\") ~ \"Early life\"),\n         Author = str_extract(Study, \".*(?=\\\\_)\"),\n         Author = str_remove(Author, \"_f\"),\n         Author = str_remove(Author, \"_m\"))\n\n\n# create a study annotation column, need this to be a data.frame rather than a tibble for some reason \n\nStudy_details &lt;- annotation_studies %&gt;%\n  as.data.frame() %&gt;% \n  dplyr::select(Study, Temperature, Mating)\n\nmy_categories &lt;- data.frame(row.names = Study_details[, 1], Temperature = Study_details[, 2],\n                            Mating = Study_details[, 3])\n\nmy_colors &lt;- list(Temperature = c(\"18\" = \"#7bbcd5\", # sailboat colours from pnw\n                                  \"23\" = \"#d0e2af\",\n                                  \"25\" = \"#f5db99\",\n                                  \"28\" = \"#e89c81\"),\n                  Mating = c(\"NO\" = \"#f8e3d1\", # Shuksan from pnw\n                             \"Early life\" = \"#d7b1c5\",\n                             \"Throughout life\" = \"#ac8eab\"),\n                  Chromosome = c(\"2L\" = \"#d8aedd\", # lake colours from pnw\n                                 \"2R\" = \"#cb74ad\",\n                                 \"3L\" = \"#11c2b5\",\n                                 \"3R\" = \"#72e1e1\",\n                                 \"X\" = \"#fbcc74\"))\n# create a SNP annotation column\n\nSNP_details &lt;- annotation_SNPs %&gt;%\n  as.data.frame()\n\nmy_SNP_categories &lt;- data.frame(row.names = SNP_details[, 1], Chromosome = SNP_details[, 2])\n\nmy_col_names &lt;- c(\"Arya et al females\", \"Huang et al females\", \"Huang et al females\",\n                  \"Huang et al females\", \"Wilson et al females 1\", \"Wilson et al females 2\", \"Durham et al females\",\n                  \"Patel et al females\", \"Arya et al males\", \"Huang et al males\", \"Huang et al males\",\n                  \"Huang et al males\")\n\n\n  pheatmap(SNP_heatmap_baseline_mortality_axis, breaks = breaksList, \n         main = \"\",\n         color = colorRampPalette(rev(met.brewer(\"Benedictus\", direction = 1)))(length(breaksList)),\n         legend = TRUE, cutree_rows = 6, cutree_cols = 5, \n         angle_col = 45, border_color = \"white\",\n         annotation_col = my_categories, annotation_colors = my_colors, \n         annotation_row = my_SNP_categories,\n         fontsize = 8, labels_col = my_col_names)\n\n\n\n\n\n\n\n\n\nFigure XX. univariate effect sizes for each of the SNPs associated with mortality scaling at the genome-wide significance threshold (p &lt; \\(0.05^{-8}\\)) after CPASSOC. Effect sizes are expressed in standard deviations from the mean life expectancy found in each study. Studies are clustered by similiarity in SNP effects on the X axis, while SNPs are clustered by similarity in effect size across studies on the Y axis. Positive effect sizes indicate that the minor allele increases life expectancy in the conditions the study was performed in."
  },
  {
    "objectID": "quant_gen.html",
    "href": "quant_gen.html",
    "title": "Quantitative genetic parameters",
    "section": "",
    "text": "Broad-sense heritability can be estimated as\n\\[H^2 = \\frac{{\\sigma_G}^2}{{\\sigma_P}^2}\\] where \\({\\sigma_P}^2 = {\\sigma_G}^2 + {\\sigma_E}^2\\), and \\({\\sigma_G}^2\\) and \\({\\sigma_E}^2\\) are among and within line variances, respectively.\nTo estimate \\({\\sigma_E}^2\\), individual-level data are ideally required. For life expectancy, these data are readily available. However, given lifespan equality is estimated at the genotype (line) level, an alternative solution is needed. To approximate the within-line variance we instead estimate the variance across randomly selected groups of individuals that are nested within line.\nImportantly, residual variance estimated between these arbitrary groups will almost always be smaller than residual variance estimated between individuals. This method therefore systemically overestimates broad-sense heritability, but if applied to both life expectancy and lifespan equality, provides an indication as to whether one trait is more heritable than the other.\n\n\n\n\nShow the code\n# get conventional H^2 for lifespan\n\nif(!file.exists(\"data/Derived/heritability/conventional_e0.csv\")){\n# Arya females\n\nArya_2010_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Arya_2010_1_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nArya_2010_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Arya_2010_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  tibble(e0_heritability = Arya_2010_1_Female_H2_model$R[[1]],\n       SE = Arya_2010_1_Female_H2_model$se[1,],\n       Treatment = unique(Arya_2010_1_Female_raw$Treatment))\n\n# CVG \n\nArya_2010_f_summ &lt;- summary(Arya_2010_1_Female_H2_model$mod)\n\nCV_G &lt;- tibble(V_G = rnorm(4000, mean = 93.55, sd = 9.672),\n       mean_trait_value = rnorm(4000, mean = 57.080, sd = 0.776)) %&gt;% \n  mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n  dplyr::select(V_G, CV_G) %&gt;% \n  summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n  mutate(Treatment = unique(Arya_2010_1_Female_raw$Treatment))\n\n# Arya males\n\nArya_2010_1_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Arya_2010_1_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nArya_2010_1_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Arya_2010_1_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Arya_2010_1_Male_H2_model$R[[1]],\n       SE = Arya_2010_1_Male_H2_model$se[1,],\n       Treatment = unique(Arya_2010_1_Male_raw$Treatment))\n  )\n\n#CVG \n\nArya_2010_m_summ &lt;- summary(Arya_2010_1_Male_H2_model$mod)\n\nCV_G &lt;- CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 98.29, sd = 9.914),\n       mean_trait_value = rnorm(4000, mean = 52.9947, sd = 0.7926)) %&gt;% \n  mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n    dplyr::select(V_G, CV_G) %&gt;% \n  summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n  mutate(Treatment = unique(Arya_2010_1_Male_raw$Treatment))\n)\n\n# Huang 18C females\n\nHuang_2020_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_1_Female\")  #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_1_Female_H2_model$R[[1]],\n       SE = Huang_2020_1_Female_H2_model$se[1,],\n       Treatment = unique(Huang_2020_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_1_Female_summ &lt;- summary(Huang_2020_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 423.5, sd = 20.58),\n                            mean_trait_value = rnorm(4000, mean = 79.143, sd = 1.543)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_1_Female_raw$Treatment))\n  )\n\n# Huang 18C males\n\nHuang_2020_1_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_1_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_1_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_1_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_1_Male_H2_model$R[[1]],\n       SE = Huang_2020_1_Male_H2_model$se[1,],\n       Treatment = unique(Huang_2020_1_Male_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_1_Male_summ &lt;- summary(Huang_2020_1_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 461.2, sd = 21.48),\n                            mean_trait_value = rnorm(4000, mean = 86.37, sd = 1.61)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_1_Male_raw$Treatment))\n  )\n\n# Huang 25C females\n\nHuang_2020_2_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_2_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_2_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_2_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_2_Female_H2_model$R[[1]],\n       SE = Huang_2020_2_Female_H2_model$se[1,],\n       Treatment = unique(Huang_2020_2_Female_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_2_Female_summ &lt;- summary(Huang_2020_2_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 90.46, sd = 9.511),\n                            mean_trait_value = rnorm(4000, mean = 42.7445, sd = 0.7069)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_2_Female_raw$Treatment))\n  )\n\n\n# Huang 25C males\n\nHuang_2020_2_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_2_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_2_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_2_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_2_Male_H2_model$R[[1]],\n       SE = Huang_2020_2_Male_H2_model$se[1,],\n       Treatment = unique(Huang_2020_2_Male_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_2_Male_summ &lt;- summary(Huang_2020_2_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 105.3, sd = 10.26),\n                            mean_trait_value = rnorm(4000, mean = 45.2978, sd = 0.7611)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_2_Male_raw$Treatment))\n  )\n\n\n# Huang 28C females\n\nHuang_2020_3_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_3_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_3_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_3_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_3_Female_H2_model$R[[1]],\n       SE = Huang_2020_3_Female_H2_model$se[1,],\n       Treatment = unique(Huang_2020_3_Female_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_3_Female_summ &lt;- summary(Huang_2020_3_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 41.47, sd = 6.440),\n                            mean_trait_value = rnorm(4000, mean = 28.207, sd = 0.492)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_3_Female_raw$Treatment))\n  )\n\n# Huang 28C males\n\nHuang_2020_3_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_3_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_3_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_3_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_3_Male_H2_model$R[[1]],\n       SE = Huang_2020_3_Male_H2_model$se[1,],\n       Treatment = unique(Huang_2020_3_Male_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_3_Male_summ &lt;- summary(Huang_2020_3_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 43.91, sd = 6.627),\n                            mean_trait_value = rnorm(4000, mean = 27.8709, sd = 0.5054)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_3_Male_raw$Treatment))\n  )\n\n# Wilson females 1\n\nWilson_2020_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Wilson_2020_1_Female\")\n\nWilson_2020_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Wilson_2020_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Wilson_2020_1_Female_H2_model$R[[1]],\n       SE = Wilson_2020_1_Female_H2_model$se[1,],\n       Treatment = unique(Wilson_2020_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nWilson_2020_1_Female_summ &lt;- summary(Wilson_2020_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 97.04, sd = 9.851),\n                            mean_trait_value = rnorm(4000, mean = 40.5357, sd = 0.7809)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Wilson_2020_1_Female_raw$Treatment))\n  )\n\n# Wilson females 2\n\nWilson_2020_2_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Wilson_2020_2_Female\")\n\nWilson_2020_2_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Wilson_2020_2_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Wilson_2020_2_Female_H2_model$R[[1]],\n       SE = Wilson_2020_2_Female_H2_model$se[1,],\n       Treatment = unique(Wilson_2020_2_Female_raw$Treatment))\n  )\n\n#CVG\n\nWilson_2020_2_Female_summ &lt;- summary(Wilson_2020_2_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 69.82, sd = 8.356),\n                            mean_trait_value = rnorm(4000, mean = 32.2761, sd = 0.6621)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Wilson_2020_2_Female_raw$Treatment))\n  )\n\n# Durham females\n\nDurham_2014_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Durham_2014_1_Female\")\n\nDurham_2014_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Durham_2014_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Durham_2014_1_Female_H2_model$R[[1]],\n       SE = Durham_2014_1_Female_H2_model$se[1,],\n       Treatment = unique(Durham_2014_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nDurham_2014_1_Female_summ &lt;- summary(Durham_2014_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 76.95, sd = 8.772),\n                            mean_trait_value = rnorm(4000, mean = 36.1214, sd = 0.6892)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Durham_2014_1_Female_raw$Treatment))\n  )\n\n# Patel females\n\nPatel_2021_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Patel_2021_1_Female\")\n\nPatel_2021_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Patel_2021_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Patel_2021_1_Female_H2_model$R[[1]],\n       SE = Patel_2021_1_Female_H2_model$se[1,],\n       Treatment = unique(Patel_2021_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nPatel_2021_1_Female_summ &lt;- summary(Patel_2021_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 145.1, sd = 12.05),\n                            mean_trait_value = rnorm(4000, mean = 33.0666, sd = 0.8901)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Patel_2021_1_Female_raw$Treatment))\n  )\n\n# Dick 1 females\n\nDick_2011_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_1_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_1_Female_H2_model$R[[1]],\n       SE = Dick_2011_1_Female_H2_model$se[1,],\n       Treatment = unique(Dick_2011_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_1_Female_summ &lt;- summary(Dick_2011_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 34.08, sd = 5.837),\n                            mean_trait_value = rnorm(4000, mean = 29.854, sd = 1.019)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_1_Female_raw$Treatment))\n  )\n\n# Dick 1 males\n\nDick_2011_1_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_1_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_1_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_1_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_1_Male_H2_model$R[[1]],\n       SE = Dick_2011_1_Male_H2_model$se[1,],\n       Treatment = unique(Dick_2011_1_Male_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_1_Male_summ &lt;- summary(Dick_2011_1_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 41.15, sd = 6.415),\n                            mean_trait_value = rnorm(4000, mean = 27.834, sd = 1.113)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_1_Male_raw$Treatment))\n  )\n\n# Dick 2 females\n\nDick_2011_2_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_2_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_2_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_2_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_2_Female_H2_model$R[[1]],\n       SE = Dick_2011_2_Female_H2_model$se[1,],\n       Treatment = unique(Dick_2011_2_Female_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_2_Female_summ &lt;- summary(Dick_2011_2_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 26.47, sd = 5.145),\n                            mean_trait_value = rnorm(4000, mean = 23.1871, sd = 0.8972)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_2_Female_raw$Treatment))\n  )\n\n# Dick 2 males\n\nDick_2011_2_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_2_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_2_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_2_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_2_Male_H2_model$R[[1]],\n       SE = Dick_2011_2_Male_H2_model$se[1,],\n       Treatment = unique(Dick_2011_2_Male_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_2_Male_summ &lt;- summary(Dick_2011_2_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 23.33, sd = 4.831),\n                            mean_trait_value = rnorm(4000, mean = 19.9551, sd = 0.8401)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_2_Male_raw$Treatment))\n  )\n\n# Dick 3 females\n\nDick_2011_3_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_3_Female\")  #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_3_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_3_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_3_Female_H2_model$R[[1]],\n       SE = Dick_2011_3_Female_H2_model$se[1,],\n       Treatment = unique(Dick_2011_3_Female_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_3_Female_summ &lt;- summary(Dick_2011_3_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rexp(4000, rate = 1/5.039), # note the use of rexp instead of rnorm to avoid neg variance values\n                            mean_trait_value = rnorm(4000, mean = 30.4241, sd = 0.8665)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_3_Female_raw$Treatment))\n  )\n\n# Dick 3 males\n\nDick_2011_3_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_3_Male\")  #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_3_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_3_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_3_Male_H2_model$R[[1]],\n       SE = Dick_2011_3_Male_H2_model$se[1,],\n       Treatment = unique(Dick_2011_3_Male_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_3_Male_summ &lt;- summary(Dick_2011_3_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 40.45, sd = 6.360),\n                            mean_trait_value = rnorm(4000, mean = 27.75, sd = 2.15)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_3_Male_raw$Treatment))\n  )\n\n# Hoffman 1 females\n\nHoffman_2021_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Hoffman_2021_1_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHoffman_2021_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Hoffman_2021_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Hoffman_2021_1_Female_H2_model$R[[1]],\n       SE = Hoffman_2021_1_Female_H2_model$se[1,],\n       Treatment = unique(Hoffman_2021_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nHoffman_2021_1_Female_summ &lt;- summary(Hoffman_2021_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 162.1, sd = 12.73),\n                            mean_trait_value = rnorm(4000, mean = 53.241, sd = 3.208)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Hoffman_2021_1_Female_raw$Treatment))\n  )\n\n# Hoffman 1 males\n\nHoffman_2021_1_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Hoffman_2021_1_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHoffman_2021_1_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Hoffman_2021_1_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Hoffman_2021_1_Male_H2_model$R[[1]],\n       SE = Hoffman_2021_1_Male_H2_model$se[1,],\n       Treatment = unique(Hoffman_2021_1_Male_raw$Treatment))\n  )\n\n#CVG\n\nHoffman_2021_1_Male_summ &lt;- summary(Hoffman_2021_1_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 195.8, sd = 13.99),\n                            mean_trait_value = rnorm(4000, mean = 52.761, sd = 3.516)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Hoffman_2021_1_Male_raw$Treatment))\n  )\n\n# Hoffman 2 females\n\nHoffman_2021_2_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Hoffman_2021_2_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHoffman_2021_2_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Hoffman_2021_2_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Hoffman_2021_2_Female_H2_model$R[[1]],\n       SE = Hoffman_2021_2_Female_H2_model$se[1,],\n       Treatment = unique(Hoffman_2021_2_Female_raw$Treatment))\n  )\n\n#CVG\n\nHoffman_2021_2_Female_summ &lt;- summary(Hoffman_2021_2_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 223.9, sd = 14.96),\n                            mean_trait_value = rnorm(4000, mean = 55.492, sd = 4.333)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Hoffman_2021_2_Female_raw$Treatment))\n  )\n\n# Hoffman 2 males\n\nHoffman_2021_2_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Hoffman_2021_2_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHoffman_2021_2_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Hoffman_2021_2_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Hoffman_2021_2_Male_H2_model$R[[1]],\n       SE = Hoffman_2021_2_Male_H2_model$se[1,],\n       Treatment = unique(Hoffman_2021_2_Male_raw$Treatment))\n  )\n\n#CVG\n\nHoffman_2021_2_Male_summ &lt;- summary(Hoffman_2021_2_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 233.8, sd = 15.29),\n                            mean_trait_value = rnorm(4000, mean = 59.240, sd = 4.428)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Hoffman_2021_2_Male_raw$Treatment))\n  )\n\n# Zhao 1 females\n\nZhao_2022_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Zhao_2022_1_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nZhao_2022_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Zhao_2022_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Zhao_2022_1_Female_H2_model$R[[1]],\n       SE = Zhao_2022_1_Female_H2_model$se[1,],\n       Treatment = unique(Zhao_2022_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nZhao_2022_1_Female_summ &lt;- summary(Zhao_2022_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 200.51, sd = 14.160),\n                            mean_trait_value = rnorm(4000, mean = 58.362, sd = 3.172)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Zhao_2022_1_Female_raw$Treatment))\n  )\n\nwrite_csv(conventional_H2, \"data/Derived/heritability/conventional_e0.csv\")\nwrite_csv(CV_G, \"data/Derived/heritability/conventional_CVG.csv\")\n} else {\n  conventional_H2 &lt;- read_delim(\"data/Derived/heritability/conventional_e0.csv\")\n  CV_G &lt;- read_delim(\"data/Derived/heritability/conventional_CVG.csv\")}\n\n\n\n\n\n\n\n\n\nShow the code\n# within lines, randomly assign individuals into groups of n individuals. Each time this function is run, a different arrangement is created. This allows us to bootstrap.\n\nget_boots &lt;- function(data, \n                      num_obs_in_group, # set the no. of observations per group - used to build a survival curve\n                      run_num){\n  observed &lt;-\n    data %&gt;% \n    group_by(line) %&gt;% \n    slice_sample(prop = 1) %&gt;% # reshuffle the row order within a line - this is the randomising step\n    ungroup() %&gt;%\n    group_by(line, group = (row_number()-1) %/% num_obs_in_group) %&gt;% # create groups of specified size\n    filter(!n()&lt;num_obs_in_group) %&gt;% # remove the final group if it has fewer individuals\n    ungroup() %&gt;% \n    dplyr::select(line, Lifespan, group) %&gt;% \n    mutate(boot = run_num) %&gt;% \n    unite(group_boot, group:boot, sep = \"_\", remove = F)\n  \n  observed   \n}\n\n# build a function to estimate the ageing metrics \n\nget_ageing_metrics &lt;- function(subset, # group of flies to analyse - we map through all groups produced by get_boots\n                               age_step){ # age_step is the step distance in days for the survival curve\n  \n  Group_data &lt;- new_data %&gt;% filter(group_boot == subset) \n  \n  #Fit survival models to compute lx\n  mod &lt;- survfit(Surv(Lifespan)~1,data=Group_data)\n  \n  #Compute Lx with model prediction\n  age &lt;- seq(0,max(Group_data$Lifespan), age_step)\n  lx &lt;- summary(mod,time=age)$surv\n  \n  age &lt;- age[lx!=0]\n  lx &lt;- lx[lx!=0]\n  \n  #life expectancy calculation\n  e0 &lt;- sum(lx)*age_step\n  \n  #lifespan equality calculation\n  disparity &lt;- -sum(lx*log(lx))*age_step\n  h &lt;- -log(disparity/e0)\n  \n  bind_cols(Group_data %&gt;% distinct(line, group, boot),\n            tibble(e0 = e0,\n                   h = h))\n}\n\n# build a function to run rpt models\n\nget_quasi_heritability &lt;- function(num_boot, ageing_data){ \n  \n  rptr_model_e0 &lt;-\n    rpt(e0 ~ (1|line),  \n        grname = c(\"line\"),  \n        data = ageing_data %&gt;% filter(boot == num_boot), \n        datatype = \"Gaussian\", nboot = 0, npermut = 0) # no bootstrapping needed because we already do so above\n  \n  rptr_model_h &lt;-\n    rpt(h ~ (1|line),  \n        grname = c(\"line\"),  \n        data = ageing_data %&gt;% filter(h != Inf & boot == num_boot), \n        datatype = \"Gaussian\", nboot = 0, npermut = 0)\n  \n  tibble(e0_heritability = pull(rptr_model_e0$R),\n         h_heritability = pull(rptr_model_h$R),\n         draw = num_boot) \n}\n\n# combine the functions \n\nestimate_heritability &lt;- function(){\n  \n}\n\n\n\n\n\n\n\nShow the code\nif(!file.exists(\"data/quasi_h_3.csv\")){ \n  \n  # Arya females\n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Female\"), # specify the treatment\n        num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_f &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Arya males\n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Male\"), # specify the treatment\n        num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_m &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  \n  # Huang 18C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n    }\n  \n  # Huang 18C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 25C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n    # Wilson 1\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n     # Wilson 2\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Durham\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Durham_2014_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Durham_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Patel\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Patel_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Patel_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n        # Dick 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Hoffman 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n            # Hoffman 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  } \n  \n            # Hoffman 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n              # Hoffman 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Zhao female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Zhao_2022_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Zhao_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  quasi_h_3 &lt;-\n    bind_rows(\n      quasi_heritability_Arya_f %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_f\"),\n      quasi_heritability_Arya_m %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_m\"),\n      quasi_heritability_Huang_1_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_f\"),\n      quasi_heritability_Huang_1_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_m\"),\n      quasi_heritability_Huang_2_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_f\"),\n      quasi_heritability_Huang_2_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_m\"),\n      quasi_heritability_Huang_3_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_f\"),\n      quasi_heritability_Huang_3_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_m\"),\n      quasi_heritability_Wilson_1_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_1_f\"),\n      quasi_heritability_Wilson_2_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_2_f\"),\n      quasi_heritability_Durham_f %&gt;% mutate(treatment = \"quasi_heritability_Durham_f\"),\n      quasi_heritability_Patel_f %&gt;% mutate(treatment = \"quasi_heritability_Patel_f\"),\n      quasi_heritability_Dick_1_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_f\"),\n      quasi_heritability_Dick_1_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_m\"),\n      quasi_heritability_Dick_2_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_f\"),\n      quasi_heritability_Dick_2_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_m\"),\n      quasi_heritability_Dick_3_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_f\"),\n      quasi_heritability_Dick_3_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_m\"),\n      quasi_heritability_Hoffman_1_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_f\"),\n      quasi_heritability_Hoffman_1_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_m\"),\n      quasi_heritability_Hoffman_2_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_f\"),\n      quasi_heritability_Hoffman_2_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_m\"),\n      quasi_heritability_Zhao_f %&gt;% mutate(treatment = \"quasi_heritability_Zhao_f\"),\n    )\n  \n  write_csv(quasi_h_3, \"data/quasi_h_3.csv\")\n} else quasi_h_3 &lt;- read_delim(\"data/quasi_h_3.csv\")\n\nif(!file.exists(\"data/quasi_h_4.csv\")){ \n  \n  # Arya females\n  \n  {\n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Female\"), # specify the treatment\n        num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_f &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  }\n  \n  # Arya males\n  \n  {\n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Male\"), # specify the treatment\n        num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_m &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n    }\n  \n  # Huang 18C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n    }\n  \n  # Huang 18C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 28C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 28C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n      # Wilson 1\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n     # Wilson 2\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Durham\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Durham_2014_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Durham_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Patel\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Patel_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Patel_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n        # Dick 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Hoffman 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n            # Hoffman 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  } \n  \n            # Hoffman 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n              # Hoffman 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Zhao female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Zhao_2022_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Zhao_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  quasi_h_4 &lt;-\n    bind_rows(\n      quasi_heritability_Arya_f %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_f\"),\n      quasi_heritability_Arya_m %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_m\"),\n      quasi_heritability_Huang_1_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_f\"),\n      quasi_heritability_Huang_1_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_m\"),\n      quasi_heritability_Huang_2_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_f\"),\n      quasi_heritability_Huang_2_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_m\"),\n      quasi_heritability_Huang_3_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_f\"),\n      quasi_heritability_Huang_3_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_m\"),\n      quasi_heritability_Wilson_1_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_1_f\"),\n      quasi_heritability_Wilson_2_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_2_f\"),\n      quasi_heritability_Durham_f %&gt;% mutate(treatment = \"quasi_heritability_Durham_f\"),\n      quasi_heritability_Patel_f %&gt;% mutate(treatment = \"quasi_heritability_Patel_f\"),\n      quasi_heritability_Dick_1_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_f\"),\n      quasi_heritability_Dick_1_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_m\"),\n      quasi_heritability_Dick_2_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_f\"),\n      quasi_heritability_Dick_2_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_m\"),\n      quasi_heritability_Dick_3_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_f\"),\n      quasi_heritability_Dick_3_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_m\"),\n      quasi_heritability_Hoffman_1_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_f\"),\n      quasi_heritability_Hoffman_1_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_m\"),\n      quasi_heritability_Hoffman_2_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_f\"),\n      quasi_heritability_Hoffman_2_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_m\"),\n      quasi_heritability_Zhao_f %&gt;% mutate(treatment = \"quasi_heritability_Zhao_f\"),\n    )\n\n  write_csv(quasi_h_4, \"data/quasi_h_4.csv\")\n} else quasi_h_4 &lt;- read_delim(\"data/quasi_h_4.csv\")\n\nif(!file.exists(\"data/quasi_h_5.csv\")){ \n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Female\"), # specify the treatment\n        num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_f &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Arya males\n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Male\"), # specify the treatment\n        num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_m &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Huang 18C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n    }\n  \n  # Huang 18C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 25C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Wilson 1\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n     # Wilson 2\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Durham\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Durham_2014_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Durham_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Patel\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Patel_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Patel_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n        # Dick 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Hoffman 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n            # Hoffman 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  } \n  \n            # Hoffman 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n              # Hoffman 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Zhao female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Zhao_2022_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Zhao_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  quasi_h_5 &lt;-\n    bind_rows(\n      quasi_heritability_Arya_f %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_f\"),\n      quasi_heritability_Arya_m %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_m\"),\n      quasi_heritability_Huang_1_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_f\"),\n      quasi_heritability_Huang_1_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_m\"),\n      quasi_heritability_Huang_2_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_f\"),\n      quasi_heritability_Huang_2_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_m\"),\n      quasi_heritability_Huang_3_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_f\"),\n      quasi_heritability_Huang_3_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_m\"),\n      quasi_heritability_Wilson_1_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_1_f\"),\n      quasi_heritability_Wilson_2_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_2_f\"),\n      quasi_heritability_Durham_f %&gt;% mutate(treatment = \"quasi_heritability_Durham_f\"),\n      quasi_heritability_Patel_f %&gt;% mutate(treatment = \"quasi_heritability_Patel_f\"),\n      quasi_heritability_Dick_1_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_f\"),\n      quasi_heritability_Dick_1_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_m\"),\n      quasi_heritability_Dick_2_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_f\"),\n      quasi_heritability_Dick_2_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_m\"),\n      quasi_heritability_Dick_3_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_f\"),\n      quasi_heritability_Dick_3_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_m\"),\n      quasi_heritability_Hoffman_1_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_f\"),\n      quasi_heritability_Hoffman_1_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_m\"),\n      quasi_heritability_Hoffman_2_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_f\"),\n      quasi_heritability_Hoffman_2_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_m\"),\n      quasi_heritability_Zhao_f %&gt;% mutate(treatment = \"quasi_heritability_Zhao_f\"),\n    )\n\n  write_csv(quasi_h_5, \"data/quasi_h_5.csv\")\n} else quasi_h_5 &lt;- read_delim(\"data/quasi_h_5.csv\")\n\nif(!file.exists(\"data/quasi_h_6.csv\")){ \n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Female\"), # specify the treatment\n        num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_f &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Arya males\n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Male\"), # specify the treatment\n        num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_m &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Huang 18C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n    }\n  \n  # Huang 18C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 25C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n         # Wilson 1\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n     # Wilson 2\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Durham\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Durham_2014_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Durham_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Patel\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Patel_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Patel_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n        # Dick 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Hoffman 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n            # Hoffman 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  } \n  \n            # Hoffman 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n              # Hoffman 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Zhao female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Zhao_2022_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Zhao_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  quasi_h_6 &lt;-\n    bind_rows(\n      quasi_heritability_Arya_f %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_f\"),\n      quasi_heritability_Arya_m %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_m\"),\n      quasi_heritability_Huang_1_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_f\"),\n      quasi_heritability_Huang_1_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_m\"),\n      quasi_heritability_Huang_2_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_f\"),\n      quasi_heritability_Huang_2_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_m\"),\n      quasi_heritability_Huang_3_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_f\"),\n      quasi_heritability_Huang_3_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_m\"),\n      quasi_heritability_Wilson_1_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_1_f\"),\n      quasi_heritability_Wilson_2_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_2_f\"),\n      quasi_heritability_Durham_f %&gt;% mutate(treatment = \"quasi_heritability_Durham_f\"),\n      quasi_heritability_Patel_f %&gt;% mutate(treatment = \"quasi_heritability_Patel_f\"),\n      quasi_heritability_Dick_1_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_f\"),\n      quasi_heritability_Dick_1_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_m\"),\n      quasi_heritability_Dick_2_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_f\"),\n      quasi_heritability_Dick_2_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_m\"),\n      quasi_heritability_Dick_3_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_f\"),\n      quasi_heritability_Dick_3_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_m\"),\n      quasi_heritability_Hoffman_1_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_f\"),\n      quasi_heritability_Hoffman_1_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_m\"),\n      quasi_heritability_Hoffman_2_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_f\"),\n      quasi_heritability_Hoffman_2_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_m\"),\n      quasi_heritability_Zhao_f %&gt;% mutate(treatment = \"quasi_heritability_Zhao_f\"),\n    )\n  \n  write_csv(quasi_h_6, \"data/quasi_h_6.csv\")\n} else quasi_h_6 &lt;- read_delim(\"data/quasi_h_6.csv\")\n\n\n\n\nShow the code\nqh_plot_data &lt;-\n  bind_rows(\n    quasi_h_3 %&gt;% \n      mutate(sample = 3),\n    \n    quasi_h_4 %&gt;% \n      mutate(sample = 4),\n    \n    quasi_h_5 %&gt;% \n      mutate(sample = 5),\n    \n    quasi_h_6 %&gt;% \n      mutate(sample = 6)) %&gt;% \n  rename(`Life expectancy`= e0_heritability, `Lifespan equality` = h_heritability) %&gt;% \n  pivot_longer(cols = `Life expectancy`:`Lifespan equality`,\n               names_to = \"Trait\", values_to = \"Quasi-heritability\") %&gt;% \n  mutate(treatment = case_when(treatment == \"quasi_heritability_Arya_1_f\" ~ \"Arya 25C females\",\n                               treatment == \"quasi_heritability_Arya_1_m\" ~ \"Arya 25C males\",\n                               treatment == \"quasi_heritability_Huang_1_f\" ~ \"Huang 18C females\",\n                               treatment == \"quasi_heritability_Huang_1_m\" ~ \"Huang 18C males\",\n                               treatment == \"quasi_heritability_Huang_2_f\" ~ \"Huang 25C females\",\n                               treatment == \"quasi_heritability_Huang_2_m\" ~ \"Huang 25C males\",\n                               treatment == \"quasi_heritability_Huang_3_f\" ~ \"Huang 28C females\",\n                               treatment == \"quasi_heritability_Huang_3_m\" ~ \"Huang 28C males\"))  \n\n  qh_plot_data %&gt;% \n  ggplot(aes(x = sample, y= `Quasi-heritability`, group = Trait)) +\n  stat_interval(data = qh_plot_data %&gt;% filter(Trait == \"Life expectancy\"),\n                .width = c(0.05, 0.66, 0.95), \n                height = 1, show.legend = F) +\n  rcartocolor::scale_color_carto_d(palette = \"Teal\") +\n  new_scale_colour() +\n  stat_interval(data = qh_plot_data %&gt;% filter(Trait == \"Lifespan equality\"),\n                .width = c(0.05, 0.66, 0.95), \n                height = 1, show.legend = F) +\n  rcartocolor::scale_color_carto_d(palette = \"OrYel\") +\n  labs(x = \"Sample size of groups within lines\") +\n  facet_wrap(~treatment) +\n  theme_bw() + \n  theme(strip.background = element_rect(fill = \"aliceblue\"),\n        panel.grid.minor = element_blank(),\n        text = element_text(size=14),\n        axis.text.y = element_text(size = 8),\n        axis.title.x = element_markdown())\n\n\n\n\n\n\nTable SX. Broad-sense heritability for life expectancy, calculated using an intraclass correlation coefficient approach. Reported H^2 indicates the estimate reported in the original study. *Heritabilty was calculated across the sexes, producing a single estimate.\n\n\nShow the code\nconventional_H2 %&gt;% \n  left_join(\ntibble(Treatment = conventional_H2$Treatment,\n       `Reported H2` = c(\"0.43*\", \"0.43*\", 0.39, 0.39, 0.4, 0.44, 0.35, 0.37, \"Not reported\", \"Not reported\", 0.294,\n                         \"Not reported\", \"Not reported\", \"Not reported\", \"Not reported\", \"Not reported\",\n                         \"Not reported\", \"Not reported\", \"Not reported\", \"Not reported\", \"Not reported\",\n                         \"Not reported\", \"Not reported\"))\n) %&gt;% \n  pander(split.cell = 40, split.table = Inf)"
  },
  {
    "objectID": "quant_gen.html#conventional-heritability-for-life-expectancy",
    "href": "quant_gen.html#conventional-heritability-for-life-expectancy",
    "title": "Quantitative genetic parameters",
    "section": "",
    "text": "Show the code\n# get conventional H^2 for lifespan\n\nif(!file.exists(\"data/Derived/heritability/conventional_e0.csv\")){\n# Arya females\n\nArya_2010_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Arya_2010_1_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nArya_2010_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Arya_2010_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  tibble(e0_heritability = Arya_2010_1_Female_H2_model$R[[1]],\n       SE = Arya_2010_1_Female_H2_model$se[1,],\n       Treatment = unique(Arya_2010_1_Female_raw$Treatment))\n\n# CVG \n\nArya_2010_f_summ &lt;- summary(Arya_2010_1_Female_H2_model$mod)\n\nCV_G &lt;- tibble(V_G = rnorm(4000, mean = 93.55, sd = 9.672),\n       mean_trait_value = rnorm(4000, mean = 57.080, sd = 0.776)) %&gt;% \n  mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n  dplyr::select(V_G, CV_G) %&gt;% \n  summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n  mutate(Treatment = unique(Arya_2010_1_Female_raw$Treatment))\n\n# Arya males\n\nArya_2010_1_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Arya_2010_1_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nArya_2010_1_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Arya_2010_1_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Arya_2010_1_Male_H2_model$R[[1]],\n       SE = Arya_2010_1_Male_H2_model$se[1,],\n       Treatment = unique(Arya_2010_1_Male_raw$Treatment))\n  )\n\n#CVG \n\nArya_2010_m_summ &lt;- summary(Arya_2010_1_Male_H2_model$mod)\n\nCV_G &lt;- CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 98.29, sd = 9.914),\n       mean_trait_value = rnorm(4000, mean = 52.9947, sd = 0.7926)) %&gt;% \n  mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n    dplyr::select(V_G, CV_G) %&gt;% \n  summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n  mutate(Treatment = unique(Arya_2010_1_Male_raw$Treatment))\n)\n\n# Huang 18C females\n\nHuang_2020_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_1_Female\")  #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_1_Female_H2_model$R[[1]],\n       SE = Huang_2020_1_Female_H2_model$se[1,],\n       Treatment = unique(Huang_2020_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_1_Female_summ &lt;- summary(Huang_2020_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 423.5, sd = 20.58),\n                            mean_trait_value = rnorm(4000, mean = 79.143, sd = 1.543)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_1_Female_raw$Treatment))\n  )\n\n# Huang 18C males\n\nHuang_2020_1_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_1_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_1_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_1_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_1_Male_H2_model$R[[1]],\n       SE = Huang_2020_1_Male_H2_model$se[1,],\n       Treatment = unique(Huang_2020_1_Male_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_1_Male_summ &lt;- summary(Huang_2020_1_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 461.2, sd = 21.48),\n                            mean_trait_value = rnorm(4000, mean = 86.37, sd = 1.61)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_1_Male_raw$Treatment))\n  )\n\n# Huang 25C females\n\nHuang_2020_2_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_2_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_2_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_2_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_2_Female_H2_model$R[[1]],\n       SE = Huang_2020_2_Female_H2_model$se[1,],\n       Treatment = unique(Huang_2020_2_Female_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_2_Female_summ &lt;- summary(Huang_2020_2_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 90.46, sd = 9.511),\n                            mean_trait_value = rnorm(4000, mean = 42.7445, sd = 0.7069)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_2_Female_raw$Treatment))\n  )\n\n\n# Huang 25C males\n\nHuang_2020_2_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_2_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_2_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_2_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_2_Male_H2_model$R[[1]],\n       SE = Huang_2020_2_Male_H2_model$se[1,],\n       Treatment = unique(Huang_2020_2_Male_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_2_Male_summ &lt;- summary(Huang_2020_2_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 105.3, sd = 10.26),\n                            mean_trait_value = rnorm(4000, mean = 45.2978, sd = 0.7611)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_2_Male_raw$Treatment))\n  )\n\n\n# Huang 28C females\n\nHuang_2020_3_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_3_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_3_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_3_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_3_Female_H2_model$R[[1]],\n       SE = Huang_2020_3_Female_H2_model$se[1,],\n       Treatment = unique(Huang_2020_3_Female_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_3_Female_summ &lt;- summary(Huang_2020_3_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 41.47, sd = 6.440),\n                            mean_trait_value = rnorm(4000, mean = 28.207, sd = 0.492)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_3_Female_raw$Treatment))\n  )\n\n# Huang 28C males\n\nHuang_2020_3_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Huang_2020_3_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHuang_2020_3_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Huang_2020_3_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Huang_2020_3_Male_H2_model$R[[1]],\n       SE = Huang_2020_3_Male_H2_model$se[1,],\n       Treatment = unique(Huang_2020_3_Male_raw$Treatment))\n  )\n\n#CVG\n\nHuang_2020_3_Male_summ &lt;- summary(Huang_2020_3_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 43.91, sd = 6.627),\n                            mean_trait_value = rnorm(4000, mean = 27.8709, sd = 0.5054)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Huang_2020_3_Male_raw$Treatment))\n  )\n\n# Wilson females 1\n\nWilson_2020_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Wilson_2020_1_Female\")\n\nWilson_2020_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Wilson_2020_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Wilson_2020_1_Female_H2_model$R[[1]],\n       SE = Wilson_2020_1_Female_H2_model$se[1,],\n       Treatment = unique(Wilson_2020_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nWilson_2020_1_Female_summ &lt;- summary(Wilson_2020_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 97.04, sd = 9.851),\n                            mean_trait_value = rnorm(4000, mean = 40.5357, sd = 0.7809)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Wilson_2020_1_Female_raw$Treatment))\n  )\n\n# Wilson females 2\n\nWilson_2020_2_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Wilson_2020_2_Female\")\n\nWilson_2020_2_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Wilson_2020_2_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Wilson_2020_2_Female_H2_model$R[[1]],\n       SE = Wilson_2020_2_Female_H2_model$se[1,],\n       Treatment = unique(Wilson_2020_2_Female_raw$Treatment))\n  )\n\n#CVG\n\nWilson_2020_2_Female_summ &lt;- summary(Wilson_2020_2_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 69.82, sd = 8.356),\n                            mean_trait_value = rnorm(4000, mean = 32.2761, sd = 0.6621)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Wilson_2020_2_Female_raw$Treatment))\n  )\n\n# Durham females\n\nDurham_2014_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Durham_2014_1_Female\")\n\nDurham_2014_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Durham_2014_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Durham_2014_1_Female_H2_model$R[[1]],\n       SE = Durham_2014_1_Female_H2_model$se[1,],\n       Treatment = unique(Durham_2014_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nDurham_2014_1_Female_summ &lt;- summary(Durham_2014_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 76.95, sd = 8.772),\n                            mean_trait_value = rnorm(4000, mean = 36.1214, sd = 0.6892)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Durham_2014_1_Female_raw$Treatment))\n  )\n\n# Patel females\n\nPatel_2021_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Patel_2021_1_Female\")\n\nPatel_2021_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Patel_2021_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Patel_2021_1_Female_H2_model$R[[1]],\n       SE = Patel_2021_1_Female_H2_model$se[1,],\n       Treatment = unique(Patel_2021_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nPatel_2021_1_Female_summ &lt;- summary(Patel_2021_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 145.1, sd = 12.05),\n                            mean_trait_value = rnorm(4000, mean = 33.0666, sd = 0.8901)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Patel_2021_1_Female_raw$Treatment))\n  )\n\n# Dick 1 females\n\nDick_2011_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_1_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_1_Female_H2_model$R[[1]],\n       SE = Dick_2011_1_Female_H2_model$se[1,],\n       Treatment = unique(Dick_2011_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_1_Female_summ &lt;- summary(Dick_2011_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 34.08, sd = 5.837),\n                            mean_trait_value = rnorm(4000, mean = 29.854, sd = 1.019)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_1_Female_raw$Treatment))\n  )\n\n# Dick 1 males\n\nDick_2011_1_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_1_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_1_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_1_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_1_Male_H2_model$R[[1]],\n       SE = Dick_2011_1_Male_H2_model$se[1,],\n       Treatment = unique(Dick_2011_1_Male_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_1_Male_summ &lt;- summary(Dick_2011_1_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 41.15, sd = 6.415),\n                            mean_trait_value = rnorm(4000, mean = 27.834, sd = 1.113)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_1_Male_raw$Treatment))\n  )\n\n# Dick 2 females\n\nDick_2011_2_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_2_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_2_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_2_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_2_Female_H2_model$R[[1]],\n       SE = Dick_2011_2_Female_H2_model$se[1,],\n       Treatment = unique(Dick_2011_2_Female_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_2_Female_summ &lt;- summary(Dick_2011_2_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 26.47, sd = 5.145),\n                            mean_trait_value = rnorm(4000, mean = 23.1871, sd = 0.8972)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_2_Female_raw$Treatment))\n  )\n\n# Dick 2 males\n\nDick_2011_2_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_2_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_2_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_2_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_2_Male_H2_model$R[[1]],\n       SE = Dick_2011_2_Male_H2_model$se[1,],\n       Treatment = unique(Dick_2011_2_Male_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_2_Male_summ &lt;- summary(Dick_2011_2_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 23.33, sd = 4.831),\n                            mean_trait_value = rnorm(4000, mean = 19.9551, sd = 0.8401)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_2_Male_raw$Treatment))\n  )\n\n# Dick 3 females\n\nDick_2011_3_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_3_Female\")  #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_3_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_3_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_3_Female_H2_model$R[[1]],\n       SE = Dick_2011_3_Female_H2_model$se[1,],\n       Treatment = unique(Dick_2011_3_Female_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_3_Female_summ &lt;- summary(Dick_2011_3_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rexp(4000, rate = 1/5.039), # note the use of rexp instead of rnorm to avoid neg variance values\n                            mean_trait_value = rnorm(4000, mean = 30.4241, sd = 0.8665)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_3_Female_raw$Treatment))\n  )\n\n# Dick 3 males\n\nDick_2011_3_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Dick_2011_3_Male\")  #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nDick_2011_3_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Dick_2011_3_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Dick_2011_3_Male_H2_model$R[[1]],\n       SE = Dick_2011_3_Male_H2_model$se[1,],\n       Treatment = unique(Dick_2011_3_Male_raw$Treatment))\n  )\n\n#CVG\n\nDick_2011_3_Male_summ &lt;- summary(Dick_2011_3_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 40.45, sd = 6.360),\n                            mean_trait_value = rnorm(4000, mean = 27.75, sd = 2.15)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Dick_2011_3_Male_raw$Treatment))\n  )\n\n# Hoffman 1 females\n\nHoffman_2021_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Hoffman_2021_1_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHoffman_2021_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Hoffman_2021_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Hoffman_2021_1_Female_H2_model$R[[1]],\n       SE = Hoffman_2021_1_Female_H2_model$se[1,],\n       Treatment = unique(Hoffman_2021_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nHoffman_2021_1_Female_summ &lt;- summary(Hoffman_2021_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 162.1, sd = 12.73),\n                            mean_trait_value = rnorm(4000, mean = 53.241, sd = 3.208)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Hoffman_2021_1_Female_raw$Treatment))\n  )\n\n# Hoffman 1 males\n\nHoffman_2021_1_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Hoffman_2021_1_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHoffman_2021_1_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Hoffman_2021_1_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Hoffman_2021_1_Male_H2_model$R[[1]],\n       SE = Hoffman_2021_1_Male_H2_model$se[1,],\n       Treatment = unique(Hoffman_2021_1_Male_raw$Treatment))\n  )\n\n#CVG\n\nHoffman_2021_1_Male_summ &lt;- summary(Hoffman_2021_1_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 195.8, sd = 13.99),\n                            mean_trait_value = rnorm(4000, mean = 52.761, sd = 3.516)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Hoffman_2021_1_Male_raw$Treatment))\n  )\n\n# Hoffman 2 females\n\nHoffman_2021_2_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Hoffman_2021_2_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHoffman_2021_2_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Hoffman_2021_2_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Hoffman_2021_2_Female_H2_model$R[[1]],\n       SE = Hoffman_2021_2_Female_H2_model$se[1,],\n       Treatment = unique(Hoffman_2021_2_Female_raw$Treatment))\n  )\n\n#CVG\n\nHoffman_2021_2_Female_summ &lt;- summary(Hoffman_2021_2_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 223.9, sd = 14.96),\n                            mean_trait_value = rnorm(4000, mean = 55.492, sd = 4.333)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Hoffman_2021_2_Female_raw$Treatment))\n  )\n\n# Hoffman 2 males\n\nHoffman_2021_2_Male_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Hoffman_2021_2_Male\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nHoffman_2021_2_Male_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Hoffman_2021_2_Male_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Hoffman_2021_2_Male_H2_model$R[[1]],\n       SE = Hoffman_2021_2_Male_H2_model$se[1,],\n       Treatment = unique(Hoffman_2021_2_Male_raw$Treatment))\n  )\n\n#CVG\n\nHoffman_2021_2_Male_summ &lt;- summary(Hoffman_2021_2_Male_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 233.8, sd = 15.29),\n                            mean_trait_value = rnorm(4000, mean = 59.240, sd = 4.428)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Hoffman_2021_2_Male_raw$Treatment))\n  )\n\n# Zhao 1 females\n\nZhao_2022_1_Female_raw &lt;-\n  raw_data %&gt;% \n  filter(Treatment == \"Zhao_2022_1_Female\") #%&gt;% \n  #mutate(Vial_ID = as.factor(rleid(Vial_ID)))\n\nZhao_2022_1_Female_H2_model &lt;-\n    rpt(Lifespan ~ (1|line),  \n        grname = c(\"line\"),  \n        data = Zhao_2022_1_Female_raw, \n        datatype = \"Gaussian\", nboot = 1000, npermut = 0)\n\nconventional_H2 &lt;-\n  conventional_H2 %&gt;% bind_rows(\n  tibble(e0_heritability = Zhao_2022_1_Female_H2_model$R[[1]],\n       SE = Zhao_2022_1_Female_H2_model$se[1,],\n       Treatment = unique(Zhao_2022_1_Female_raw$Treatment))\n  )\n\n#CVG\n\nZhao_2022_1_Female_summ &lt;- summary(Zhao_2022_1_Female_H2_model$mod)\n\nCV_G &lt;-\n  CV_G %&gt;% bind_rows(tibble(V_G = rnorm(4000, mean = 200.51, sd = 14.160),\n                            mean_trait_value = rnorm(4000, mean = 58.362, sd = 3.172)) %&gt;% \n                       mutate(CV_G = 100 * sqrt(V_G) / mean_trait_value) %&gt;% \n                       dplyr::select(V_G, CV_G) %&gt;% \n                       summarise_draws(mean, ~quantile(.x, probs = c(0.025, 0.975))) %&gt;% \n                       mutate(Treatment = unique(Zhao_2022_1_Female_raw$Treatment))\n  )\n\nwrite_csv(conventional_H2, \"data/Derived/heritability/conventional_e0.csv\")\nwrite_csv(CV_G, \"data/Derived/heritability/conventional_CVG.csv\")\n} else {\n  conventional_H2 &lt;- read_delim(\"data/Derived/heritability/conventional_e0.csv\")\n  CV_G &lt;- read_delim(\"data/Derived/heritability/conventional_CVG.csv\")}"
  },
  {
    "objectID": "quant_gen.html#quasi-broad-sense-heritability",
    "href": "quant_gen.html#quasi-broad-sense-heritability",
    "title": "Quantitative genetic parameters",
    "section": "",
    "text": "Show the code\n# within lines, randomly assign individuals into groups of n individuals. Each time this function is run, a different arrangement is created. This allows us to bootstrap.\n\nget_boots &lt;- function(data, \n                      num_obs_in_group, # set the no. of observations per group - used to build a survival curve\n                      run_num){\n  observed &lt;-\n    data %&gt;% \n    group_by(line) %&gt;% \n    slice_sample(prop = 1) %&gt;% # reshuffle the row order within a line - this is the randomising step\n    ungroup() %&gt;%\n    group_by(line, group = (row_number()-1) %/% num_obs_in_group) %&gt;% # create groups of specified size\n    filter(!n()&lt;num_obs_in_group) %&gt;% # remove the final group if it has fewer individuals\n    ungroup() %&gt;% \n    dplyr::select(line, Lifespan, group) %&gt;% \n    mutate(boot = run_num) %&gt;% \n    unite(group_boot, group:boot, sep = \"_\", remove = F)\n  \n  observed   \n}\n\n# build a function to estimate the ageing metrics \n\nget_ageing_metrics &lt;- function(subset, # group of flies to analyse - we map through all groups produced by get_boots\n                               age_step){ # age_step is the step distance in days for the survival curve\n  \n  Group_data &lt;- new_data %&gt;% filter(group_boot == subset) \n  \n  #Fit survival models to compute lx\n  mod &lt;- survfit(Surv(Lifespan)~1,data=Group_data)\n  \n  #Compute Lx with model prediction\n  age &lt;- seq(0,max(Group_data$Lifespan), age_step)\n  lx &lt;- summary(mod,time=age)$surv\n  \n  age &lt;- age[lx!=0]\n  lx &lt;- lx[lx!=0]\n  \n  #life expectancy calculation\n  e0 &lt;- sum(lx)*age_step\n  \n  #lifespan equality calculation\n  disparity &lt;- -sum(lx*log(lx))*age_step\n  h &lt;- -log(disparity/e0)\n  \n  bind_cols(Group_data %&gt;% distinct(line, group, boot),\n            tibble(e0 = e0,\n                   h = h))\n}\n\n# build a function to run rpt models\n\nget_quasi_heritability &lt;- function(num_boot, ageing_data){ \n  \n  rptr_model_e0 &lt;-\n    rpt(e0 ~ (1|line),  \n        grname = c(\"line\"),  \n        data = ageing_data %&gt;% filter(boot == num_boot), \n        datatype = \"Gaussian\", nboot = 0, npermut = 0) # no bootstrapping needed because we already do so above\n  \n  rptr_model_h &lt;-\n    rpt(h ~ (1|line),  \n        grname = c(\"line\"),  \n        data = ageing_data %&gt;% filter(h != Inf & boot == num_boot), \n        datatype = \"Gaussian\", nboot = 0, npermut = 0)\n  \n  tibble(e0_heritability = pull(rptr_model_e0$R),\n         h_heritability = pull(rptr_model_h$R),\n         draw = num_boot) \n}\n\n# combine the functions \n\nestimate_heritability &lt;- function(){\n  \n}\n\n\n\n\n\n\n\nShow the code\nif(!file.exists(\"data/quasi_h_3.csv\")){ \n  \n  # Arya females\n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Female\"), # specify the treatment\n        num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_f &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Arya males\n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Male\"), # specify the treatment\n        num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_m &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  \n  # Huang 18C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n    }\n  \n  # Huang 18C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 25C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n    # Wilson 1\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n     # Wilson 2\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Durham\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Durham_2014_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Durham_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Patel\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Patel_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Patel_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n        # Dick 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Hoffman 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n            # Hoffman 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  } \n  \n            # Hoffman 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n              # Hoffman 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Male\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Zhao female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Zhao_2022_1_Female\"), # specify the treatment\n          num_obs_in_group = 3) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Zhao_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  quasi_h_3 &lt;-\n    bind_rows(\n      quasi_heritability_Arya_f %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_f\"),\n      quasi_heritability_Arya_m %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_m\"),\n      quasi_heritability_Huang_1_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_f\"),\n      quasi_heritability_Huang_1_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_m\"),\n      quasi_heritability_Huang_2_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_f\"),\n      quasi_heritability_Huang_2_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_m\"),\n      quasi_heritability_Huang_3_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_f\"),\n      quasi_heritability_Huang_3_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_m\"),\n      quasi_heritability_Wilson_1_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_1_f\"),\n      quasi_heritability_Wilson_2_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_2_f\"),\n      quasi_heritability_Durham_f %&gt;% mutate(treatment = \"quasi_heritability_Durham_f\"),\n      quasi_heritability_Patel_f %&gt;% mutate(treatment = \"quasi_heritability_Patel_f\"),\n      quasi_heritability_Dick_1_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_f\"),\n      quasi_heritability_Dick_1_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_m\"),\n      quasi_heritability_Dick_2_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_f\"),\n      quasi_heritability_Dick_2_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_m\"),\n      quasi_heritability_Dick_3_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_f\"),\n      quasi_heritability_Dick_3_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_m\"),\n      quasi_heritability_Hoffman_1_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_f\"),\n      quasi_heritability_Hoffman_1_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_m\"),\n      quasi_heritability_Hoffman_2_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_f\"),\n      quasi_heritability_Hoffman_2_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_m\"),\n      quasi_heritability_Zhao_f %&gt;% mutate(treatment = \"quasi_heritability_Zhao_f\"),\n    )\n  \n  write_csv(quasi_h_3, \"data/quasi_h_3.csv\")\n} else quasi_h_3 &lt;- read_delim(\"data/quasi_h_3.csv\")\n\nif(!file.exists(\"data/quasi_h_4.csv\")){ \n  \n  # Arya females\n  \n  {\n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Female\"), # specify the treatment\n        num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_f &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  }\n  \n  # Arya males\n  \n  {\n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Male\"), # specify the treatment\n        num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_m &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n    }\n  \n  # Huang 18C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n    }\n  \n  # Huang 18C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 28C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 28C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n      # Wilson 1\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n     # Wilson 2\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Durham\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Durham_2014_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Durham_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Patel\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Patel_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Patel_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n        # Dick 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Hoffman 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n            # Hoffman 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  } \n  \n            # Hoffman 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n              # Hoffman 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Male\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Zhao female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Zhao_2022_1_Female\"), # specify the treatment\n          num_obs_in_group = 4) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Zhao_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  quasi_h_4 &lt;-\n    bind_rows(\n      quasi_heritability_Arya_f %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_f\"),\n      quasi_heritability_Arya_m %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_m\"),\n      quasi_heritability_Huang_1_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_f\"),\n      quasi_heritability_Huang_1_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_m\"),\n      quasi_heritability_Huang_2_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_f\"),\n      quasi_heritability_Huang_2_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_m\"),\n      quasi_heritability_Huang_3_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_f\"),\n      quasi_heritability_Huang_3_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_m\"),\n      quasi_heritability_Wilson_1_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_1_f\"),\n      quasi_heritability_Wilson_2_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_2_f\"),\n      quasi_heritability_Durham_f %&gt;% mutate(treatment = \"quasi_heritability_Durham_f\"),\n      quasi_heritability_Patel_f %&gt;% mutate(treatment = \"quasi_heritability_Patel_f\"),\n      quasi_heritability_Dick_1_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_f\"),\n      quasi_heritability_Dick_1_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_m\"),\n      quasi_heritability_Dick_2_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_f\"),\n      quasi_heritability_Dick_2_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_m\"),\n      quasi_heritability_Dick_3_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_f\"),\n      quasi_heritability_Dick_3_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_m\"),\n      quasi_heritability_Hoffman_1_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_f\"),\n      quasi_heritability_Hoffman_1_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_m\"),\n      quasi_heritability_Hoffman_2_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_f\"),\n      quasi_heritability_Hoffman_2_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_m\"),\n      quasi_heritability_Zhao_f %&gt;% mutate(treatment = \"quasi_heritability_Zhao_f\"),\n    )\n\n  write_csv(quasi_h_4, \"data/quasi_h_4.csv\")\n} else quasi_h_4 &lt;- read_delim(\"data/quasi_h_4.csv\")\n\nif(!file.exists(\"data/quasi_h_5.csv\")){ \n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Female\"), # specify the treatment\n        num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_f &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Arya males\n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Male\"), # specify the treatment\n        num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_m &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Huang 18C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n    }\n  \n  # Huang 18C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 25C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Wilson 1\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n     # Wilson 2\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Durham\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Durham_2014_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Durham_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Patel\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Patel_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Patel_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n        # Dick 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Hoffman 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n            # Hoffman 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  } \n  \n            # Hoffman 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n              # Hoffman 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Male\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Zhao female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Zhao_2022_1_Female\"), # specify the treatment\n          num_obs_in_group = 5) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Zhao_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  quasi_h_5 &lt;-\n    bind_rows(\n      quasi_heritability_Arya_f %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_f\"),\n      quasi_heritability_Arya_m %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_m\"),\n      quasi_heritability_Huang_1_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_f\"),\n      quasi_heritability_Huang_1_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_m\"),\n      quasi_heritability_Huang_2_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_f\"),\n      quasi_heritability_Huang_2_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_m\"),\n      quasi_heritability_Huang_3_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_f\"),\n      quasi_heritability_Huang_3_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_m\"),\n      quasi_heritability_Wilson_1_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_1_f\"),\n      quasi_heritability_Wilson_2_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_2_f\"),\n      quasi_heritability_Durham_f %&gt;% mutate(treatment = \"quasi_heritability_Durham_f\"),\n      quasi_heritability_Patel_f %&gt;% mutate(treatment = \"quasi_heritability_Patel_f\"),\n      quasi_heritability_Dick_1_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_f\"),\n      quasi_heritability_Dick_1_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_m\"),\n      quasi_heritability_Dick_2_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_f\"),\n      quasi_heritability_Dick_2_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_m\"),\n      quasi_heritability_Dick_3_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_f\"),\n      quasi_heritability_Dick_3_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_m\"),\n      quasi_heritability_Hoffman_1_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_f\"),\n      quasi_heritability_Hoffman_1_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_m\"),\n      quasi_heritability_Hoffman_2_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_f\"),\n      quasi_heritability_Hoffman_2_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_m\"),\n      quasi_heritability_Zhao_f %&gt;% mutate(treatment = \"quasi_heritability_Zhao_f\"),\n    )\n\n  write_csv(quasi_h_5, \"data/quasi_h_5.csv\")\n} else quasi_h_5 &lt;- read_delim(\"data/quasi_h_5.csv\")\n\nif(!file.exists(\"data/quasi_h_6.csv\")){ \n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Female\"), # specify the treatment\n        num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_f &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Arya males\n  \n  new_data &lt;-\n    map(1:100, # number of bootstraps\n        get_boots,\n        data = raw_data %&gt;%\n          filter(Treatment == \"Arya_2010_1_Male\"), # specify the treatment\n        num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n    list_rbind()\n  \n  group_list &lt;- as.list(unique(new_data$group_boot))\n  \n  ageing_metrics &lt;-\n    map(group_list, \n        get_ageing_metrics,\n        age_step = 1) %&gt;%\n    list_rbind()\n  \n  quasi_heritability_Arya_m &lt;-\n    map(1:100, # number of bootstraps\n        get_quasi_heritability,\n        ageing_metrics)  %&gt;%\n    list_rbind()\n  \n  # Huang 18C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n    }\n  \n  # Huang 18C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_1_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Huang 25C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 25C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_2_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  \n  # Huang 28C male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Huang_2020_3_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Huang_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n         # Wilson 1\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n     # Wilson 2\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Wilson_2020_2_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Wilson_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Durham\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Durham_2014_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Durham_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n       # Patel\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Patel_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Patel_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n        # Dick 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_1_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_2_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Dick 3 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Dick_2011_3_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Dick_3_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n          # Hoffman 1 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n            # Hoffman 1 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_1_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_1_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  } \n  \n            # Hoffman 2 female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n              # Hoffman 2 male\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Hoffman_2021_2_Male\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Hoffman_2_m &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  # Zhao female\n  \n  {\n    new_data &lt;-\n      map(1:100, # number of bootstraps\n          get_boots,\n          data = raw_data %&gt;%\n            filter(Treatment == \"Zhao_2022_1_Female\"), # specify the treatment\n          num_obs_in_group = 6) %&gt;% # size of bootstrapped groups\n      list_rbind()\n    \n    \n    group_list &lt;- as.list(unique(new_data$group_boot))\n    \n    ageing_metrics &lt;-\n      map(group_list, \n          get_ageing_metrics,\n          age_step = 1) %&gt;%\n      list_rbind()\n    \n    \n    quasi_heritability_Zhao_f &lt;-\n      map(1:100, # number of bootstraps\n          get_quasi_heritability,\n          ageing_metrics)  %&gt;%\n      list_rbind()  \n  }  \n  \n  quasi_h_6 &lt;-\n    bind_rows(\n      quasi_heritability_Arya_f %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_f\"),\n      quasi_heritability_Arya_m %&gt;% mutate(treatment = \"quasi_heritability_Arya_1_m\"),\n      quasi_heritability_Huang_1_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_f\"),\n      quasi_heritability_Huang_1_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_1_m\"),\n      quasi_heritability_Huang_2_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_f\"),\n      quasi_heritability_Huang_2_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_2_m\"),\n      quasi_heritability_Huang_3_f %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_f\"),\n      quasi_heritability_Huang_3_m %&gt;% mutate(treatment = \"quasi_heritability_Huang_3_m\"),\n      quasi_heritability_Wilson_1_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_1_f\"),\n      quasi_heritability_Wilson_2_f %&gt;% mutate(treatment = \"quasi_heritability_Wilson_2_f\"),\n      quasi_heritability_Durham_f %&gt;% mutate(treatment = \"quasi_heritability_Durham_f\"),\n      quasi_heritability_Patel_f %&gt;% mutate(treatment = \"quasi_heritability_Patel_f\"),\n      quasi_heritability_Dick_1_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_f\"),\n      quasi_heritability_Dick_1_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_1_m\"),\n      quasi_heritability_Dick_2_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_f\"),\n      quasi_heritability_Dick_2_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_2_m\"),\n      quasi_heritability_Dick_3_f %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_f\"),\n      quasi_heritability_Dick_3_m %&gt;% mutate(treatment = \"quasi_heritability_Dick_3_m\"),\n      quasi_heritability_Hoffman_1_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_f\"),\n      quasi_heritability_Hoffman_1_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_1_m\"),\n      quasi_heritability_Hoffman_2_f %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_f\"),\n      quasi_heritability_Hoffman_2_m %&gt;% mutate(treatment = \"quasi_heritability_Hoffman_2_m\"),\n      quasi_heritability_Zhao_f %&gt;% mutate(treatment = \"quasi_heritability_Zhao_f\"),\n    )\n  \n  write_csv(quasi_h_6, \"data/quasi_h_6.csv\")\n} else quasi_h_6 &lt;- read_delim(\"data/quasi_h_6.csv\")\n\n\n\n\nShow the code\nqh_plot_data &lt;-\n  bind_rows(\n    quasi_h_3 %&gt;% \n      mutate(sample = 3),\n    \n    quasi_h_4 %&gt;% \n      mutate(sample = 4),\n    \n    quasi_h_5 %&gt;% \n      mutate(sample = 5),\n    \n    quasi_h_6 %&gt;% \n      mutate(sample = 6)) %&gt;% \n  rename(`Life expectancy`= e0_heritability, `Lifespan equality` = h_heritability) %&gt;% \n  pivot_longer(cols = `Life expectancy`:`Lifespan equality`,\n               names_to = \"Trait\", values_to = \"Quasi-heritability\") %&gt;% \n  mutate(treatment = case_when(treatment == \"quasi_heritability_Arya_1_f\" ~ \"Arya 25C females\",\n                               treatment == \"quasi_heritability_Arya_1_m\" ~ \"Arya 25C males\",\n                               treatment == \"quasi_heritability_Huang_1_f\" ~ \"Huang 18C females\",\n                               treatment == \"quasi_heritability_Huang_1_m\" ~ \"Huang 18C males\",\n                               treatment == \"quasi_heritability_Huang_2_f\" ~ \"Huang 25C females\",\n                               treatment == \"quasi_heritability_Huang_2_m\" ~ \"Huang 25C males\",\n                               treatment == \"quasi_heritability_Huang_3_f\" ~ \"Huang 28C females\",\n                               treatment == \"quasi_heritability_Huang_3_m\" ~ \"Huang 28C males\"))  \n\n  qh_plot_data %&gt;% \n  ggplot(aes(x = sample, y= `Quasi-heritability`, group = Trait)) +\n  stat_interval(data = qh_plot_data %&gt;% filter(Trait == \"Life expectancy\"),\n                .width = c(0.05, 0.66, 0.95), \n                height = 1, show.legend = F) +\n  rcartocolor::scale_color_carto_d(palette = \"Teal\") +\n  new_scale_colour() +\n  stat_interval(data = qh_plot_data %&gt;% filter(Trait == \"Lifespan equality\"),\n                .width = c(0.05, 0.66, 0.95), \n                height = 1, show.legend = F) +\n  rcartocolor::scale_color_carto_d(palette = \"OrYel\") +\n  labs(x = \"Sample size of groups within lines\") +\n  facet_wrap(~treatment) +\n  theme_bw() + \n  theme(strip.background = element_rect(fill = \"aliceblue\"),\n        panel.grid.minor = element_blank(),\n        text = element_text(size=14),\n        axis.text.y = element_text(size = 8),\n        axis.title.x = element_markdown())"
  },
  {
    "objectID": "quant_gen.html#table-sx",
    "href": "quant_gen.html#table-sx",
    "title": "Quantitative genetic parameters",
    "section": "",
    "text": "Table SX. Broad-sense heritability for life expectancy, calculated using an intraclass correlation coefficient approach. Reported H^2 indicates the estimate reported in the original study. *Heritabilty was calculated across the sexes, producing a single estimate.\n\n\nShow the code\nconventional_H2 %&gt;% \n  left_join(\ntibble(Treatment = conventional_H2$Treatment,\n       `Reported H2` = c(\"0.43*\", \"0.43*\", 0.39, 0.39, 0.4, 0.44, 0.35, 0.37, \"Not reported\", \"Not reported\", 0.294,\n                         \"Not reported\", \"Not reported\", \"Not reported\", \"Not reported\", \"Not reported\",\n                         \"Not reported\", \"Not reported\", \"Not reported\", \"Not reported\", \"Not reported\",\n                         \"Not reported\", \"Not reported\"))\n) %&gt;% \n  pander(split.cell = 40, split.table = Inf)"
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Project home",
    "section": "",
    "text": "Is ageing really invariant within species? A case study using Drosophila melanogaster.\nThis page is a work in progress. Eventually it will contain a report that documents our analysis, with the aim to make it as reproducible and freely available as possible. For now, we just include the list of studies that we used to produce the results you might have seen on our poster.\n\n\nStudies\nNatural variation, functional pleiotropy and transcriptional contexts of odorant binding proteins in Drosophila melanogaster\nAuthors: Arya, Weber, Wang, Magwire, Mackay and Anholt\nYear: 2010\nJournal: Genetics\nDOI: 10.1534/genetics.110.123166\nAbstract: How functional diversification affects the organization of the transcriptome is a central question in systems genetics. To explore this issue, we sequenced all six Odorant binding protein ( Obp) genes located on the X chromosome, four of which occur as a cluster, in 219 inbred wild-derived lines of Drosophila melanogaster and tested for associations between genetic and phenotypic variation at the organismal and transcriptional level. We observed polymorphisms in Obp8a, Obp19a, Obp19b,and Obp19c associated with variation in olfactory responses and polymorphisms in Obp19d associated with variation in life span. We inferred the transcriptional context, or “niche,” of each gene by identifying expression polymorphisms where genetic variation in these Obp genes was associated with variation in expression of transcripts genetically correlated to each Obp gene. All six Obp genes occupied a distinct transcriptional niche. Gene ontology enrichment analysis revealed associations of different Obp transcriptional niches with olfactory behavior, synaptic transmission, detection of signals regulating tissue development and apoptosis, postmating behavior and oviposition, and nutrient sensing. Our results show that diversification of the Obp family has organized distinct transcriptional niches that reflect their acquisition of additional functions.\nGenetic variation of dietary restriction and the effects of nutrient-free water and amino acid supplements on lifespan and fecundity of Drosophila\nAuthors: Dick, Ross and Yampolsky\nYear: 2011\nJournal: Genetics Research\nDOI: 10.1017/S001667231100019X\nAbstract: We measure genetic variation in lifespan and fecundity at two food levels in 34 core lines of the Drosophila Genetic Reference Panel collection. Lines were significantly different from each other in lifespan and fecundity at both restricted and full food. There was a strong food-by-line interaction for the slope of age-specific mortality, fecundity and proportion of fertilized eggs, indicating the presence of genetic variation for the strength of the dietary restriction effect, likely to represent standing genetic variation in a natural population from which the lines used have originated. No trade-off between fecundity and lifespan manifested in life-history variation among inbred lines. Our data partially corroborate the recent proposition that availability of nutrient-free water eliminates the apparent dietary restriction at least in some conditions. Although flies on full food with water added had lifespan slightly higher than those without a water source, it was still significantly lower than that in flies on restricted food, with no indication of interaction. We fully corroborate the recently discovered effect of addition of essential amino acids to the medium: addition of 1.5 mM methionine to restricted food significantly increased fecundity without a measurable decrease in lifespan; addition of each of 10 essential amino acids increased fecundity and decreased females lifespan to the levels observed on full food, again with no evidence of line-by-food interactions. We propose a mechanistic hypothesis explaining the observed data, based on the assumption that food consumption by flies is adjusted according to flies’ saturation in water and methionine.\nGenome-wide analysis in Drosophila reveals age-specific effects of SNPs on fitness traits\nAuthors: Durham, Magwire, Stone, Leips\nYear: 2014\nJournal: Nature Communications\nDOI: 10.1038/ncomms5338\nAbstract: Most organisms exhibit senescence; a decline in physiological function with age. In nature, rates of senescence vary extensively among individuals and this variation has a significant genetic component; however, we know little about the genes underlying senescence. Here we show the first evidence that individual alleles influence fecundity in an age-specific manner and so the genetic basis of natural variation in fecundity changes dramatically with age. We complete a genome-wide association to identify single-nucleotide polymorphisms (SNPs) affecting lifespan and age-specific fecundity using the Drosophila melanogaster Genetic Reference Panel. We identify 1,031 SNPs affecting fecundity and 52 influencing lifespan. Only one SNP is associated with both early- and late-age fecundity. The age-specific effect of candidate genes on fecundity is validated using RNA interference. In addition, there is a dramatic increase in the number of SNPs influencing fecundity with age. This result provides support for the mutation accumulation theory of aging.\nContext-dependent genetic architecture of Drosophila lifespan\nAuthors: Huang, Campbell, Carbone, Jones, Unselt, Anholt and Mackay\nYear: 2020\nJournal: PLoS Biology\nDOI: https://doi.org/10.1371/journal.pbio.3000645\nAbstract: Understanding the genetic basis of variation in life span is a major challenge that is difficult to address in human populations. Evolutionary theory predicts that alleles affecting natural variation in life span will have properties that enable them to persist in populations at intermediate frequencies, such as late-life–specific deleterious effects, antagonistic pleiotropic effects on early and late-age fitness components, and/or sex- and environment-specific or antagonistic effects. Here, we quantified variation in life span in males and females reared in 3 thermal environments for the sequenced, inbred lines of the Drosophila melanogaster Genetic Reference Panel (DGRP) and an advanced intercross outbred population derived from a subset of DGRP lines. Quantitative genetic analyses of life span and the micro-environmental variance of life span in the DGRP revealed significant genetic variance for both traits within each sex and environment, as well as significant genotype-by-sex interaction (GSI) and genotype-by-environment interaction (GEI). Genome-wide association (GWA) mapping in both populations implicates over 2,000 candidate genes with sex- and environment-specific or antagonistic pleiotropic allelic effects. Over 1,000 of these genes are associated with variation in life span in other D. melanogaster populations. We functionally assessed the effects of 15 candidate genes using RNA interference (RNAi): all affected life span and/or micro-environmental variance of life span in at least one sex and environment and exhibited sex-and environment-specific effects. Our results implicate novel candidate genes affecting life span and suggest that variation for life span may be maintained by variable allelic effects in heterogeneous environments.\nGWAS for Lifespan and Decline in Climbing Ability in Flies upon Dietary Restriction Reveal decima as a Mediator of Insulin-like Peptide Production\nAuthors: Wilson, Beck, Nelson, Hilsabeck, Promislow, Brem and Kapahi\nYear: 2020\nJournal: Current Biology\nDOI: https://doi.org/10.1016/j.cub.2020.05.020\nAbstract: Dietary restriction (DR) is the most robust means to extend lifespan and delay age-related diseases across species. An underlying assumption in the aging field is that DR enhances both lifespan and physical activity through similar mechanisms, but this has not been rigorously tested in different genetic backgrounds. Furthermore, nutrient response genes responsible for lifespan extension or age-related decline in functionality remain underexplored in natural populations. To address this, we measured nutrient-dependent changes in lifespan and age-related decline in climbing ability in the Drosophila Genetic Reference Panel fly strains. On average, DR extended lifespan and delayed decline in climbing ability, but there was a lack of correlation between these traits across individual strains, suggesting that distinct genetic factors modulate these traits independently and that genotype determines response to diet. Only 50% of strains showed positive response to DR for both lifespan and climbing ability, 14% showed a negative response for one trait but not both, and 35% showed no change in one or both traits. Through GWAS, we uncovered a number of genes previously not known to be diet responsive nor to influence lifespan or climbing ability. We validated decima as a gene that alters lifespan and daedalus as one that influences age-related decline in climbing ability. We found that decima influences insulin-like peptide transcription in the GABA receptor neurons downstream of short neuropeptide F precursor ( sNPF) signaling. Modulating these genes produced independent effects on lifespan and physical activity decline, which suggests that these age-related traits can be regulated through distinct mechanisms.\nIdentification of genetic modifiers of lifespan on a high sugar diet in the Drosophila Genetic Reference Panel\nAuthors: Patel and Talbert\nYear: 2021\nJournal: Heliyon\nDOI: https://doi.org/10.1016/j.heliyon.2021.e07153\nAbstract: Genome-wide association studies (GWAS) have become beneficial in identifying genetic variants underlying susceptibility to various complex diseases and conditions, including obesity. Utilizing the Drosophila Genetic Reference Panel (DGRP), we performed a GWAS of lifespan of 193 genetically distinct lines on a high sugar diet (HSD). The DGRP analysis pipeline determined the most significant lifespan associated polymorphisms were within loci of genes involved in: neural processes, behavior, development, and apoptosis, among other functions. Next, based on the relevance to obesity pathology, and the availability of transgenic RNAi lines targeting the genes we identified, whole-body in vivo knockdown of several candidate genes was performed. We utilized the GAL4-UAS binary expression system to independently validate the impacts of these loci on Drosophila lifespan during HSD. These loci were largely confirmed to affect lifespan in that HSD setting, as well as a normal diet setting. However, we also detected unexpected dietary effects of the HSD, including inconsistent diet effects on lifespan relative to a normal diet and a strong downregulation of feeding quantity.\nSex, mating and repeatability of Drosophila melanogaster longevity\nAuthors: Hoffman, Dudeck, Patterson and Austad\nYear: 2021\nJournal: Royal Society Open Science\nDOI: https://doi.org/10.1098/rsos.210273\nAbstract: Costs of reproduction are seemingly ubiquitous across the animal kingdom, and these reproductive costs are generally defined by increased reproduction leading to decreases in other fitness components, often longevity. However, some recent reports question whether reproductive costs exist in every species or population. To provide insight on this issue, we sought to determine the extent to which genetic variation might play a role in one type of reproductive cost—survival—using Drosophila melanogaster. We found, surprisingly, no costs of reproduction nor sex differences in longevity across all 15 genetic backgrounds in two cohorts. We did find significant variation within some genotypes, though these were much smaller than expected. We also observed that small laboratory changes lead to significant changes in longevity within genotypes, suggesting that longevity repeatability in flies may be difficult. We finally compared our results to previously published longevities and found that reproducibility is similar to what we saw in our own laboratory, further suggesting that stochasticity is a strong component of fruit fly lifespan. Overall, our results suggest that there are still large gaps in our knowledge about the effects of sex and mating, as well as genetic background and laboratory conditions on lifespan reproducibility.\nThe metabolome as a biomarker of aging in Drosophila melanogaster\nAuthors: Zhao, Golic, Harrison, Manoj, Hoffman, Simon, Johnson, MacCoss, McIntyre and Promislow\nYear: 2022\nJournal: Ageing Cell\nDOI: 10.1111/acel.13548\nAbstract: Many biomarkers have been shown to be associated not only with chronological age but also with functional measures of biological age. In human populations, it is difficult to show whether variation in biological age is truly predictive of life expectancy, as such research would require longitudinal studies over many years, or even decades. We followed adult cohorts of 20 Drosophila Genetic Reference Panel (DGRP) strains chosen to represent the breadth of lifespan variation, obtain estimates of lifespan, baseline mortality, and rate of aging, and associate these parameters with age-specific functional traits including fecundity and climbing activity and with age-specific targeted metabolomic profiles. We show that activity levels and metabolome-wide profiles are strongly associated with age, that numerous individual metabolites show a strong association with lifespan, and that the metabolome provides a biological clock that predicts not only sample age but also future mortality rates and lifespan. This study with 20 genotypes and 87 metabolites, while relatively small in scope, establishes strong proof of principle for the fly as a powerful experimental model to test hypotheses about biomarkers and aging and provides further evidence for the potential value of metabolomic profiles as biomarkers of aging."
  },
  {
    "objectID": "sex_specific_effects.html",
    "href": "sex_specific_effects.html",
    "title": "Sex-specific effects",
    "section": "",
    "text": "Note that the MASS package is required to run the CPASSOC. Unfortunately this clashes with the dplyr select(). So be prepared to run detach(\"package:MASS\", unload=TRUE) or use dplyr::select() to get some things to work if you’re moving back and forth throughout the code.\n\n\nShow the code\nlibrary(tidyverse) # tidy coding, ggplot etc\nlibrary(glue) # for coding within strings\nlibrary(bigsnpr) # to install: devtools::install_github(\"privefl/bigsnpr\")\nlibrary(pander) # for tables\nlibrary(brms) # for bayesian models\nlibrary(tidybayes)\nlibrary(ggtext) # for markdown syntax in ggplot\nlibrary(ggnewscale) # to reset colour scales\nlibrary(MetBrewer) # for more colour palettes\nlibrary(MoMAColors) # nicer colours once again\nlibrary(PNWColors) # further nicer colours\nlibrary(hexbin) # for desnity heat maps\nlibrary(rcartocolor) # even more nice colours\nlibrary(patchwork) # building composite plots\nlibrary(DT) # for nice tables\nlibrary(kableExtra) # for more nice tables\nlibrary(ggrepel) # for labelling ggplots\nlibrary(pheatmap) # for heat maps\nlibrary(MASS) # needed for CPASSOC\nlibrary(Matrix) # needed for CPASSOC\nlibrary(flexsurv) # for survival analysis\nlibrary(rptR) # for finding the intraclass correlation coefficient\nlibrary(data.table) # for the rleid function\n\n# build a helper function that produces a table to display our data\n\n# Create a function to build HTML searchable tables\n\nmy_data_table &lt;- function(df){\n  datatable(\n    df, rownames=FALSE,\n    autoHideNavigation = TRUE,\n    extensions = c(\"Scroller\",  \"Buttons\"),\n    options = list(\n      autoWidth = TRUE,\n      dom = 'Bfrtip',\n      deferRender=TRUE,\n      scrollX=TRUE, scrollY=1000,\n      scrollCollapse=TRUE,\n      buttons =\n        list('pageLength', 'colvis', 'csv', list(\n          extend = 'pdf',\n          pageSize = 'A4',\n          orientation = 'landscape',\n          filename = 'Lifespan_data')),\n      pageLength = 100\n    )\n  )\n}\n\n\n\n\nShow the code\ngenotyped_lines &lt;- \n  read_csv(\"data/input/Genotyped_lines.csv\") %&gt;% \n  mutate(Genotyped = \"YES\",\n         line = as.factor(line))\n  \nfull_dataset &lt;- \n  read.csv(\"data/input/lifespan_data.csv\") %&gt;% \n  as_tibble() %&gt;% \n  mutate(line = as.factor(Line),\n         Treatment = str_replace(Treatment, \" \", \"_\"),\n         Treatment = case_when(Temperature == 18 & Study == \"Huang_2020\" ~ \"Huang_2020_1\",\n                               Temperature == 25 & Study == \"Huang_2020\" ~ \"Huang_2020_2\",\n                               Temperature == 28 & Study == \"Huang_2020\" ~ \"Huang_2020_3\",\n                               .default = Treatment)) %&gt;%\n  dplyr::select(-Line) %&gt;% \n  left_join(genotyped_lines, by = \"line\") %&gt;% \n  mutate(Genotyped = if_else(is.na(Genotyped), \"NO\", Genotyped)) %&gt;% \n  dplyr::select(line, Sex, Temperature, Mated, Study, Treatment, Block, e0, SE_e0, h, SE_h, samp, Genotyped)\n\n# DGRP studies often correct for the most common inversions and wolbachia presence. \n\ninversions_wolbachia &lt;- \n  read_csv(\"data/Input/inversions_wolbachia.csv\") %&gt;%\n  mutate(line = as.factor(str_remove(line, \"DGRP_\")),\n         Wolbachia = if_else(Wolbachia == \"y\", 1, 0),\n         across(2:17, ~ case_when(.x == \"ST\" ~ 0,\n                                 .x == \"INV/ST\" ~ 1,\n                                 .x == \"INV\" ~ 2))) %&gt;% \n  dplyr::select(line, `In(2L)t`, `In(2R)NS`, `In(3R)P`, `In(3R)K`, `In(3R)Mo`, Wolbachia) %&gt;% \n  rename(In_2L_t = `In(2L)t`,\n         In_2R_NS = `In(2R)NS`,\n         In_3R_P = `In(3R)P`,\n         In_3R_K = `In(3R)K`,\n         In_3R_Mo = `In(3R)Mo`)\n# inversions pruned to those Huang et al 2015 PNAS corrected for\n\nfull_dataset &lt;- \n  full_dataset %&gt;% \n  left_join(inversions_wolbachia) %&gt;% \n  mutate(Wolbachia = if_else(Study == \"Durham_2014\", 0, Wolbachia)) # study cleared wolbachia with tetracycline before phenotyping \n  \nmy_data_table(full_dataset %&gt;% \n                mutate(across(8:11, ~ round(.x, 2))) %&gt;% \n                dplyr::select(1:13))"
  },
  {
    "objectID": "sex_specific_effects.html#the-intersex-genetic-correlation",
    "href": "sex_specific_effects.html#the-intersex-genetic-correlation",
    "title": "Sex-specific effects",
    "section": "The intersex genetic correlation",
    "text": "The intersex genetic correlation\nLets take a quick look at the intersex-genetic correlations for our metrics in each relevant measurement condition.\n\n\nShow the code\nArya_two_sexes_SNPS &lt;-\n  left_join(\n    Arya_f_l_GWAS %&gt;% \n      dplyr::select(1:2) %&gt;% \n      rename(Female_e0_effect = BETA), \n    \n    Arya_m_l_GWAS %&gt;% \n      dplyr::select(1:2) %&gt;% \n      rename(Male_e0_effect = BETA)\n  ) %&gt;% \n  left_join(Arya_f_h_GWAS %&gt;% \n              dplyr::select(1:2) %&gt;% \n              rename(Female_h_effect = BETA)) %&gt;% \n  left_join(Arya_m_h_GWAS %&gt;% \n              dplyr::select(1:2) %&gt;% \n              rename(Male_h_effect = BETA))\n\nHuang_18_two_sexes_SNPS &lt;-\n  left_join(\n    Huang_f_18_l_GWAS %&gt;% \n      dplyr::select(1:2) %&gt;% \n      rename(Female_e0_effect = BETA), \n    \n    Huang_m_18_l_GWAS %&gt;% \n      dplyr::select(1:2) %&gt;% \n      rename(Male_e0_effect = BETA)\n  ) %&gt;% \n  left_join(Huang_f_18_h_GWAS %&gt;% \n              dplyr::select(1:2) %&gt;% \n              rename(Female_h_effect = BETA)) %&gt;% \n  left_join(Huang_m_18_h_GWAS %&gt;% \n              dplyr::select(1:2) %&gt;% \n              rename(Male_h_effect = BETA))\n\n\nHuang_25_two_sexes_SNPS &lt;-\n  left_join(\n    Huang_f_25_l_GWAS %&gt;% \n      dplyr::select(1:2) %&gt;% \n      rename(Female_e0_effect = BETA), \n    \n    Huang_m_25_l_GWAS %&gt;% \n      dplyr::select(1:2) %&gt;% \n      rename(Male_e0_effect = BETA)\n  ) %&gt;% \n  left_join(Huang_f_25_h_GWAS %&gt;% \n              dplyr::select(1:2) %&gt;% \n              rename(Female_h_effect = BETA)) %&gt;% \n  left_join(Huang_m_25_h_GWAS %&gt;% \n              dplyr::select(1:2) %&gt;% \n              rename(Male_h_effect = BETA))  \n\n\nHuang_28_two_sexes_SNPS &lt;-\n  left_join(\n    Huang_f_28_l_GWAS %&gt;% \n      dplyr::select(1:2) %&gt;% \n      rename(Female_e0_effect = BETA), \n    \n    Huang_m_28_l_GWAS %&gt;% \n      dplyr::select(1:2) %&gt;% \n      rename(Male_e0_effect = BETA)\n  ) %&gt;% \n  left_join(Huang_f_28_h_GWAS %&gt;% \n              dplyr::select(1:2) %&gt;% \n              rename(Female_h_effect = BETA)) %&gt;% \n  left_join(Huang_m_28_h_GWAS %&gt;% \n              dplyr::select(1:2) %&gt;% \n              rename(Male_h_effect = BETA))\n\n\nPlot the within-treatment intersex-genetic correlations\n\n\nShow the code\npal &lt;- pnw_palette(\"Shuksan2\", 100)\n\nArya_e0_sex_plot &lt;-\n  Arya_two_sexes_SNPS %&gt;% \n  ggplot(aes(x = Female_e0_effect, y = Male_e0_effect )) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_gradientn(colours = pal) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"black\") +\n  coord_cartesian(xlim = c(-0.8, 0.8), ylim = c(-0.8, 0.8)) +\n  labs(x = \"Effect on female life expectancy\", \n       y = \"Effect on male\\nlife expectancy\",\n       title = \"Arya et al 2010: 25C\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 11))\n\nArya_h_sex_plot &lt;-\n  Arya_two_sexes_SNPS %&gt;% \n  ggplot(aes(x = Female_h_effect, y = Male_h_effect )) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_gradientn(colours = pal) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"black\") +\n  coord_cartesian(xlim = c(-0.8, 0.8), ylim = c(-0.8, 0.8)) +\n  labs(x = \"Effect on female lifespan equality\", \n       y = \"Effect on male\\nlifespan equality\",\n       title = \"Arya et al 2010: 25C\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 11))\n\nHuang_18_e0_sex_plot &lt;-\n  Huang_18_two_sexes_SNPS %&gt;% \n  ggplot(aes(x = Female_e0_effect, y = Male_e0_effect )) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_gradientn(colours = pal) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"black\") +\n  coord_cartesian(xlim = c(-0.8, 0.8), ylim = c(-0.8, 0.8)) +\n  labs(x = \"Effect on female life expectancy\", \n       y = \"Effect on male\\nlife expectancy\",\n       title = \"Huang et al, 2020: 18C\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 11))\n\nHuang_18_h_sex_plot &lt;-\n  Huang_18_two_sexes_SNPS %&gt;% \n  ggplot(aes(x = Female_h_effect, y = Male_h_effect )) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_gradientn(colours = pal) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"black\") +\n  coord_cartesian(xlim = c(-0.8, 0.8), ylim = c(-0.8, 0.8)) +\n  labs(x = \"Effect on female lifespan equality\", \n       y = \"Effect on male\\nlifespan equality\",\n       title = \"Huang et al, 2020: 18C\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 11))\n\nHuang_25_e0_sex_plot &lt;-\n  Huang_25_two_sexes_SNPS %&gt;% \n  ggplot(aes(x = Female_e0_effect, y = Male_e0_effect )) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_gradientn(colours = pal) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"black\") +\n  coord_cartesian(xlim = c(-0.8, 0.8), ylim = c(-0.8, 0.8)) +\n  labs(x = \"Effect on female life expectancy\", \n       y = \"Effect on male\\nlife expectancy\",\n       title = \"Huang et al, 2020: 25C\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 11))\n\nHuang_25_h_sex_plot &lt;-\n  Huang_25_two_sexes_SNPS %&gt;% \n  ggplot(aes(x = Female_h_effect, y = Male_h_effect )) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_gradientn(colours = pal) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"black\") +\n  coord_cartesian(xlim = c(-0.8, 0.8), ylim = c(-0.8, 0.8)) +\n  labs(x = \"Effect on female lifespan equality\", \n       y = \"Effect on male\\nlifespan equality\",\n       title = \"Huang et al, 2020: 25C\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 11))\n\nHuang_28_e0_sex_plot &lt;-\n  Huang_28_two_sexes_SNPS %&gt;% \n  ggplot(aes(x = Female_e0_effect, y = Male_e0_effect )) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_gradientn(colours = pal) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"black\") +\n  coord_cartesian(xlim = c(-0.8, 0.8), ylim = c(-0.8, 0.8)) +\n  labs(x = \"Effect on female life expectancy\", \n       y = \"Effect on male\\nlife expectancy\",\n       title = \"Huang et al, 2020: 28C\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 11))\n\nHuang_28_h_sex_plot &lt;-\n  Huang_28_two_sexes_SNPS %&gt;% \n  ggplot(aes(x = Female_h_effect, y = Male_h_effect )) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_gradientn(colours = pal) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"black\") +\n  coord_cartesian(xlim = c(-0.8, 0.8), ylim = c(-0.8, 0.8)) +\n  labs(x = \"Effect on female lifespan equality\", \n       y = \"Effect on male\\nlifespan equality\",\n       title = \"Huang et al, 2020: 28C\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 11))\n\n(Arya_e0_sex_plot + Arya_h_sex_plot) /\n  (Huang_18_e0_sex_plot + Huang_18_h_sex_plot) / \n  (Huang_25_e0_sex_plot + Huang_25_h_sex_plot) / \n  (Huang_28_e0_sex_plot + Huang_28_h_sex_plot)"
  },
  {
    "objectID": "sex_specific_effects.html#axes-of-sex-specificity-and-concordance",
    "href": "sex_specific_effects.html#axes-of-sex-specificity-and-concordance",
    "title": "Sex-specific effects",
    "section": "Axes of sex-specificity and concordance",
    "text": "Axes of sex-specificity and concordance\nWhile there is a strong inter-sex genetic correlation for both life expectancy and lifespan equality, both correlations are significantly lower than one. Thus, it is likely that there are alleles that have sex-limited, sex-biased or sex-opposite effects on lifespan/lifespan equality. To identify genetic variants with these kinds of affects, we select those studies that measured lifespan in both sexes and calculate a sexual antagonism index for each line, following previous studies focused on similar questions (e.g. Berger et al, 2014, Grieshop and Arnqvist, 2018, Ruzicka et al, 2020). To create the index, we rotate the coordinate system of the female life expectancy (lifespan equality) and male life expectancy (lifespan equality) plane clockwise by \\(\\theta\\):\n\\[x' = x\\cos(\\theta) - y\\sin(\\theta),\\] \\[y' = x\\sin(\\theta) + y\\cos(\\theta),\\]\nwhere \\(x\\) and \\(y\\) are female and male lifespan, \\(x'\\) and \\(y'\\) are the values of sexually antagonistic and concordant lifespan and \\(\\theta\\) = 45 degrees.\n\n\nShow the code\nrotate_axis_function &lt;- function(data_1, data_2, Females, Males, metric){\n  left_join(\n    data_1 %&gt;% rename(Females = metric),\n    data_2 %&gt;% rename(Males = metric)) %&gt;% \n    mutate(SA_axis = Females*cos(0.785398) - Males*sin(0.785398),\n           SC_axis = Females*sin(0.785398) + Males*cos(0.785398))\n}\n  \nArya_l_SA &lt;-\n  rotate_axis_function(Arya_f_l, Arya_m_l, \n                     Females = \"Female_life_expectancy\", \n                     Males = \"Male_life_expectancy\",\n                     metric = \"e0_scaled\") \n\nHuang_18_l_SA &lt;-\n  rotate_axis_function(Huang_f_18_l, Huang_m_18_l, \n                     Females = \"Female_life_expectancy\", \n                     Males = \"Male_life_expectancy\",\n                     metric = \"e0_scaled\") \n\nHuang_25_l_SA &lt;-\n  rotate_axis_function(Huang_f_25_l, Huang_m_25_l, \n                     Females = \"Female_life_expectancy\", \n                     Males = \"Male_life_expectancy\",\n                     metric = \"e0_scaled\") \n\nHuang_28_l_SA &lt;-\n  rotate_axis_function(Huang_f_28_l, Huang_m_28_l, \n                     Females = \"Female_life_expectancy\", \n                     Males = \"Male_life_expectancy\",\n                     metric = \"e0_scaled\") \n\n# now lifespan equality\n\nArya_h_SA &lt;-\n  rotate_axis_function(Arya_f_h, Arya_m_h, \n                     Females = \"Female_lifespan_equality\", \n                     Males = \"Male_lifespan_equality\",\n                     metric = \"h\") \n\nHuang_18_h_SA &lt;-\n  rotate_axis_function(Huang_f_18_h, Huang_m_18_h, \n                     Females = \"Female_lifespan_equality\", \n                     Males = \"Male_lifespan_equality\",\n                     metric = \"h\") \n\nHuang_25_h_SA &lt;-\n  rotate_axis_function(Huang_f_25_h, Huang_m_25_h, \n                     Females = \"Female_lifespan_equality\", \n                     Males = \"Male_lifespan_equality\",\n                     metric = \"h\") \n\nHuang_28_h_SA &lt;-\n  rotate_axis_function(Huang_f_28_h, Huang_m_28_h, \n                     Females = \"Female_lifespan_equality\", \n                     Males = \"Male_lifespan_equality\",\n                     metric = \"h\") \n\n\nTo visualise this transformation lets plot the standardised life expectancy means presented in Arya et al 2010\n\n\nShow the code\nSA_plot &lt;-\nArya_l_SA %&gt;% \n  ggplot(aes(x = Females, y = Males)) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  geom_abline(intercept = 0, slope = -1, linewidth = 1, linetype = 2, colour = \"salmon\") +\n  geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = 2, colour = \"salmon\") +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  geom_point(aes(fill = SA_axis), shape = 21, size = 4) +\n  scale_fill_moma_c(\"Avedon\", direction = -1, limits = c(-2.5, 2.5)) +\n  coord_fixed(xlim = c(-4, 4), ylim = c(-4, 4)) +\n  labs(fill = \"SA index\",\n       x = \"Life expectancy (female)\",\n       y = \"Life expectancy (male)\",\n       title = \"Arya et al. 2010 data\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nSC_plot &lt;-\nArya_l_SA %&gt;% \n  ggplot(aes(x = Females, y = Males)) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  geom_abline(intercept = 0, slope = -1, linewidth = 1, linetype = 2, colour = \"salmon\") +\n  geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = 2, colour = \"salmon\") +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  geom_point(aes(fill = SC_axis), shape = 21, size = 4) +\n  scale_fill_moma_c(\"Avedon\", direction = -1, limits = c(-4, 4)) +\n  coord_fixed(xlim = c(-4, 4), ylim = c(-4, 4)) +\n  labs(fill = \"SC index\",\n       x = \"Life expectancy (female)\",\n       y = \"Life expectancy (male)\",\n       title = \"Arya et al. 2010 data\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nSA_plot / SC_plot\n\n\nFig SX. Genotypic values for female and male life expectancy, coloured by a the degree of sex-specific and b sexually concordant effect on life expectancy. The red dotted lines show the rotation that has been performed to create the antagonism and concordance axis."
  },
  {
    "objectID": "sex_specific_effects.html#run-univariate-gwas",
    "href": "sex_specific_effects.html#run-univariate-gwas",
    "title": "Sex-specific effects",
    "section": "Run univariate GWAS",
    "text": "Run univariate GWAS\n\n\nShow the code\nSA_e0_Arya &lt;- prep_for_SA_GWAS(Arya_l_SA)\nSA_e0_Huang_18 &lt;- prep_for_SA_GWAS(Huang_18_l_SA)\nSA_e0_Huang_25 &lt;- prep_for_SA_GWAS(Huang_25_l_SA)\nSA_e0_Huang_28 &lt;- prep_for_SA_GWAS(Huang_28_l_SA)\n\nSA_h_Arya &lt;- prep_for_SA_GWAS(Arya_h_SA)\nSA_h_Huang_18 &lt;- prep_for_SA_GWAS(Huang_18_h_SA)\nSA_h_Huang_25 &lt;- prep_for_SA_GWAS(Huang_25_h_SA)\nSA_h_Huang_28 &lt;- prep_for_SA_GWAS(Huang_28_h_SA)\n\nSC_e0_Arya &lt;- prep_for_SC_GWAS(Arya_l_SA)\nSC_e0_Huang_18 &lt;- prep_for_SC_GWAS(Huang_18_l_SA)\nSC_e0_Huang_25 &lt;- prep_for_SC_GWAS(Huang_25_l_SA)\nSC_e0_Huang_28 &lt;- prep_for_SC_GWAS(Huang_28_l_SA)\n\nSC_h_Arya &lt;- prep_for_SC_GWAS(Arya_h_SA)\nSC_h_Huang_18 &lt;- prep_for_SC_GWAS(Huang_18_h_SA)\nSC_h_Huang_25 &lt;- prep_for_SC_GWAS(Huang_25_h_SA)\nSC_h_Huang_28 &lt;- prep_for_SC_GWAS(Huang_28_h_SA)\n\nif(!file.exists(\"data/Derived/GWAS_results/SA_e0_Arya.tsv.gz\")) {\nrun_GWAS(SA_e0_Arya)\nrun_GWAS(SA_e0_Huang_18)\nrun_GWAS(SA_e0_Huang_25)\nrun_GWAS(SA_e0_Huang_28)\nrun_GWAS(SA_h_Arya)\nrun_GWAS(SA_h_Huang_18)\nrun_GWAS(SA_h_Huang_25)\nrun_GWAS(SA_h_Huang_28)\n\nrun_GWAS(SC_e0_Arya)\nrun_GWAS(SC_e0_Huang_18)\nrun_GWAS(SC_e0_Huang_25)\nrun_GWAS(SC_e0_Huang_28)\nrun_GWAS(SC_h_Arya)\nrun_GWAS(SC_h_Huang_18)\nrun_GWAS(SC_h_Huang_25)\nrun_GWAS(SC_h_Huang_28)\n}\n\nSA_e0_Arya_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_e0_Arya.tsv.gz\") \nSA_e0_Huang_18_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_e0_Huang_18.tsv.gz\") \nSA_e0_Huang_25_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_e0_Huang_25.tsv.gz\") \nSA_e0_Huang_28_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_e0_Huang_28.tsv.gz\") \n\nSA_h_Arya_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_h_Arya.tsv.gz\") \nSA_h_Huang_18_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_h_Huang_18.tsv.gz\")\nSA_h_Huang_25_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_h_Huang_25.tsv.gz\")\nSA_h_Huang_28_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_h_Huang_28.tsv.gz\")\n\nSC_e0_Arya_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SC_e0_Arya.tsv.gz\") \nSC_e0_Huang_18_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SC_e0_Huang_18.tsv.gz\") \nSC_e0_Huang_25_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SC_e0_Huang_25.tsv.gz\") \nSC_e0_Huang_28_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SC_e0_Huang_28.tsv.gz\") \n\nSC_h_Arya_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SC_h_Arya.tsv.gz\") \nSC_h_Huang_18_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SC_h_Huang_18.tsv.gz\")\nSC_h_Huang_25_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SC_h_Huang_25.tsv.gz\")\nSC_h_Huang_28_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SC_h_Huang_28.tsv.gz\")\n\n\nHow many variants do we find that have notable associations with the SA and SC axes for life expectancy:\nTable SX. Genotype to phenotype associations detected by univariate GWAS, for the life expectancy sex-specificity and sexual concordance indices. The number of genomic regions indicates the number of SNPs found after LD pruning. The total row shows the number of candidate variants identified across all studies.\n\n\nShow the code\n# filter down to sig associations\n\nSA_e0_table &lt;-\n  bind_rows(\n    tibble(`p &lt; 1e-05 variants` = nrow(SA_e0_Arya_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SA_e0_Arya_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SA_e0_Arya_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SA_e0_Arya_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Measure = \"Sex-specificity\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SA_e0_Huang_18_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SA_e0_Huang_18_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SA_e0_Huang_18_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SA_e0_Huang_18_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sex-specificity\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SA_e0_Huang_25_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SA_e0_Huang_25_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SA_e0_Huang_25_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SA_e0_Huang_25_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n           mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sex-specificity\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SA_e0_Huang_28_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SA_e0_Huang_28_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SA_e0_Huang_28_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SA_e0_Huang_28_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n           mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sex-specificity\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n     tibble(`p &lt; 1e-05 variants` = nrow(SC_e0_Arya_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SC_e0_Arya_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SC_e0_Arya_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SC_e0_Arya_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n        mutate(Study = \"Arya et al 2010\",\n             Measure = \"Sexual concordance\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;%\n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SC_e0_Huang_18_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SC_e0_Huang_18_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SC_e0_Huang_18_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SC_e0_Huang_18_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n        mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sexual concordance\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SC_e0_Huang_25_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SC_e0_Huang_25_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SC_e0_Huang_25_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SC_e0_Huang_25_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n        mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sexual concordance\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SC_e0_Huang_28_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SC_e0_Huang_28_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SC_e0_Huang_28_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SC_e0_Huang_28_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n        mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sexual concordance\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;%  \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`))\n\n# how many unique variants have been detected?\nSA_p_05_SNPs_l &lt;-\n  bind_rows(\n    \n    SA_e0_Arya_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SA_e0_Huang_18_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SA_e0_Huang_25_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SA_e0_Huang_28_GWAS %&gt;% \n      filter(P &lt; 1e-05)\n  ) %&gt;% \n  distinct(SNP) %&gt;% \n  left_join(Pruned_variants %&gt;% mutate(Pruned_variant = \"YES\")) \n\nSC_p_05_SNPs_l &lt;-\n  bind_rows(\n    SC_e0_Arya_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SC_e0_Huang_18_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SC_e0_Huang_25_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SC_e0_Huang_28_GWAS %&gt;% \n      filter(P &lt; 1e-05)\n  ) %&gt;% \n  distinct(SNP) %&gt;% \n  left_join(Pruned_variants %&gt;% mutate(Pruned_variant = \"YES\")) \n\nSA_e0_table %&gt;% \n  add_row(Study = \"Totals\",\n          Measure = \"Sex-specificity\",\n          Temperature = \"\",\n          `Mating status` = \"\",\n          `p &lt; 1e-05 variants` = nrow(SA_p_05_SNPs_l),\n          `p &lt; 1e-05 genomic regions` = nrow(SA_p_05_SNPs_l %&gt;% filter(Pruned_variant == \"YES\")),\n          `p &lt; 1e-08 variants` = sum(SA_e0_table %&gt;% \n                                       filter(str_detect(Measure, \"spec\")) %&gt;% \n                                       pull(`p &lt; 1e-08 variants`)),\n          `p &lt; 1e-08 genomic regions` = sum(SA_e0_table %&gt;% \n                                                 filter(str_detect(Measure, \"spec\")) %&gt;% \n                                                 pull(`p &lt; 1e-08 genomic regions`))) %&gt;% \n  add_row(Study = \"Totals\",\n          Measure = \"Sexual concordance\",\n          Temperature = \"\",\n          `Mating status` = \"\",\n          `p &lt; 1e-05 variants` = nrow(SC_p_05_SNPs_l),\n          `p &lt; 1e-05 genomic regions` = nrow(SC_p_05_SNPs_l %&gt;% filter(Pruned_variant == \"YES\")),\n          `p &lt; 1e-08 variants` = sum(SA_e0_table %&gt;% \n                                       filter(str_detect(Measure, \"conc\")) %&gt;% \n                                       pull(`p &lt; 1e-08 variants`)),\n          `p &lt; 1e-08 genomic regions` = sum(SA_e0_table %&gt;% \n                                                 filter(str_detect(Measure, \"conc\")) %&gt;% \n                                                 pull(`p &lt; 1e-08 genomic regions`))) %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\nTable SX. Genotype to phenotype associations detected by univariate GWAS, for the lifespan equality sex-specificity and sexual concordance indices. The number of genomic regions indicates the number of SNPs found after LD pruning. The total row shows the number of candidate variants identified across all studies.\n\n\nShow the code\n# filter down to sig associations\n\nSA_h_table &lt;-\n  bind_rows(\n    tibble(`p &lt; 1e-05 variants` = nrow(SA_h_Arya_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SA_h_Arya_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SA_h_Arya_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SA_h_Arya_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n      mutate(Study = \"Arya et al 2010\",\n             Measure = \"Sex-specificity\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SA_h_Huang_18_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SA_h_Huang_18_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SA_h_Huang_18_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SA_h_Huang_18_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n      mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sex-specificity\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SA_h_Huang_25_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SA_h_Huang_25_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SA_h_Huang_25_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SA_h_Huang_25_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n           mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sex-specificity\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SA_h_Huang_28_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SA_h_Huang_28_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SA_h_Huang_28_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SA_h_Huang_28_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n           mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sex-specificity\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n     tibble(`p &lt; 1e-05 variants` = nrow(SC_h_Arya_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SC_h_Arya_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SC_h_Arya_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SC_h_Arya_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n        mutate(Study = \"Arya et al 2010\",\n             Measure = \"Sexual concordance\",\n             Temperature = \"25\",\n             `Mating status` = \"Virgin\") %&gt;%\n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SC_h_Huang_18_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SC_h_Huang_18_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SC_h_Huang_18_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SC_h_Huang_18_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;% \n        mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sexual concordance\",\n             Temperature = \"18\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SC_h_Huang_25_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SC_h_Huang_25_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SC_h_Huang_25_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SC_h_Huang_25_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n        mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sexual concordance\",\n             Temperature = \"25\",\n             `Mating status` = \"Mated\") %&gt;% \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`),\n    \n    tibble(`p &lt; 1e-05 variants` = nrow(SC_h_Huang_28_GWAS %&gt;% filter(P &lt; 1e-05)),\n           `p &lt; 1e-05 genomic regions` = nrow(inner_join(Pruned_variants, SC_h_Huang_28_GWAS %&gt;% filter(P &lt; 1e-05))),\n           `p &lt; 1e-08 variants` = nrow(filter(SC_h_Huang_28_GWAS, P &lt; 1e-08)),\n           `p &lt; 1e-08 genomic regions` = nrow(inner_join(Pruned_variants, SC_h_Huang_28_GWAS %&gt;% filter(P &lt; 1e-08)))) %&gt;%\n        mutate(Study = \"Huang et al 2020\",\n             Measure = \"Sexual concordance\",\n             Temperature = \"28\",\n             `Mating status` = \"Mated\") %&gt;%  \n      dplyr::select(Study, Measure, Temperature, `Mating status`,\n                    `p &lt; 1e-05 variants`, `p &lt; 1e-05 genomic regions`, \n                    `p &lt; 1e-08 variants`, `p &lt; 1e-08 genomic regions`))\n\n# how many unique variants have been detected?\nSA_p_05_SNPs_h &lt;-\n  bind_rows(\n    \n    SA_h_Arya_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SA_h_Huang_18_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SA_h_Huang_25_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SA_h_Huang_28_GWAS %&gt;% \n      filter(P &lt; 1e-05)\n  ) %&gt;% \n  distinct(SNP) %&gt;% \n  left_join(Pruned_variants %&gt;% mutate(Pruned_variant = \"YES\")) \n\nSC_p_05_SNPs_h &lt;-\n  bind_rows(\n    SC_h_Arya_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SC_h_Huang_18_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SC_h_Huang_25_GWAS %&gt;% \n      filter(P &lt; 1e-05),\n    \n    SC_h_Huang_28_GWAS %&gt;% \n      filter(P &lt; 1e-05)\n  ) %&gt;% \n  distinct(SNP) %&gt;% \n  left_join(Pruned_variants %&gt;% mutate(Pruned_variant = \"YES\")) \n\nSA_h_table %&gt;% \n  add_row(Study = \"Totals\",\n          Measure = \"Sex-specificity\",\n          Temperature = \"\",\n          `Mating status` = \"\",\n          `p &lt; 1e-05 variants` = nrow(SA_p_05_SNPs_h),\n          `p &lt; 1e-05 genomic regions` = nrow(SA_p_05_SNPs_h %&gt;% filter(Pruned_variant == \"YES\")),\n          `p &lt; 1e-08 variants` = sum(SA_h_table %&gt;% \n                                       filter(str_detect(Measure, \"spec\")) %&gt;% \n                                       pull(`p &lt; 1e-08 variants`)),\n          `p &lt; 1e-08 genomic regions` = sum(SA_h_table %&gt;% \n                                                 filter(str_detect(Measure, \"spec\")) %&gt;% \n                                                 pull(`p &lt; 1e-08 genomic regions`))) %&gt;% \n  add_row(Study = \"Totals\",\n          Measure = \"Sexual concordance\",\n          Temperature = \"\",\n          `Mating status` = \"\",\n          `p &lt; 1e-05 variants` = nrow(SC_p_05_SNPs_h),\n          `p &lt; 1e-05 genomic regions` = nrow(SC_p_05_SNPs_h %&gt;% filter(Pruned_variant == \"YES\")),\n          `p &lt; 1e-08 variants` = sum(SA_h_table %&gt;% \n                                       filter(str_detect(Measure, \"conc\")) %&gt;% \n                                       pull(`p &lt; 1e-08 variants`)),\n          `p &lt; 1e-08 genomic regions` = sum(SA_h_table %&gt;% \n                                                 filter(str_detect(Measure, \"conc\")) %&gt;% \n                                                 pull(`p &lt; 1e-08 genomic regions`))) %&gt;% \n  kable() %&gt;% \n  kable_styling()"
  },
  {
    "objectID": "sex_specific_effects.html#applying-cross-phenotype-meta-analysis",
    "href": "sex_specific_effects.html#applying-cross-phenotype-meta-analysis",
    "title": "Sex-specific effects",
    "section": "Applying cross-phenotype meta-analysis",
    "text": "Applying cross-phenotype meta-analysis\n\nGenerate the genetic correlation matrix\nWe calculate the genetic correlations between traits using both the line mean and SNP effect size comparisons. We use the SNP correlations following Zhu et al (2015) and show these in the below plots. Note that while the two approaches produce results that have a strong positive correlation, there are small differences that will affect downstream analyses.\nBuild the sex-specificity correlations matrices\n\n\nShow the code\n# use the BETA coefficients to build the SNP correlation matrix\n\nSNP_SA_data_e0 &lt;-\n  bind_rows(\n    SA_e0_Arya_GWAS %&gt;% \n      mutate(Study = \"Arya\", Temperature = 25),\n    SA_e0_Huang_18_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 18),\n    SA_e0_Huang_25_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 25),\n    SA_e0_Huang_28_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 28)) %&gt;% \n  dplyr::select(SNP, BETA, Study, Temperature) %&gt;% \n  pivot_wider(values_from = BETA, names_from = c(Study, Temperature))\n\nSNP_SA_data_e0_LD_pruned &lt;- SNP_SA_data_e0 %&gt;% right_join(Pruned_variants) %&gt;% \n  dplyr::select(-SNP) \n\nSNP_SA_data_h &lt;-\n  bind_rows(\n    SA_h_Arya_GWAS %&gt;% \n      mutate(Study = \"Arya\", Temperature = 25),\n    SA_h_Huang_18_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 18),\n    SA_h_Huang_25_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 25),\n    SA_h_Huang_28_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 28)) %&gt;% \n  dplyr::select(SNP, BETA, Study, Temperature) %&gt;% \n  pivot_wider(values_from = BETA, names_from = c(Study, Temperature)) \n\nSNP_SA_data_h_LD_pruned &lt;- SNP_SA_data_h %&gt;% right_join(Pruned_variants) %&gt;% \n  dplyr::select(-SNP)\n  \n\nSNP_SA_e0_corr_matrix &lt;- cor(SNP_SA_data_e0_LD_pruned, use = \"pairwise.complete.obs\", method = \"spearman\")\nSNP_SA_h_corr_matrix &lt;- cor(SNP_SA_data_h_LD_pruned, use = \"pairwise.complete.obs\", method = \"spearman\")\n\nSA_e0_line_data &lt;-\n  bind_rows(Arya_l_SA %&gt;% mutate(Study = \"Arya_25\"),\n            Huang_18_l_SA %&gt;% mutate(Study = \"Huang_18\"),\n            Huang_25_l_SA %&gt;% mutate(Study = \"Huang_25\"),\n            Huang_28_l_SA %&gt;% mutate(Study = \"Huang_28\")) %&gt;% \n  dplyr::select(line, Study, SA_axis) %&gt;% \n  pivot_wider(values_from = SA_axis, names_from = Study) %&gt;% \n  dplyr::select(-line)\n\nSA_h_line_data &lt;-\n  bind_rows(Arya_h_SA %&gt;% mutate(Study = \"Arya_25\"),\n            Huang_18_h_SA %&gt;% mutate(Study = \"Huang_18\"),\n            Huang_25_h_SA %&gt;% mutate(Study = \"Huang_25\"),\n            Huang_28_h_SA %&gt;% mutate(Study = \"Huang_28\")) %&gt;% \n  dplyr::select(line, Study, SA_axis) %&gt;% \n  pivot_wider(values_from = SA_axis, names_from = Study) %&gt;% \n  dplyr::select(-line)\n\nSA_line_e0_corr_matrix &lt;- cor(SA_e0_line_data, use = \"pairwise.complete.obs\", method = \"spearman\")\nSA_line_h_corr_matrix &lt;- cor(SA_h_line_data, use = \"pairwise.complete.obs\", method = \"spearman\")\n\n\nBuild the SC correlations matrices\n\n\nShow the code\n# use the BETA coefficients to build the SNP correlation matrix\n\nSNP_SC_data_e0 &lt;-\n  bind_rows(\n    SC_e0_Arya_GWAS %&gt;% \n      mutate(Study = \"Arya\", Temperature = 25),\n    SC_e0_Huang_18_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 18),\n    SC_e0_Huang_25_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 25),\n    SC_e0_Huang_28_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 28)) %&gt;% \n  dplyr::select(SNP, BETA, Study, Temperature) %&gt;% \n  pivot_wider(values_from = BETA, names_from = c(Study, Temperature)) \n\nSNP_SC_data_e0_LD_pruned &lt;- SNP_SC_data_e0 %&gt;% right_join(Pruned_variants)\n\nSNP_SC_data_h &lt;-\n  bind_rows(\n    SC_h_Arya_GWAS %&gt;% \n      mutate(Study = \"Arya\", Temperature = 25),\n    SC_h_Huang_18_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 18),\n    SC_h_Huang_25_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 25),\n    SC_h_Huang_28_GWAS %&gt;% \n      mutate(Study= \"Huang\", Temperature= 28)) %&gt;% \n  dplyr::select(SNP, BETA, Study, Temperature) %&gt;% \n  pivot_wider(values_from = BETA, names_from = c(Study, Temperature))\n\nSNP_SC_data_h_LD_pruned &lt;- SNP_SC_data_h %&gt;% right_join(Pruned_variants)\n  \n\nSNP_SC_e0_corr_matrix &lt;- cor(SNP_SC_data_e0_LD_pruned %&gt;% dplyr::select(-SNP), use = \"pairwise.complete.obs\", method = \"spearman\")\nSNP_SC_h_corr_matrix &lt;- cor(SNP_SC_data_h_LD_pruned  %&gt;% dplyr::select(-SNP), use = \"pairwise.complete.obs\", method = \"spearman\")\n\nSC_e0_line_data &lt;-\n  bind_rows(Arya_l_SA %&gt;% mutate(Study = \"Arya_25\"),\n            Huang_18_l_SA %&gt;% mutate(Study = \"Huang_18\"),\n            Huang_25_l_SA %&gt;% mutate(Study = \"Huang_25\"),\n            Huang_28_l_SA %&gt;% mutate(Study = \"Huang_28\")) %&gt;% \n  dplyr::select(line, Study, SC_axis) %&gt;% \n  pivot_wider(values_from = SC_axis, names_from = Study) %&gt;% \n  dplyr::select(-line)\n\nSC_h_line_data &lt;-\n  bind_rows(Arya_h_SA %&gt;% mutate(Study = \"Arya_25\"),\n            Huang_18_h_SA %&gt;% mutate(Study = \"Huang_18\"),\n            Huang_25_h_SA %&gt;% mutate(Study = \"Huang_25\"),\n            Huang_28_h_SA %&gt;% mutate(Study = \"Huang_28\")) %&gt;% \n  dplyr::select(line, Study, SC_axis) %&gt;% \n  pivot_wider(values_from = SC_axis, names_from = Study) %&gt;% \n  dplyr::select(-line)\n\nSC_line_e0_corr_matrix &lt;- cor(SC_e0_line_data, use = \"pairwise.complete.obs\", method = \"spearman\")\nSC_line_h_corr_matrix &lt;- cor(SC_h_line_data, use = \"pairwise.complete.obs\", method = \"spearman\")\n\n\n\n\nCalculate meta-analytic test statistics\nThe purpose of these meta-analysis is to search for SNPs that have a) sex-specific and b) sexually concordant effects on ageing.\nTo conduct CPASSOC for a given SNP, we need a summary statistic from each GWAS. A different number of lines were included in each GWAS, which can cause small differences in the number of SNPs assessed. We therefore prune the list of SNPs to those included in all univariate analyses. After pruning, 1,619,501 SNPs remain.\nSex-specificity and sexual concordance for life expectancy\nFirst run CPASSOC for the SA axis\n\n\nShow the code\nSA_Arya_l_T &lt;- SA_e0_Arya_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya = T)\n  \nSA_Huang_18_l_T &lt;- SA_e0_Huang_18_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_18 = T)\n\nSA_Huang_25_l_T &lt;- SA_e0_Huang_25_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_25 = T)\n\nSA_Huang_28_l_T &lt;- SA_e0_Huang_28_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_28 = T)\n\nSA_e0_t_stats &lt;-\n  SA_Arya_l_T %&gt;%\n  inner_join(SA_Huang_18_l_T, by = \"SNP\") %&gt;%\n  inner_join(SA_Huang_25_l_T, by = \"SNP\") %&gt;%\n  inner_join(SA_Huang_28_l_T, by = \"SNP\") \n\n\nSA_e0_t_stat_values &lt;-\n  SA_e0_t_stats %&gt;% \n  dplyr::select(2:5)\n\nSample_size_SA &lt;- c(165, 183, 186, 177) \n\nif(!file.exists(\"data/Derived/GWAS_results/SA_e0_meta_results.csv\")){\n\n# run the homogeneous effect meta-analysis\n\nS_hom &lt;- SHom(SA_e0_t_stat_values, Sample_size_SA, SNP_SA_e0_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary for different traits e.g. if a SNP has a sex or environment opposite effect on lifespan\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_SA, SNP_SA_e0_corr_matrix);\n\nS_het &lt;- SHet(SA_e0_t_stat_values, Sample_size_SA, SNP_SA_e0_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n\nSA_e0_meta_results &lt;- \n  SA_e0_t_stats %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) # add the unadjusted p values\n\nwrite_csv(SA_e0_meta_results, \"data/Derived/GWAS_results/SA_e0_meta_results.csv\")\n\n} else SA_e0_meta_results &lt;- read_csv(\"data/Derived/GWAS_results/SA_e0_meta_results.csv\")\n\n\nNow run it for the SC axis\n\n\nShow the code\nSC_Arya_l_T &lt;- SC_e0_Arya_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya = T)\n  \nSC_Huang_18_l_T &lt;- SC_e0_Huang_18_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_18 = T)\n\nSC_Huang_25_l_T &lt;- SC_e0_Huang_25_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_25 = T)\n\nSC_Huang_28_l_T &lt;- SC_e0_Huang_28_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_28 = T)\n\nSC_e0_t_stats &lt;-\n  SC_Arya_l_T %&gt;%\n  inner_join(SC_Huang_18_l_T, by = \"SNP\") %&gt;%\n  inner_join(SC_Huang_25_l_T, by = \"SNP\") %&gt;%\n  inner_join(SC_Huang_28_l_T, by = \"SNP\") \n\nSC_e0_t_stat_values &lt;-\n  SC_e0_t_stats %&gt;% \n  dplyr::select(2:5)\n\nSample_size_SC &lt;- c(165, 183, 186, 177) \n\nif(!file.exists(\"data/Derived/GWAS_results/SC_e0_meta_results.csv\")) {\n\n# run the homogeneous effect meta-analysis\n\nS_hom &lt;- SHom(SC_e0_t_stat_values, Sample_size_SC, SNP_SC_e0_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary for different traits e.g. if a SNP has a sex or environment opposite effect on lifespan\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_SC, SNP_SC_e0_corr_matrix);\n\nS_het &lt;- SHet(SC_e0_t_stat_values, Sample_size_SC, SNP_SC_e0_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n\nSC_e0_meta_results &lt;- \n  SC_e0_t_stats %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) # add the unadjusted p values\n\nwrite_csv(SC_e0_meta_results, \"data/Derived/GWAS_results/SC_e0_meta_results.csv\")\n\n} else SC_e0_meta_results &lt;- read_csv(\"data/Derived/GWAS_results/SC_e0_meta_results.csv\")\n\n\nSex-specificity and sexual concordance for lifespan equality\nSex-specific effects\n\n\nShow the code\n# lifespan equality\n\nSA_Arya_h_T &lt;- SA_h_Arya_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya = T)\n  \nSA_Huang_18_h_T &lt;- SA_h_Huang_18_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_18 = T)\n\nSA_Huang_25_h_T &lt;- SA_h_Huang_25_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_25 = T)\n\nSA_Huang_28_h_T &lt;- SA_h_Huang_28_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_28 = T)\n\nSA_h_t_stats &lt;-\n  SA_Arya_h_T %&gt;%\n  inner_join(SA_Huang_18_h_T, by = \"SNP\") %&gt;%\n  inner_join(SA_Huang_25_h_T, by = \"SNP\") %&gt;%\n  inner_join(SA_Huang_28_h_T, by = \"SNP\") \n\n\nSA_h_t_stat_values &lt;-\n  SA_h_t_stats %&gt;% \n  dplyr::select(2:5)\n\nif(!file.exists(\"data/Derived/GWAS_results/SA_h_meta_results.csv\")) {\n\nS_hom &lt;- SHom(SA_h_t_stat_values, Sample_size_SA, SNP_SA_h_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary for different traits (probably not such a problem here given all traits we investigate are some version of life expectancy)\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_SA, SNP_SA_h_corr_matrix);\n\nS_het &lt;- SHet(SA_h_t_stat_values, Sample_size_SA, SNP_SA_h_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n\nSA_h_meta_results &lt;- \n  SA_h_t_stats %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) # add the unadjusted p values\n\nwrite_csv(SA_h_meta_results, \"data/Derived/GWAS_results/SA_h_meta_results.csv\")\n} else SA_h_meta_results &lt;- read_csv(\"data/Derived/GWAS_results/SA_h_meta_results.csv\")\n\n\nSexual concordance\n\n\nShow the code\n# lifespan equality\n\nSC_Arya_h_T &lt;- SC_h_Arya_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya = T)\n  \nSC_Huang_18_h_T &lt;- SC_h_Huang_18_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_18 = T)\n\nSC_Huang_25_h_T &lt;- SC_h_Huang_25_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_25 = T)\n\nSC_Huang_28_h_T &lt;- SC_h_Huang_28_GWAS %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_28 = T)\n\nSC_h_t_stats &lt;-\n  SC_Arya_h_T %&gt;%\n  inner_join(SC_Huang_18_h_T, by = \"SNP\") %&gt;%\n  inner_join(SC_Huang_25_h_T, by = \"SNP\") %&gt;%\n  inner_join(SC_Huang_28_h_T, by = \"SNP\") \n\n\nSC_h_t_stat_values &lt;-\n  SC_h_t_stats %&gt;% \n  dplyr::select(2:5)\n\nif(!file.exists(\"data/Derived/GWAS_results/SC_h_meta_results.csv\")) {\n\nS_hom &lt;- SHom(SC_h_t_stat_values, Sample_size_SC, SNP_SC_h_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary for different traits (probably not such a problem here given all traits we investigate are some version of life expectancy)\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_SC, SNP_SC_h_corr_matrix);\n\nS_het &lt;- SHet(SC_h_t_stat_values, Sample_size_SC, SNP_SC_h_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n\nSC_h_meta_results &lt;- \n  SC_h_t_stats %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) # add the unadjusted p values\n\nwrite_csv(SC_h_meta_results, \"data/Derived/GWAS_results/SC_h_meta_results.csv\")\n} else SC_h_meta_results &lt;- read_csv(\"data/Derived/GWAS_results/SC_h_meta_results.csv\")"
  },
  {
    "objectID": "sex_specific_effects.html#visualise-the-results",
    "href": "sex_specific_effects.html#visualise-the-results",
    "title": "Sex-specific effects",
    "section": "Visualise the results",
    "text": "Visualise the results\nWe combine GWAS summary statistics calculated from lifespan data measured across different contexts. It’s possible that some SNPs have G x E interactions that would lead to a heterogeneous effect across phenotypes. We therefore utilise the S_het calculated p-values.\nFirst lets show the effect of CPASSOC on the number of variants found to be associated with life expectancy and lifespan equality.\nTable SX the number of variants associated with the sex-specificity index at various significance thresholds, estimated by univariate GWAS or CPASSOC. The number of genomic regions indicates the number of SNPs found after LD pruning.\n\n\nShow the code\ntibble(Analysis = c(\"CPASSOC\", \"Univariate\", \"CPASSOC\", \"Univariate\"),\n       Trait = c(\"Life expectancy\", \"Life expectancy\", \"Lifespan equality\", \"Lifespan equality\"),\n       `p &lt; 1e-05 variants` = c(sum(SA_e0_meta_results$meta_p_het &lt; 1e-05),\n                                   nrow(SA_p_05_SNPs_l),\n                                   sum(SA_h_meta_results$meta_p_het &lt; 1e-05),\n                                   nrow(SA_p_05_SNPs_h)),\n       `p &lt; 1e-05 genomic regions` = c(nrow(SA_e0_meta_results %&gt;% filter(meta_p_het &lt; 1e-05) %&gt;% inner_join(Pruned_variants)),\n                                   nrow(SA_p_05_SNPs_l %&gt;% filter(Pruned_variant == \"YES\")),\n                                   nrow(SA_h_meta_results %&gt;% filter(meta_p_het &lt; 1e-05) %&gt;% inner_join(Pruned_variants)),\n                                   nrow(SA_p_05_SNPs_h %&gt;% filter(Pruned_variant == \"YES\"))),\n       `p &lt; 1e-08 variants` = c(sum(SA_e0_meta_results$meta_p_het &lt; 1e-08),\n                                   sum(SA_e0_table %&gt;% filter(str_detect(Measure, \"spec\")) %&gt;% pull(`p &lt; 1e-08 variants`)),\n                                   sum(SA_h_meta_results$meta_p_het &lt; 1e-08),\n                                   sum(SA_h_table %&gt;% filter(str_detect(Measure, \"spec\")) %&gt;% pull(`p &lt; 1e-08 variants`))),\n       `p &lt; 1e-08 genomic regions` = c(nrow(SA_e0_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% inner_join(Pruned_variants)),\n                                   sum(SA_e0_table %&gt;% filter(str_detect(Measure, \"spec\")) %&gt;% pull(`p &lt; 1e-08 genomic regions`)),\n                                   nrow(SA_h_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% inner_join(Pruned_variants)),\n                                   sum(SA_h_table %&gt;% filter(str_detect(Measure, \"spec\")) %&gt;% pull(`p &lt; 1e-08 genomic regions`))))  %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\nTable SX the number of variants associated with the sexual concordance index at various significance thresholds, estimated by univariate GWAS or CPASSOC. The number of genomic regions indicates the number of SNPs found after LD pruning.\n\n\nShow the code\ntibble(Analysis = c(\"CPASSOC\", \"Univariate\", \"CPASSOC\", \"Univariate\"),\n       Trait = c(\"Life expectancy\", \"Life expectancy\", \"Lifespan equality\", \"Lifespan equality\"),\n       `p &lt; 1e-05 variants` = c(sum(SC_e0_meta_results$meta_p_het &lt; 1e-05),\n                                   nrow(SC_p_05_SNPs_l),\n                                   sum(SC_h_meta_results$meta_p_het &lt; 1e-05),\n                                   nrow(SC_p_05_SNPs_h)),\n       `p &lt; 1e-05 genomic regions` = c(nrow(SC_e0_meta_results %&gt;% filter(meta_p_het &lt; 1e-05) %&gt;% inner_join(Pruned_variants)),\n                                   nrow(SC_p_05_SNPs_l %&gt;% filter(Pruned_variant == \"YES\")),\n                                   nrow(SC_h_meta_results %&gt;% filter(meta_p_het &lt; 1e-05) %&gt;% inner_join(Pruned_variants)),\n                                   nrow(SC_p_05_SNPs_h %&gt;% filter(Pruned_variant == \"YES\"))),\n       `p &lt; 1e-08 variants` = c(sum(SC_e0_meta_results$meta_p_het &lt; 1e-08),\n                                   sum(SA_e0_table %&gt;% filter(str_detect(Measure, \"conc\")) %&gt;% pull(`p &lt; 1e-08 variants`)),\n                                   sum(SC_h_meta_results$meta_p_het &lt; 1e-08),\n                                   sum(SA_h_table %&gt;% filter(str_detect(Measure, \"conc\")) %&gt;% pull(`p &lt; 1e-08 variants`))),\n       `p &lt; 1e-08 genomic regions` = c(nrow(SC_e0_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% inner_join(Pruned_variants)),\n                                   sum(SA_e0_table %&gt;% filter(str_detect(Measure, \"conc\")) %&gt;% pull(`p &lt; 1e-08 genomic regions`)),\n                                   nrow(SC_h_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% inner_join(Pruned_variants)),\n                                   sum(SA_h_table %&gt;% filter(str_detect(Measure, \"conc\")) %&gt;% pull(`p &lt; 1e-08 genomic regions`))))  %&gt;% \n  kable() %&gt;% \n  kable_styling()\n\n\nTable SX genes that encompass or are very close to the genetic variants that have sex-specific associations with life expectancy.\n\n\nShow the code\n# join gene annotations with the list of analysed variants \n# note that some SNPs are associated with &gt;1 gene, because the gene annotations overlap (I think) or the variant is close to multiple annotated genes. Others are not near any known genes, producing NAs.\n\nSA_e0_variants &lt;-\n  SA_e0_meta_results  %&gt;%\n  filter(meta_p_het &lt; 1e-08) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het) %&gt;%\n  left_join(annotations %&gt;% filter(distance.to.gene &lt;= 500)) %&gt;% \n  mutate(meta_p_het = round(meta_p_het*10^11, 2)/10^11,\n         S_het = round(S_het, 3)) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het, FBID, gene_name, site.class, distance.to.gene)\n\nSA_e0_variants %&gt;% \n  my_data_table()\n\n\nTable SX genes that encompass or are very close to the genetic variants that have sexually concordant associations with life expectancy.\n\n\nShow the code\n# join gene annotations with the list of analysed variants \n# note that some SNPs are associated with &gt;1 gene, because the gene annotations overlap (I think) or the variant is close to multiple annotated genes. Others are not near any known genes, producing NAs.\n\nSC_e0_variants &lt;-\n  SC_e0_meta_results  %&gt;%\n  filter(meta_p_het &lt; 1e-08) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het) %&gt;%\n  left_join(annotations %&gt;% filter(distance.to.gene &lt;= 500)) %&gt;% \n  mutate(meta_p_het = round(meta_p_het*10^18, 2)/10^18,\n         S_het = round(S_het, 3)) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het, FBID, gene_name, site.class, distance.to.gene)\n\nSC_e0_variants %&gt;% \n  my_data_table()\n\n\nTable SX genes that encompass or are very close to the genetic variants that have sex-specific associations with lifespan equality.\n\n\nShow the code\n# join gene annotations with the list of analysed variants \n# note that some SNPs are associated with &gt;1 gene, because the gene annotations overlap (I think) or the variant is close to multiple annotated genes. Others are not near any known genes, producing NAs.\n\nSA_h_variants &lt;-\n  SA_h_meta_results  %&gt;%\n  filter(meta_p_het &lt; 1e-08) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het) %&gt;%\n  left_join(annotations %&gt;% filter(distance.to.gene &lt;= 500)) %&gt;% \n  mutate(meta_p_het = round(meta_p_het*10^8, 4)/10^8,\n         S_het = round(S_het, 3)) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het, FBID, gene_name, site.class, distance.to.gene)\n\nSA_h_variants %&gt;% \n  my_data_table()\n\n\nTable SX genes that encompass or are very close to the genetic variants that have sexually concordant associations with lifespan equality.\n\n\nShow the code\n# join gene annotations with the list of analysed variants \n# note that some SNPs are associated with &gt;1 gene, because the gene annotations overlap (I think) or the variant is close to multiple annotated genes. Others are not near any known genes, producing NAs.\n\nSC_h_variants &lt;-\n  SC_h_meta_results  %&gt;%\n  filter(meta_p_het &lt; 1e-08) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het) %&gt;%\n  left_join(annotations %&gt;% filter(distance.to.gene &lt;= 500)) %&gt;% \n  mutate(meta_p_het = round(meta_p_het*10^8, 4)/10^8,\n         S_het = round(S_het, 3)) %&gt;% \n  dplyr::select(SNP, S_het, meta_p_het, FBID, gene_name, site.class, distance.to.gene)\n\nSC_h_variants %&gt;% \n  my_data_table()\n\n\nNow lets build some ‘Manhattan plots’ to show where these significant associations can be found:\n\n\nShow the code\nSA_e0_results &lt;- \n  SA_e0_meta_results %&gt;% \n  inner_join(Pruned_variants) %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  mutate(logp = -log10(P))\n\nSC_e0_results &lt;- \n  SC_e0_meta_results %&gt;% \n  inner_join(Pruned_variants) %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  mutate(logp = -log10(P))\n\nSA_h_results &lt;- \n  SA_h_meta_results %&gt;% \n  inner_join(Pruned_variants) %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  mutate(logp = -log10(P))\n\nSC_h_results &lt;- \n  SC_h_meta_results %&gt;% \n  inner_join(Pruned_variants) %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  mutate(logp = -log10(P))\n\n# plot the results using the Manhattan plot custom function we defined earlier\n\nSA_e0_het_plot &lt;- \n  build_manhattan_plot(SA_e0_results) +\n  labs(title = \"SA axis for life expectancy\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 15), expand = c(0, 0)) + \n  xlab(NULL)\n\nSC_e0_het_plot &lt;- \n  build_manhattan_plot(SC_e0_results) +\n  labs(title = \"SC axis for life expectancy\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 15), expand = c(0, 0))\n\nSA_h_het_plot &lt;-\n  build_manhattan_plot(SA_h_results) +\n  labs(title = \"SA axis for lifespan equality\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 15), expand = c(0, 0)) +\n  xlab(NULL)\n\nSC_h_het_plot &lt;-\n  build_manhattan_plot(SC_h_results) +\n  labs(title = \"SC axis for lifespan equality\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5)) +\n  scale_y_continuous(limits = c(0, 15), expand = c(0, 0))\n\nSA_e0_het_plot + SA_h_het_plot + SC_e0_het_plot + SC_h_het_plot + \n plot_layout(ncol = 2) + plot_annotation(tag_levels = \"A\")\n\n\nFigure XX. Manhattan plot showing the -Log10 p-value for each locus’ sex-specific effect and sexually concordant effect on life expectancy (A and C) and lifespan equality (C and D).\nPlot the univariate effect sizes for each of the SNPs with a sexually concordant association with life expectancy at the genome-wide significance threshold (p &lt; \\(10^{-8}\\)) after CPASSOC.\n\n\nShow the code\nSNP_SC_heatmap_e0 &lt;-\n  SNP_SC_data_e0 %&gt;% \n  inner_join(\n    SC_e0_meta_results %&gt;% \n      filter(meta_p_het &lt; 1e-08) %&gt;% \n      dplyr::select(SNP) %&gt;% \n      inner_join(Pruned_variants))\n\nrow_name &lt;- SNP_SC_heatmap_e0$SNP\nSNP_SC_heatmap_e0 &lt;- SNP_SC_heatmap_e0 %&gt;% dplyr::select(-SNP) %&gt;% as.matrix()\nrownames(SNP_SC_heatmap_e0) &lt;- row_name\n\nbreaksList &lt;- seq(-0.4, 0.4, by = 0.001)\n\nannotation_SNPs &lt;- \n  SC_e0_meta_results %&gt;% filter(meta_p_het &lt; 1e-08) %&gt;% dplyr::select(SNP) %&gt;% \n  mutate(Chromosome = case_when(str_detect(SNP, \"2L\") ~ \"2L\",\n                                str_detect(SNP, \"2R\") ~ \"2R\",\n                                str_detect(SNP, \"3L\") ~ \"3L\",\n                                str_detect(SNP, \"3R\") ~ \"3R\",\n                                str_detect(SNP, \"X\") ~ \"X\"))\n\nannotation_studies &lt;- \n  tibble(Study = c(\"Arya_25\",\n                   \"Huang_18\",\n                   \"Huang_25\",\n                   \"Huang_28\"),\n         Temperature = c(\"25\",\n                         \"18\",\n                         \"25\",\n                         \"28\")) %&gt;% \n  mutate(Mating = case_when(str_detect(Study, \"Arya\") ~ \"NO\",\n                             str_detect(Study, \"Huang\") ~ \"Throughout life\"),\n         Author = str_extract(Study, \".*(?=\\\\_)\"))\n\n\n# create a study annotation column, need this to be a data.frame rather than a tibble for some reason \n\nStudy_details &lt;- annotation_studies %&gt;%\n  as.data.frame() %&gt;% \n  dplyr::select(Study, Temperature, Mating)\n\nmy_categories &lt;- data.frame(row.names = Study_details[, 1], Temperature = Study_details[, 2],\n                            Mating = Study_details[, 3])\n\nmy_colors &lt;- list(Temperature = c(\"18\" = \"#7bbcd5\", # sailboat colours from pnw\n                                  \"23\" = \"#d0e2af\",\n                                  \"25\" = \"#f5db99\",\n                                  \"28\" = \"#e89c81\"),\n                  Mating = c(\"NO\" = \"#f8e3d1\", # Shuksan from pnw\n                             \"Early life\" = \"#d7b1c5\",\n                             \"Throughout life\" = \"#ac8eab\"),\n                  Chromosome = c(\"2L\" = \"#d8aedd\", # lake colours from pnw\n                                 \"2R\" = \"#cb74ad\",\n                                 \"3L\" = \"#11c2b5\",\n                                 \"3R\" = \"#72e1e1\",\n                                 \"X\" = \"#fbcc74\"))\n# create a SNP annotation column\n\nSNP_details &lt;- annotation_SNPs %&gt;%\n  as.data.frame()\n\nmy_SNP_categories &lt;- data.frame(row.names = SNP_details[, 1], Chromosome = SNP_details[, 2])\n\nmy_col_names &lt;- c(\"Arya et al\", \"Huang et al\", \"Huang et al\", \"Huang et al\")\n\n\npheatmap(SNP_SC_heatmap_e0, breaks = breaksList, \n         main = \"\", legend_labels = c(\"-1\", \"-0.5\", \"0\", \"0.5\", \"Genetic correlation\\n\"),\n         color = colorRampPalette(rev(met.brewer(\"Benedictus\", direction = 1)))(length(breaksList)),\n         legend = TRUE, cutree_rows = 3, cutree_cols = 3, \n         angle_col = 45, border_color = \"white\",\n         annotation_col = my_categories, annotation_colors = my_colors, annotation_row = my_SNP_categories,\n         fontsize = 8, labels_col = my_col_names)\n\n\nFigure XX. univariate effect sizes for each of the SNPs with a sexually concordant association with life expectancy at the genome-wide significance threshold (p &lt; \\(0.05^{-8}\\)) after CPASSOC. Effect sizes are expressed in standard deviations from the mean life expectancy found in each study. Studies are clustered by similiarity in SNP effects on the X axis, while SNPs are clustered by similarity in effect size across studies on the Y axis. Positive effect sizes indicate that the minor allele increases life expectancy in the conditions the study was performed in."
  },
  {
    "objectID": "gemma.html",
    "href": "gemma.html",
    "title": "Gemma",
    "section": "",
    "text": "So, I didn’t end up using Gemma, but this does provide the cleanup code to run plink quality control, imputation and LD pruning.\nShow the code\n# helper function to pass commands to the terminal\n# Note that we set `intern = TRUE`, and pass the result of `system()` to `cat()`, \n# ensuring that the Terminal output will be printed in this knitr report. \nrun_command &lt;- function(shell_command, wd = getwd(), path = \"\"){\n  cat(system(glue(\"cd \", wd, path, \"\\n\",shell_command), intern = TRUE), sep = '\\n')\n}\n\nplink &lt;- paste(getwd(), \"code/macOS/plink\", sep = \"/\") #macOS\nbeagle &lt;- \n  bigsnpr::download_beagle(\n    dir = \"/Users/tkeaney/Library/CloudStorage/OneDrive-JGU/Postdoc/DGRP_lifespan/DGRP_lifespan_inequality/code/macOS\") \n# only need to download this once - change path depending on operating system"
  },
  {
    "objectID": "gemma.html#cleaning-the-snp-data",
    "href": "gemma.html#cleaning-the-snp-data",
    "title": "Gemma",
    "section": "Cleaning the SNP data",
    "text": "Cleaning the SNP data\n\n\nShow the code\noutput_directory &lt;-  paste(getwd(), \"data/Derived/plink_output\", sep = \"/\")\n\n# Use Plink to clean and subset the DGRP's SNP data as follows:\n# Only keep SNPs for which at least 90% of the 205 DGRP lines were successfully genotyped (--geno 0.1)\n# Only keep SNPs with a minor allele frequency of 0.05 or higher (--maf 0.05) across the 205 lines\n# Write the processed BIM/BED/FAM files to the data/Derived/plink_output directory\n\nrun_command(glue(\"{plink} --bfile dgrp2\",\n                 \" --geno 0.1 --maf 0.05 --allow-no-sex\", \n                 \" --make-bed --out {shQuote(output_directory)}/dgrp2_QC_all_lines\"), path = \"/data/Input/bfiles/\")\n\n# Use the shell command 'sed' to remove underscores from the DGRP line names in the .fam file (e.g. 'line_120' becomes 'line120')\n# Otherwise, these underscores cause trouble when we need to convert from PLINK to vcf format (vcf format uses underscore as a separator)\nfor(i in 1:2) run_command(\"sed -i '' 's/_//' dgrp2_QC_all_lines.fam\", path = \"/data/Derived/plink_output/\")"
  },
  {
    "objectID": "gemma.html#imputation-of-missing-genotypes",
    "href": "gemma.html#imputation-of-missing-genotypes",
    "title": "Gemma",
    "section": "Imputation of missing genotypes",
    "text": "Imputation of missing genotypes\n\n\nShow the code\n# imputation with the below optimisation took about an hour on my computer, which is not especially powerful\n\nsnp_beagleImpute(beagle, plink, \n                 bedfile.in = \"data/Derived/plink_output/dgrp2_QC_all_lines.bed\", \n                 bedfile.out = \"data/Derived/plink_output/dgrp2_QC_all_lines_imputed.bed\",\n                 ncores = 4, \n                 memory.max = 16)\n\n# assign a sex of 'female' to all the DGRP lines (Beagle removes the sex, and it seems PLINK needs individuals to have a sex, \n  # despite PLINK having a command called --allow-no-sex)\n  run_command(\"sed -i '' 's/    0   0   0/  0   0   2/' dgrp2_QC_all_lines_imputed.fam\", path = \"/data/Derived/plink_output/\")\n  \n  # Re-write the .bed file, to make sure the MAF threshold and minor/major allele designations are correctly assigned post-Beagle\n  run_command(glue(\"{plink} --bfile dgrp2_QC_all_lines_imputed\",\n                   \" --geno 0.1 --maf 0.05 --allow-no-sex\", \n                   \" --make-bed --out dgrp2_QC_all_lines_imputed_correct\"), path = \"/data/Derived/plink_output/\")"
  },
  {
    "objectID": "gemma.html#create-a-reduced-list-of-ld-pruned-snps-with-plink",
    "href": "gemma.html#create-a-reduced-list-of-ld-pruned-snps-with-plink",
    "title": "Gemma",
    "section": "Create a reduced list of LD-pruned SNPs with PLINK",
    "text": "Create a reduced list of LD-pruned SNPs with PLINK\nTo keep the computation time and memory usage manageable, we do not compute the effect sizes for every variant that passed the MAF and missingness quality control step above (1,646,661 variants). Instead, we estimate the effect sizes for a subset of variants that were approximately in linkage disequilibrium. We identified this LD-pruned set of variants using the PLINK arguments --indep-pairwise 100 10 0.2, which prunes within 100kB sliding windows, sliding 10 variants along with each step, and allows a maximum pairwise correlation (\\(r^2\\)) threshold of 0.2 between loci within the window. With these parameters, 1,420,014 variants were removed, leaving 226,647 for GWAS. Subsequent inspection of the Manhattan plots suggests that this method removes most (but perhaps not all) variants that are in complete or high LD.\n\n\nShow the code\n# indep-pairwise arguments are: \n# 100kB window size, \n# variant count to shift the window by 10 variants at the end of each step, \n# pairwise r^2 threshold of 0.2\n\nif(!file.exists(\"data/Derived/plink_output/dgrp2_QC_all_lines_imputed_correct_pruned.bed\")) {\n  run_command(glue(\"{plink} --bfile dgrp2_QC_all_lines_imputed_correct\",\n                 \" --indep-pairwise 100 10 0.2 --out dgrp2_QC_all_lines_imputed_correct_pruned\"), path = \"/data/Derived/plink_output/\")\n}\n\n\n\n\nShow the code\nprep_for_e0_GWAS &lt;- function(data, sex){\ndata %&gt;% \n  mutate(line = glue(\"line{line}\")) %&gt;% \n  dplyr::select(line, e0_scaled)\n}\n\nDurham_f_l &lt;- prep_for_e0_GWAS(data = Durham_2014_f_adjusted)\n\n\n\n\nShow the code\n  # Make a list of the lines in our sample and save as a text file for passing to PLINK\n  lines_to_keep &lt;- gsub(\"_\", \"\", Durham_f_l$line) %&gt;% cbind(.,.)\n  write.table(lines_to_keep, row.names = FALSE, col.names = FALSE, file = \"data/Derived/plink_output/lines_to_keep.txt\", quote = FALSE)\n  \n    # Now cull the PLINK files to just the lines that we measured, and re-apply the \n  # MAF cut-off of 0.05 for the new smaller sample of DGRP lines\n  run_command(glue(\"{plink} --bfile dgrp2_QC_all_lines_imputed_correct\",\n                   \" --keep-allele-order\", # force PLINK to retain the major/minor allele designations that apply to the DGRP as a whole\n                   \" --keep lines_to_keep.txt --geno 0.1 --maf 0.05\", \n                   \" --make-bed --out dgrp2_QC_focal_lines\"), path = \"/data/Derived/plink_output/\")\n  \n  # Define a function to add our phenotype data to a .fam file, which is needed for GWAS analysis and to make sure PLINK includes these samples\n  # The 'phenotypes' data frame needs to have a column called 'line'\n  add_phenotypes_to_fam &lt;- function(filepath, phenotypes){\n    read_delim(filepath, col_names = FALSE, delim = \" \") %&gt;% \n      dplyr::select(X1, X2, X3, X4, X5) %&gt;% # Get all the non-phenotype columns\n      left_join(phenotypes %&gt;% \n                  mutate(line = gsub(\"_\", \"\", line)), \n                by = c(\"X1\" = \"line\")) %&gt;%\n      write.table(file = filepath, \n                  col.names = FALSE, row.names = FALSE, \n                  quote = FALSE, sep = \" \")\n  }\n\n\nadd_phenotypes_to_fam(\"data/Derived/plink_output/dgrp2_QC_focal_lines.fam\", Durham_f_l)"
  },
  {
    "objectID": "gemma.html#calculate-genomic-relatedness-matrix",
    "href": "gemma.html#calculate-genomic-relatedness-matrix",
    "title": "Gemma",
    "section": "Calculate genomic relatedness matrix",
    "text": "Calculate genomic relatedness matrix\n\n\nShow the code\nget_relatedness_matrix &lt;- function(phenotypes){\n  \n  # build the genomic relatedness matrix\n  \n  # All commands with {bed} from henceforth use this particular PLINK file, and we double-check that all the SNPs have MAF &gt; 0.05\n  bed &lt;- \"dgrp2_QC_all_lines -maf 0.05\" \n  #cov &lt;- \"-c covariate_file_for_GEMMA.txt\" # not used at present\n  \n  # Calculate the *centered* GRM for the focal lines (option -gk 1)\n  run_command(\"./gemma.macosx -bfile {bed} -r2 0.99 -gk 1 -o GRM\", path = \"/data/Derived/plink_output/\") \n  \n  # Perform decomposition of the GRM, and save its eigenvalues and eigenvectors\n  run_command(\"gemma -bfile {bed} -r2 0.99 -k ./output/GRM.cXX.txt -eigen -o eigen_decomp\", path = \"/data/derived\") \n  \n  # Remove eigen vectors + values for which the eigenvalue is close to zero, and save the modified file\n  values &lt;- read_tsv(\"data/derived/output/eigen_decomp.eigenD.txt\", col_names = \"eigenvalue\")$eigenvalue\n  vectors &lt;- read_tsv(\"data/derived/output/eigen_decomp.eigenU.txt\", col_names = FALSE)\n  missing_row &lt;- which(is.na(read_delim(\"data/derived/dgrp2_QC_focal_lines.fam\", delim = \" \", col_names = FALSE)$X8))\n  \n  write_tsv(vectors, path = \"data/derived/output/eigen_decomp.eigenU_female.txt\", col_names = FALSE)\n  write_tsv(data.frame(values), path = \"data/derived/output/eigen_decomp.eigenD_female.txt\", col_names = FALSE)\n  \n  write_tsv(vectors[-missing_row, -missing_row], path = \"data/derived/output/eigen_decomp.eigenU_male.txt\", col_names = FALSE)\n  write_tsv(data.frame(values[-missing_row]), path = \"data/derived/output/eigen_decomp.eigenD_male.txt\", col_names = FALSE)\n  unlink(\"data/derived/output/eigen_decomp.eigenD.txt\")\n  unlink(\"data/derived/output/eigen_decomp.eigenU.txt\")\n}"
  }
]