[
  {
    "objectID": "GWAS.html",
    "href": "GWAS.html",
    "title": "Genome wide analyses",
    "section": "",
    "text": "Code\nlibrary(tidyverse) # tidy coding, ggplot etc\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(glue) # for coding within strings\nlibrary(bigsnpr) # to install:   devtools::install_github(\"privefl/bigsnpr\")\n\n\nLoading required package: bigstatsr\n\n\nCode\nlibrary(pander) # for tables\nlibrary(future.apply) # for parallel code running\n\n\nLoading required package: future\n\n\nCode\nlibrary(brms) # for bayesian models\n\n\nLoading required package: Rcpp\nLoading 'brms' package (version 2.20.4). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n\nAttaching package: 'brms'\n\nThe following object is masked from 'package:stats':\n\n    ar\n\n\nCode\nlibrary(ggtext) # for markdown syntax in ggplot\nlibrary(MetBrewer) # for more colour palettes\nlibrary(MoMAColors) # nicer colours once again\n\n\nRegistered S3 method overwritten by 'MoMAColors':\n  method        from     \n  print.palette MetBrewer\n\n\nCode\nlibrary(patchwork) # building composite plots\nlibrary(DT) # for nice tables\nlibrary(kableExtra) # for more nice tables\n\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\nCode\nlibrary(ggrepel) # for labelling ggplots\nlibrary(pheatmap) # for heat maps\n\n# build a helper function that produces a table to display our data\n\n# Create a function to build HTML searchable tables\n\nmy_data_table &lt;- function(df){\n  datatable(\n    df, rownames=FALSE,\n    autoHideNavigation = TRUE,\n    extensions = c(\"Scroller\",  \"Buttons\"),\n    options = list(\n      autoWidth = TRUE,\n      dom = 'Bfrtip',\n      deferRender=TRUE,\n      scrollX=TRUE, scrollY=1000,\n      scrollCollapse=TRUE,\n      buttons =\n        list('pageLength', 'colvis', 'csv', list(\n          extend = 'pdf',\n          pageSize = 'A4',\n          orientation = 'landscape',\n          filename = 'Lifespan_data')),\n      pageLength = 100\n    )\n  )\n}"
  },
  {
    "objectID": "GWAS.html#load-data",
    "href": "GWAS.html#load-data",
    "title": "Genome wide analyses",
    "section": "Load data",
    "text": "Load data\nIn part 1 of this study, we calculated mean values and standard error for each combination of line, sex, study, temperature and mating status. These data are displayed, and can be downloaded from, the below table. Note that for GWA and other SNP based analysis, we removed lines that had not been genotyped (shown as Genotyped = NO).\n\n\nCode\nfull_dataset &lt;- \n  read_csv(\"data/input/line_means.csv\") %&gt;% \n  mutate(line = as.factor(Line),) %&gt;%\n  dplyr::select(-Line) %&gt;% \n  left_join(genotyped_lines, by = \"line\") %&gt;% \n  mutate(Genotyped = if_else(is.na(Genotyped), \"NO\", Genotyped))\n\n\nRows: 2815 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): Sex, Mated, Study, Density_cat, best_mod\ndbl (12): Line, Temperature, Block, e0, SE_e0, h, SE_h, samp, a, b, a_SE, b_SE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nmy_data_table(full_dataset)\n\n\n\n\n\n\n\nFor CPASSOC, we split the data into their respective treatments. For the purposes of this analysis, we follow a common convention in quantitative genetics and consider each lifespan measurement a separate trait e.g. lifespan at 25 degrees is a separate trait from lifespan at 18 degrees.\n\n\nCode\nArya_2010_f &lt;-\nfull_dataset %&gt;% \n  filter(Study == \"Arya_2010\" & Sex == \"Female\" & Genotyped == \"YES\")\n\nArya_2010_m &lt;-\nfull_dataset %&gt;% \n  filter(Study == \"Arya_2010\" & Sex == \"Male\" & Genotyped == \"YES\")\n\nHuang_2020_f_18 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Female\" & Temperature == 18)\n\nHuang_2020_m_18 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Male\" & Temperature == 18)\n\nHuang_2020_f_25 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Female\" & Temperature == 25)\n\nHuang_2020_m_25 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Male\" & Temperature == 25)\n\nHuang_2020_f_28 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Female\" & Temperature == 28)\n\nHuang_2020_m_28 &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Huang_2020\" & Sex == \"Male\" & Temperature == 28)\n\nWilson_2020_f &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Wilson_2020\") %&gt;% \n  distinct(line, .keep_all = TRUE)\n\nDurham_2014_f &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Durham_2014\") %&gt;% \n  distinct(line, .keep_all = T)\n\nPatel_2021_f &lt;-\n  full_dataset %&gt;% \n  filter(Study == \"Patel_2021\")\n\n\nWe also load the residual line means for each sex, which are the line means after controlling for temperature, mating status and the Study_ID random effect.\n\n\nCode\nresidual_means &lt;- \n  read_csv(\"data/Input/MCMC_residuals.csv\") %&gt;% \n  mutate(line = as.factor(line)) %&gt;% \n  inner_join(genotyped_lines) %&gt;% \n  rename(e0 = res_e0,\n         h = res_h)\n\n\nRows: 659 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Sex\ndbl (3): line, res_e0, res_h\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nJoining with `by = join_by(line)`"
  },
  {
    "objectID": "GWAS.html#performing-univariate-gwas",
    "href": "GWAS.html#performing-univariate-gwas",
    "title": "Genome wide analyses",
    "section": "Performing univariate GWAS",
    "text": "Performing univariate GWAS\nThe preparation of data for GWAS is adapted from Holman and Wong’s DGRP GWAS of fitness in different contexts. See their associated workflowr report for a comprehensive breakdown of their analysis.\n\nInstall neccessary software and build helper functions\nIn addition to the R packages we load, plink 1.9 and beagle must also be installed. These software packages allow us to wrangle the data into the correct format and impute missing values, both of which are required to run GWAS with the Gemma R package.\n\n\nCode\n# build a function to prepare data for GWAS\n\nprep_for_e0_GWAS &lt;- function(data, sex){\ndata %&gt;% \n  #inner_join(read_csv(\"data/Input/Genotyped_lines.csv\"), by = \"line\") %&gt;%  # filter to lines that have been genotyped\n  mutate(line = glue(\"line{line}\")) %&gt;% \n  dplyr::select(line, e0)\n}\n\nprep_for_h_GWAS &lt;- function(data, sex){\ndata %&gt;% \n  #inner_join(read_csv(\"data/Input/Genotyped_lines.csv\"), by = \"line\") %&gt;%  # filter to lines that have been genotyped\n  mutate(line = glue(\"line{line}\")) %&gt;% \n  dplyr::select(line, h)\n}\n\nprep_for_SA_GWAS &lt;- function(data){\ndata %&gt;% \n  #inner_join(read_csv(\"data/Input/Genotyped_lines.csv\"), by = \"line\") %&gt;%  # filter to lines that have been genotyped\n  mutate(line = glue(\"line{line}\")) %&gt;% \n  dplyr::select(line, SA_axis)\n}\n\n# I used bigsnpr::download_plink(dir = \"code\") which puts it in the code folder - I'm using a windows operating system.\n\n# Beagle is a software package for phasing genotypes and imputing ungenotyped markers.\n\nplink &lt;- paste(getwd(), \"code/plink\", sep = \"/\")\nbeagle &lt;- bigsnpr::download_beagle()\n\n\n# # Load the wolbachia infection status data from the DGRP website\n# wolbachia &lt;- read_csv(\"data/input/wolbachia.csv\") %&gt;% \n#   mutate(line = paste(\"line\", line, sep = \"\"))\n# \n# # Load the chomosomal inversion data from the DGRP website\n# # these are the 5 inversions that Huang et al. PNAS corrected for\n# inversions &lt;- read_csv(\"data/input/inversion genotypes.csv\") %&gt;%\n#     mutate(line = paste(\"line\", line, sep = \"\")) %&gt;%\n#     select(line, `In(2L)t`, `In(2R)NS`, `In(3R)P`, `In(3R)K`, `In(3R)Mo`) \n\n# helper function to pass commands to the terminal\n# Note that we set `intern = TRUE`, and pass the result of `system()` to `cat()`, \n# ensuring that the Terminal output will be printed in this knitr report.\n# \n# This is the mac OS function\n \n#run_command &lt;- function(shell_command, wd = getwd(), path = \"\"){\n#  cat(system(glue(\"cd \", wd, path, # tell terminal which directory to work in\n#                  \"\\n\",shell_command), # on a second terminal line, run the plink command\n#             intern = TRUE), sep = '\\n')  \n#}\n\n# This is the windows function \n\nrun_command &lt;- function(plink_command, wd = getwd(), path = \"\") {\n  # Specify the full path to the plink executable within the 'code' subdirectory.\n  plink_path &lt;- paste(getwd(), \"code/plink\", sep = \"/\")\n  \n  # Create the full shell command with the plink executable.\n  command &lt;- glue(\"cmd.exe /c cd /d {shQuote(file.path(wd, path))} && {shQuote(plink_path)} {plink_command}\")\n  \n  # Execute the combined command.\n  result &lt;- system(command, intern = TRUE)\n  \n  # Print the result.\n  cat(result, sep = '\\n')\n  \n  # Return the result as a character vector.\n  return(result)\n}\n\n# sometimes we need to run terminal commands without plink - create a slightly different function to do this\n\nrun_command_no_plink &lt;- function(shell_command, wd = getwd(), path = \"\") {\n  \n  # Create the full shell command with the plink executable.\n  command &lt;- glue(\"cmd.exe /c cd /d {shQuote(file.path(wd, path))} && {shell_command}\")\n  \n  # Execute the combined command.\n  result &lt;- system(command, intern = TRUE)\n  \n  # Print the result.\n  cat(result, sep = '\\n')\n  \n  # Return the result as a character vector.\n  return(result)\n}\n\n\n\n\nBuild a function to create manhattan plots for later\n\n\nCode\nbuild_manhattan_plot &lt;- function(gwas_results){\n  \n  manhattan_data &lt;- gwas_results %&gt;%\n    mutate(position = str_split(SNP, \"_\"), # split the SNP name into logical bits\n           chr = map_chr(position, ~ .x[1]), # the first bit is the chromosome arm - name the column appropriately\n           position = as.numeric(map_chr(position, ~ .x[2])), # where on the chromosome is the SNP found\n           pval = -1 * log10(P)) %&gt;% # make visualising the p values easier\n    dplyr::select(chr, position, pval)\n  \n  # this next chunk finds convenient cuts for labels and colour changes \n  \n  max_pos &lt;- manhattan_data %&gt;%\n    group_by(chr) %&gt;%\n    summarise(\n      max_pos = max(position), \n      middle_pos = (max_pos - min(position)) / 2,\n      .groups = \"drop\") %&gt;%\n    as.data.frame()\n  \n  max_pos$max_pos &lt;- c(0, cumsum(max_pos$max_pos[1:5]))\n  \n  max_pos$label_pos &lt;- max_pos$max_pos + max_pos$middle_pos\n  \n  # combine the two dataframes created above\n  \n  manhattan_data &lt;- manhattan_data %&gt;%\n    left_join(max_pos, by = \"chr\") %&gt;%\n    mutate(position = position + max_pos,\n           chromosome_colour = case_when(chr == \"2L\" | chr == \"3L\" | chr == \"4\" ~ \"A\",\n                                         .default = \"B\"),\n           Notable = if_else(pval &gt;= 8, \"YES\", \"NO\"))\n  \n  plot &lt;- manhattan_data %&gt;%\n    #filter(Notable == \"NO\") %&gt;% \n    ggplot(aes(position, pval, group = chr, stroke = 0.01)) +\n    geom_point(aes(colour = chromosome_colour), size = 1.6) +\n    geom_hline(yintercept = 5, linetype = 2, colour = \"red\", linewidth = 1.2) +\n    scale_colour_manual(values = c(met.brewer(name = \"Hokusai3\")[3], met.brewer(name = \"Hokusai3\")[6])) +\n    #geom_label_repel(data = manhattan_data %&gt;% filter(common_SNP == \"YES\" &),  \n     #              aes(label = position, fill = \"aliceblue\")) +\n    #geom_point(data = manhattan_data %&gt;% filter(Notable == \"YES\"),\n     #          fill = \"aliceblue\", size = 3, \n      #         shape = 21, colour = \"grey2\") +\n    scale_x_continuous(breaks = max_pos$label_pos, labels = max_pos$chr) +\n    scale_y_continuous(expand = c(0,0), limits = c(0, 20)) +\n    ylab(\"-log~10~(_p_)\") + \n    xlab(\"Chromosome and position\") +\n    theme_classic() +\n    theme(legend.position = \"none\",\n          axis.title.y = element_markdown(size = 18),\n          axis.title.x = element_markdown(size = 18),\n          axis.text.x = element_text(size = 15),\n          axis.text.y = element_text(size = 15))  \n}\n\n\n\n\nPerform SNP quality control and impute missing data\nWe cleaned up the DGRP’s .bed/.bim/.fam files (available from the Mackay lab website) by:\n\nRemoving any SNPs for which genotypes are missing for &gt;10% of the DGRP lines. We then use the software Beagle to impute the remaining missing genotypes. Imputation takes a long time so ideally, you only want to do it once.\nRemoving SNPs with a minor allele frequency of less than 5%. We have negilible power to detect associations for rare SNPs below this threshold.\n\nIn the PLINK-formatted genotype files, lines fixed for the major allele are coded as 2, and lines fixed for the minor allele as 0. This means that in the association tests we calculate, negative effect sizes mean that the minor allele is associated with lower trait values, while positive effect sizes means that the minor allele is associated with higher trait values.\n\n\nCode\nRun_function &lt;- FALSE # Change this to TRUE to run the models\n\n# If the imputation is not already done, create the following 3 files of imputed genotype data: \n# dgrp2_QC_all_lines_imputed_correct.bed/bim/fam\nif(!file.exists(\"data/Derived/dgrp2_QC_all_lines_imputed_correct.bed\")) {\n  perform_SNP_QC_and_imputation(phenotypes = predicted_line_means)\n}\n\nif(Run_function){\n  \n  # Use Plink to clean and subset the DGRP's SNP data as follows:\n  # Only keep SNPs for which at least 90% of DGRP lines were successfully genotyped (--geno 0.1)\n  # Only keep SNPs with a minor allele frequency of 0.05 or higher (--maf 0.05)\n  # Finally, write the processed BIM/BED/FAM files to the data/derived directory\n  \n  output_directory &lt;-  paste(getwd(), \"data/Derived\", sep = \"/\")\n  \n  run_command(glue(\"--bfile dgrp2\",\n                   \" --geno 0.1 --maf 0.05 --allow-no-sex\", \n                   \" --make-bed --out {shQuote(output_directory)}/dgrp2_QC_all_lines\"), path = \"data/Input/\")\n  \n  # Use the shell command 'sed' to remove underscores from the DGRP line names in the .fam file (e.g. 'line_120' becomes 'line120')\n  # Otherwise, these underscores cause trouble when we need to convert from PLINK to vcf format (vcf format uses underscore as a separator)\n  # I manually edited the text file to do this rather than using the below command, which I don't have quite working\n  #for(i in 1:2) run_command_no_plink(\"sed -i '' 's/_//' dgrp2_QC_all_lines.fam\", path = \"/data/Derived/\")\n                \n  \n  # Now impute the missing genotypes using Beagle\n  # This part uses the data for the full DGRP panel of &gt;200 lines, to infer missing genotypes as accurately as possible. \n  # This step uses a lot of memory (max memory was set to 28MB in prior analysis, and it used 26.5GB), but maybe it can also run on a less powerful computer?\n  # The bigsnpr package provides a helpful wrapper for Beagle called snp_beagleImpute(): it translates to a VCF file and back again using PLINK\n  snp_beagleImpute(beagle, plink, \n                   bedfile.in = \"data/Derived/dgrp2_QC_all_lines.bed\", \n                   bedfile.out = \"data/Derived/dgrp2_QC_all_lines_imputed.bed\",\n                   ncores = 4, \n                   memory.max = 16)\n  \n  # assign a sex of 'female' to all the DGRP lines (Beagle removes the sex, and it seems PLINK needs individuals to have a sex, \n  # despite PLINK having a command called --allow-no-sex)\n  run_command(\"sed -i '' 's/    0   0   0/  0   0   2/' dgrp2_QC_all_lines_imputed.fam\", path = \"/data/Derived/\")\n  \n  # Re-write the .bed file, to make sure the MAF threshold and minor/major allele designations are correctly assigned post-Beagle\n  run_command(glue(\"--bfile dgrp2_QC_all_lines_imputed\",\n                   \" --geno 0.1 --maf 0.05 --allow-no-sex\", \n                   \" --make-bed --out dgrp2_QC_all_lines_imputed_correct\"), path = \"/data/Derived/\")\n  #unlink(list.files(\"data/derived\", pattern = \"~\", full.names = TRUE)) # delete the original files, which were given a ~ file name by PLINK\n} else \"Already run\"\n\n\n[1] \"Already run\"\n\n\n\n\nCreate a reduced list of LD-pruned SNPs with PLINK\nTo keep the computation time and memory usage manageable, we do not save the effect sizes for every variant (SNPs and indels) that passed the MAF and missingness quality control step above (1,646,672 variants). Instead, we save the effect sizes for a subset of variants that were approximately in linkage disequilibrium. We identified this LD-pruned set of variants using the PLINK arguments --indep-pairwise 100 10 0.2, which prunes within 100kB sliding windows, sliding 10 variants along with each step, and allows a maximum pairwise \\(r^2\\) threshold of 0.2 between loci. With these parameters, 1,419,902 variants were removed, leaving 226,770 for downstream analysis. Subsequent inspection of the Manhattan plots suggests that this method removes most (but perahps not all) variants that are in complete or high LD.\n\n\nCode\n# indep-pairwise arguments are: \n# 100kB window size, \n# variant count to shift the window by 10 variants at the end of each step, \n# pairwise r^2 threshold of 0.2\n\nif(!file.exists(\"data/Derived/dgrp2_QC_all_lines_imputed_correct.bed\")) {\n  run_command(glue(\"--bfile dgrp2_QC_all_lines_imputed_correct\",\n                 \" --indep-pairwise 100 10 0.2\"), path = \"data/Derived/\")\n}\n\n\n\n\nBuild GWAS function\nNote: because PLINK defines the minor allele as the alternative allele (lines fixed for the minor allele are scored as genotype: 2, and those with the major allele as genotype: 0), a positive effect size in these association tests means the minor allele is associated with a higher value of the trait in question.\n\n\nCode\nrun_GWAS &lt;- function(phenotypes){\n  \n  # Make a list of the lines in our sample and save as a text file for passing to PLINK\n  lines_to_keep &lt;- phenotypes %&gt;% dplyr::select(line) %&gt;% mutate(line_2 = line)\n  write.table(lines_to_keep, \n              row.names = FALSE, \n              col.names = FALSE, \n              file = \"data/Derived/lines_to_keep.txt\", \n              quote = FALSE)\n\n  # Now cull the PLINK files to just the lines that we measured, and re-apply the \n  # MAF cut-off of 0.05 for the new smaller sample of DGRP lines\n  run_command(glue(\"--bfile dgrp2_QC_all_lines_imputed_correct\",\n                   \" --keep-allele-order\", # force PLINK to retain the major/minor allele designations that apply to the DGRP as a whole\n                   \" --keep lines_to_keep.txt --geno 0.1 --maf 0.05\", \n                   \" --make-bed --out dgrp2_QC_focal_lines\"), path = \"/data/Derived/\")\n  \n    # Define a function to add our phenotype data to a .fam file, which is needed for GWAS analysis and to make sure PLINK includes these samples\n  # The 'phenotypes' data frame needs to have a column called 'line'\n  add_phenotypes_to_fam &lt;- function(filepath, phenotypes){\n    read_delim(filepath, col_names = FALSE, delim = \" \") %&gt;% \n      dplyr::select(X1, X2, X3, X4, X5) %&gt;% # Get all the non-phenotype columns\n      left_join(phenotypes, \n                by = c(\"X1\" = \"line\")) %&gt;%\n      write.table(file = \"data/Derived/dgrp2_QC_focal_lines_NEW.fam\", \n                  col.names = FALSE, row.names = FALSE, \n                  quote = FALSE, sep = \" \")\n    \n    unlink(\"data/Derived/dgrp2_QC_focal_lines.fam\")\n    file.rename(\"data/Derived/dgrp2_QC_focal_lines_NEW.fam\", \n                \"data/Derived/dgrp2_QC_focal_lines.fam\")\n  }\n  \n  # edit the new FAM file to add the phenotype data from 'phenotypes'\n  add_phenotypes_to_fam(\"data/Derived/dgrp2_QC_focal_lines.fam\", phenotypes)\n  \n\n  # Run mixed-model GWAS (in practice, the relatedness between almost all pairs of lines \n  # is sufficiently low that PLINK always instead chooses to run a linear model)\n  \n  run_command(\"--bfile dgrp2_QC_focal_lines  --assoc --maf 0.05\", \n              path = \"/data/Derived\")\n  \n  # wrangle the GWAS results\n  \n  Focal_name &lt;- deparse(substitute(phenotypes))\n  \n  gwas_results &lt;- read.table(\"data/Derived/plink.qassoc\", \n                             header = TRUE) %&gt;% \n    dplyr::select(SNP, BETA, SE, \"T\", P)\n\n  # Save a file containing all SNPs with P &lt; 1e-5:\n  gwas_results %&gt;% \n    filter(P &lt; 1e-05) %&gt;% \n    write_tsv(glue(\"data/Derived/GWAS_results/{Focal_name}_significant_SNPs.tsv.gz\"))\n\n  # Rename and compress the GWAS summary stats file \n  # The filter step means that only variants in the LD-pruned subset get saved to disk.\n  gwas_results %&gt;% \n    filter(SNP %in% (pull(read_tsv(\"data/Derived/plink.prune.in\", col_names = \"SNP\"), SNP))) %&gt;% \n    write_tsv(glue(\"data/Derived/GWAS_results/{Focal_name}.tsv.gz\"))\n  unlink(\"data/Derived/plink.qassoc\")\n  \n  # Rename the plink log file\n  file.rename(\"data/Derived/plink.log\",\n              glue(\"data/Derived/{Focal_name}_log.txt\"))\n  \n  unlink(\"data/Derived/dgrp2_QC_focal_lines.bim\")\n  unlink(\"data/Derived/dgrp2_QC_focal_lines.bed\")\n  unlink(\"data/Derived/dgrp2_QC_focal_lines.fam\")\n  unlink(\"data/Derived/dgrp2_QC_focal_lines.log\")\n}"
  },
  {
    "objectID": "GWAS.html#run-gwas",
    "href": "GWAS.html#run-gwas",
    "title": "Genome wide analyses",
    "section": "Run GWAS",
    "text": "Run GWAS\n\n\nCode\n# if not already done, run the GWA tests\n\nif(!file.exists(\"data/Derived/GWAS_results/Arya_f_l.tsv.gz\")) {\n\nArya_f_l &lt;- prep_for_e0_GWAS(Arya_2010_f)\nArya_m_l &lt;- prep_for_e0_GWAS(Arya_2010_m)\nArya_f_h &lt;- prep_for_h_GWAS(Arya_2010_f)\nArya_m_h &lt;- prep_for_h_GWAS(Arya_2010_m)\nHuang_f_18_l &lt;- prep_for_e0_GWAS(Huang_2020_f_18)\nHuang_f_18_h &lt;- prep_for_h_GWAS(Huang_2020_f_18)\nHuang_m_18_l &lt;- prep_for_e0_GWAS(Huang_2020_m_18)\nHuang_m_18_h &lt;- prep_for_h_GWAS(Huang_2020_m_18)\nHuang_f_25_l &lt;- prep_for_e0_GWAS(Huang_2020_f_25)\nHuang_f_25_h &lt;- prep_for_h_GWAS(Huang_2020_f_25)\nHuang_m_25_l &lt;- prep_for_e0_GWAS(Huang_2020_m_25)\nHuang_m_25_h &lt;- prep_for_h_GWAS(Huang_2020_m_25)\nHuang_f_28_l &lt;- prep_for_e0_GWAS(Huang_2020_f_28)\nHuang_f_28_h &lt;- prep_for_h_GWAS(Huang_2020_f_28)\nHuang_m_28_l &lt;- prep_for_e0_GWAS(Huang_2020_m_28)\nHuang_m_28_h &lt;- prep_for_h_GWAS(Huang_2020_m_28)\nWilson_f_l &lt;- prep_for_e0_GWAS(Wilson_2020_f)\nWilson_f_h &lt;- prep_for_h_GWAS(Wilson_2020_f)\nDurham_f_l &lt;- prep_for_e0_GWAS(Durham_2014_f)\nDurham_f_h &lt;- prep_for_h_GWAS(Durham_2014_f)\nPatel_f_l &lt;- prep_for_e0_GWAS(Patel_2021_f)\nPatel_f_h &lt;- prep_for_h_GWAS(Patel_2021_f)\n\nresidual_f_l &lt;- prep_for_e0_GWAS(residual_means %&gt;% filter(Sex == \"Female\"))\nresidual_m_l &lt;- prep_for_e0_GWAS(residual_means %&gt;% filter(Sex == \"Male\"))\nresidual_f_h &lt;- prep_for_h_GWAS(residual_means %&gt;% filter(Sex == \"Female\"))\nresidual_m_h &lt;- prep_for_h_GWAS(residual_means %&gt;% filter(Sex == \"Male\"))\n\nrun_GWAS(Arya_f_l)\nrun_GWAS(Arya_m_l)\nrun_GWAS(Arya_f_h)\nrun_GWAS(Arya_m_h)\nrun_GWAS(Huang_f_18_l)\nrun_GWAS(Huang_f_18_h)\nrun_GWAS(Huang_m_18_l)\nrun_GWAS(Huang_m_18_h)\nrun_GWAS(Huang_f_25_l)\nrun_GWAS(Huang_f_25_h)\nrun_GWAS(Huang_m_25_l)\nrun_GWAS(Huang_m_25_h)\nrun_GWAS(Huang_f_28_l)\nrun_GWAS(Huang_f_28_h)\nrun_GWAS(Huang_m_28_l)\nrun_GWAS(Huang_m_28_h)\nrun_GWAS(Wilson_f_l)\nrun_GWAS(Wilson_f_h)\nrun_GWAS(Durham_f_l)\nrun_GWAS(Durham_f_h)\nrun_GWAS(Patel_f_l)\nrun_GWAS(Patel_f_h)\n\nrun_GWAS(residual_f_l)\nrun_GWAS(residual_m_l)\nrun_GWAS(residual_f_h)\nrun_GWAS(residual_m_h)\n}"
  },
  {
    "objectID": "GWAS.html#add-allele-ids-and-mafs-to-annotation-database",
    "href": "GWAS.html#add-allele-ids-and-mafs-to-annotation-database",
    "title": "Genome wide analyses",
    "section": "Add allele IDs and MAFs to annotation database",
    "text": "Add allele IDs and MAFs to annotation database\nThe annotation text file was downloaded from the DGRP website: .\n\n\nCode\noptions(future.globals.maxSize = 2000 * 1024 ^ 2, \n        stringsAsFactors = FALSE)\n\n# Helper function to split a vector into chunks \nchunker &lt;- function(x, max_chunk_size) split(x, ceiling(seq_along(x) / max_chunk_size))\n\nget_variant_annotations &lt;- function(){\n  \n  # Load up the big annotation file, get pertinent info. It's stored in some sort of text string format\n  annot &lt;- read.table(\"data/Input/dgrp.fb557.annot.txt\", header = FALSE, stringsAsFactors = FALSE)\n  \n  get.info &lt;- function(rows){\n    lapply(rows, function(row){\n      site.class.field &lt;- strsplit(annot$V3[row], split = \"]\")[[1]][1]\n      num.genes &lt;- str_count(site.class.field, \";\") + 1\n      output &lt;- cbind(rep(annot$V1[row], num.genes), \n                      do.call(\"rbind\", lapply(strsplit(site.class.field, split = \";\")[[1]], \n                                              function(x) strsplit(x, split = \"[|]\")[[1]])))\n      if(ncol(output) == 5) return(output[,c(1,2,4,5)]) # only return SNPs that have some annotation. Don't get the gene symbol\n      else return(NULL)\n    }) %&gt;% do.call(\"rbind\", .)\n  }\n  \n  plan(\"multisession\")\n  variant.details &lt;- future_lapply(chunker(1:nrow(annot), max_chunk_size = 10000), get.info) %&gt;% \n    do.call(\"rbind\", .) %&gt;% as.data.frame()\n  \n  names(variant.details) &lt;- c(\"SNP\", \"FBID\", \"site.class\", \"distance.to.gene\")\n  variant.details$FBID &lt;- unlist(str_extract_all(variant.details$FBID, \"FBgn[:digit:]+\")) # clean up text strings for Flybase ID\n  variant.details %&gt;%\n    dplyr::filter(site.class != \"FBgn0003638\") %&gt;% # NB this is a bug in the DGRP's annotation file\n    mutate(chr = str_remove_all(substr(SNP, 1, 2), \"_\")) # get chromosome now for faster sorting later\n}\n\nif(!file.exists(\"data/Derived/annotations.csv\")){\nget_variant_annotations() %&gt;% \nwrite_csv(\"data/Derived/annotations.csv\")\n} else annotations &lt;- read_csv(\"data/Derived/annotations.csv\")\n\n\nRows: 4622971 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): SNP, FBID, site.class, chr\ndbl (1): distance.to.gene\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# Extract and save the MAFs, SNP positions, and major/minor alleles\nMAFs &lt;- read.table(\"data/derived/plink.frq\", \n                   header = TRUE, stringsAsFactors = FALSE) %&gt;% \n  mutate(position = map_chr(\n    strsplit(SNP, split = \"_\"), \n    function(x) x[2])) %&gt;%\n  dplyr::select(SNP, position, MAF, A1, A2) %&gt;% \n  rename(minor_allele = A1,\n         major_allele = A2) \n\nMAFs &lt;- annotations %&gt;% \n  dplyr::select(SNP, FBID, site.class, distance.to.gene, chr) %&gt;% collect() %&gt;%\n  full_join(MAFs, by = \"SNP\") %&gt;%\n  filter(!is.na(MAF)) %&gt;%\n  mutate(site.class = replace(site.class, is.na(site.class), \"INTERGENIC\")) %&gt;% \n  as_tibble()"
  },
  {
    "objectID": "GWAS.html#the-method",
    "href": "GWAS.html#the-method",
    "title": "Genome wide analyses",
    "section": "The method",
    "text": "The method\nThe power to detect variants associated with correlated phenotypes can be increased if a meta-analytic approach is adopted (Zhu et al, 2018). Here, we use the CPASSOC approach developed by Zhou et al (2015), which evaluates the null hypothesis that SNPs are associated with none of the considered traits, weighted by the sample size of each study and adjusted for the trait correlation matrix. The steps to apply CPASSOC are as follows:\n\nEstimate \\(R\\), the trait correlation matrix. In the DGRP, this can be done using SNP data or using line means.\nGWAS each trait separately (see above).\nCollate effect sizes for each trait into a vector \\(\\beta\\), for each SNP.\nUse a Wald test statistic to estimate a vector of p-values, \\(T\\), from the \\(\\beta\\) and \\(\\sigma\\) (which is approximated from the study sample size) estimates for each SNP.\nTest whether \\(\\beta\\) = 0. If the trait data are homogeneous (SNPs are expected to affect all traits in the same direction), use:\n\n\\[S_{Hom} = \\frac{e^T(RW)^{-1}T(e^T(RW)^{-1}T)^T}{e^T(WRW)^{-1}e}\\] where \\(W\\) is a diagonal matrix of weights for the individual test statistics (either the inverse of the variance or simply the sample size).\n\nIf there is heterogeneity between trait measures (i.e. it is a reasonable expectation that SNPs could affect some traits in one direction and others in the opposing direction), \\(S_{Hom}\\) is not appropriate. The ideal test statistic in this case would only include the cohorts and traits with a true contribution to the association of a genetic variant. To implement this, the value \\(\\tau\\) is used as a threshold, below which traits are not included in the test statistic. This statistic, \\(S_{Het}\\) can be viewed as the maximum of the weighted sum of trait-specific test statistics satisfying different thresholds. To calculate \\(S_{Het}\\) first find,\n\n\\[S_{\\tau} = \\frac{e^T(R(\\tau)W(\\tau))^{-1}T(\\tau)(e^T(R(\\tau)W(\\tau))^{-1}T(\\tau))^T}{e^TW(\\tau)^{-1}R(\\tau)^{-1}W(\\tau)^{-1}e}\\] When \\(\\tau\\) is large, \\(S(\\tau)\\) can be undefined if the test statistic falls below \\(\\tau\\) for all cohorts. In this case \\(S(\\tau) = 0\\). Our test statistic is then\n\\[\\displaystyle S_{Het} =  \\max_{r \\gt 0} S(\\tau)\\]\nAnyway, I’ve only included that for the mathematically inclined. Code to implement both statistics in R can be downloaded here, and is implemented below."
  },
  {
    "objectID": "GWAS.html#generate-the-genetic-correlation-matrix",
    "href": "GWAS.html#generate-the-genetic-correlation-matrix",
    "title": "Genome wide analyses",
    "section": "Generate the genetic correlation matrix",
    "text": "Generate the genetic correlation matrix\nUsing line means\n\n\nCode\nfemale_data &lt;-\n  bind_rows(Arya_2010_f,\n            Huang_2020_f_18,\n            Huang_2020_f_25,\n            Huang_2020_f_28,\n            Wilson_2020_f,\n            Durham_2014_f,\n            Patel_2021_f) %&gt;% \n  dplyr::select(line, Study, Sex, Temperature, e0, h) %&gt;% \n  pivot_wider(values_from = c(e0, h), names_from = c(Study, Sex, Temperature)) \n\nfemale_data_e0 &lt;-\n  female_data %&gt;% \n  dplyr::select(contains(\"e0\"))\n\nfemale_data_h &lt;-\n  female_data %&gt;% \n  dplyr::select(!contains(\"e0\"), -line)\n\nfemale_e0_corr_matrix &lt;- cor(female_data_e0, use = \"pairwise.complete.obs\", method = \"spearman\")\nfemale_h_corr_matrix &lt;- cor(female_data_h, use = \"pairwise.complete.obs\", method = \"spearman\")\n\nmale_data &lt;-\n  bind_rows(Arya_2010_m,\n            Huang_2020_m_18,\n            Huang_2020_m_25,\n            Huang_2020_m_28) %&gt;% \n  dplyr::select(line, Study, Sex, Temperature, e0, h) %&gt;% \n  pivot_wider(values_from = c(e0, h), names_from = c(Study, Sex, Temperature)) \n\nmale_data_e0 &lt;-\n  male_data %&gt;% \n  dplyr::select(contains(\"e0\"))\n\nmale_data_h &lt;-\n  male_data %&gt;% \n  dplyr::select(!contains(\"e0\"), -line)\n\nmale_e0_corr_matrix &lt;- cor(male_data_e0, use = \"pairwise.complete.obs\", method = \"spearman\")\nmale_h_corr_matrix &lt;- cor(male_data_h, use = \"pairwise.complete.obs\", method = \"spearman\")\n\nall_data &lt;- inner_join(female_data, male_data, by = \"line\")\n\nall_data_e0 &lt;- \n  all_data %&gt;% \n  dplyr::select(contains(\"e0\")) %&gt;% \n  rename(Arya_f = e0_Arya_2010_Female_25,\n         Huang_f_18 = e0_Huang_2020_Female_18,\n         Huang_f_25 =  e0_Huang_2020_Female_25,\n         Huang_f_28 = e0_Huang_2020_Female_28,\n         Wilson_f = e0_Wilson_2020_Female_25,\n         Durham_f = e0_Durham_2014_Female_25,\n         Patel_f = e0_Patel_2021_Female_23,\n         Arya_m = e0_Arya_2010_Male_25,\n         Huang_m_18 = e0_Huang_2020_Male_18,\n         Huang_m_25 = e0_Huang_2020_Male_25,\n         Huang_m_28 = e0_Huang_2020_Male_28)\n\nall_data_h &lt;-\n  all_data %&gt;% \n  dplyr::select(!contains(\"e0\"), -line) %&gt;% \n  rename(Arya_f = h_Arya_2010_Female_25,\n         Huang_f_18 = h_Huang_2020_Female_18,\n         Huang_f_25 =  h_Huang_2020_Female_25,\n         Huang_f_28 = h_Huang_2020_Female_28,\n         Wilson_f = h_Wilson_2020_Female_25,\n         Durham_f = h_Durham_2014_Female_25,\n         Patel_f = h_Patel_2021_Female_23,\n         Arya_m = h_Arya_2010_Male_25,\n         Huang_m_18 = h_Huang_2020_Male_18,\n         Huang_m_25 = h_Huang_2020_Male_25,\n         Huang_m_28 = h_Huang_2020_Male_28)\n\nall_e0_corr_matrix &lt;- cor(all_data_e0, use = \"pairwise.complete.obs\", method = \"spearman\")\nall_h_corr_matrix &lt;- cor(all_data_h, use = \"pairwise.complete.obs\", method = \"spearman\")\n\n\nLet’s visualise the correlations between lifespan measures. First for life expectancy:\n\n\nCode\npheatmap(all_e0_corr_matrix, cutree_rows = 3, cutree_cols = 3)\n\n\n\n\n\nNow for lifespan equality\n\n\nCode\npheatmap(all_h_corr_matrix, cutree_rows = 3, cutree_cols = 3)\n\n\n\n\n\nUsing SNP effect sizes Not yet done\n\n\nCode\n#female_e0_SNP_corr_matrix &lt;- \n # cor(Female_e0_effect_sizes %&gt;% dplyr::select(-SNP), use = \"pairwise.complete.obs\", method = \"spearman\")"
  },
  {
    "objectID": "GWAS.html#calculate-meta-analytic-test-statistics",
    "href": "GWAS.html#calculate-meta-analytic-test-statistics",
    "title": "Genome wide analyses",
    "section": "Calculate meta-analytic test statistics",
    "text": "Calculate meta-analytic test statistics\nNote that the MASS package is required to run the functions we load below. Unfortunately this clashes with dplyrs select(). So be prepared to run detach(\"package:MASS\", unload=TRUE) or use dplyr::select() to get some things to work if you’re moving back and forth throughout the code.\n\n\nCode\nsource(\"FunctionSet.R\") # saved as a separate file in the project. \n\n\n\nAttaching package: 'MASS'\n\n\nThe following object is masked from 'package:patchwork':\n\n    area\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoading required package: compiler\n\n\n\ne0, sexes combined\nThe purpose of this meta-analysis is to search for SNPs that have some effect on ageing, expressed in many different contexts (sexes, temperatures and mating status’).\nTo conduct CPASSOC for a given SNP, we need a summary statistic from each GWAS. A different number of lines were included in each GWAS, which can cause small differences in the number of SNPs assessed. We therefore prune the list of SNPs to those included in all univariate analyses. After pruning (and previous pruning to remove SNPs in linkage disequilibrium), 220,582 SNPs remain.\n\n\nCode\n# load GWAS results\n\nArya_f_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_f_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_f = T)\n\n\nRows: 224164 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_f_18_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_18_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_18 = T)\n\n\nRows: 225148 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_f_25_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_25_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_25 = T)\n\n\nRows: 225593 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_f_28_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_28_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_28 = T)\n\n\nRows: 225938 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nWilson_f_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Wilson_f_25  = T)\n\n\nRows: 223416 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nDurham_f_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Durham_f_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Durham_f_25 = T)\n\n\nRows: 225819 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nPatel_f_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Patel_f_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Patel_f_23 = T)\n\n\nRows: 226248 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nArya_m_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_m_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_m = T)\n\n\nRows: 224164 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_m_18_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_18_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_18  = T)\n\n\nRows: 225148 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_m_25_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_25_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_25 = T)\n\n\nRows: 225593 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_m_28_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_28_l.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_28  = T)\n\n\nRows: 225938 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nall_e0_effect_sizes &lt;-\n  Arya_f_l_GWAS %&gt;%\n  inner_join(Huang_f_18_l_GWAS, by = \"SNP\") %&gt;%\n  inner_join(Huang_f_25_l_GWAS, by = \"SNP\") %&gt;%\n  inner_join(Huang_f_28_l_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Wilson_f_l_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Durham_f_l_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Patel_f_l_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Arya_m_l_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Huang_m_18_l_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Huang_m_25_l_GWAS, by = \"SNP\") %&gt;%\n  inner_join(Huang_m_28_l_GWAS, by = \"SNP\")\n\n\nall_e0_effect_sizes_values &lt;-\n  all_e0_effect_sizes %&gt;% \n  dplyr::select(2:12)\n\nSample_size_all &lt;- c(165, 165, 183, 183, 186, 186, 177, 177, 161, 189, 193) \n\nif(!file.exists(\"data/Derived/all_e0_meta_results.csv\")) {\n\n# run the homogeneous effect meta-analysis\n\nS_hom &lt;- SHom(all_e0_effect_sizes_values, Sample_size_all, all_e0_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary for different traits (e.g. if a SNP has a sex or enviornment opposite effect on lifespan)\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_all, all_e0_corr_matrix);\n\nS_het &lt;- SHet(all_e0_effect_sizes_values, Sample_size_all, all_e0_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n\nall_e0_meta_results &lt;- \n  all_e0_effect_sizes %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) # add the unadjusted p values\n\nwrite_csv(all_e0_meta_results, \"data/Derived/all_e0_meta_results.csv\")\n\n} else all_e0_meta_results &lt;- read_csv(\"data/Derived/all_e0_meta_results.csv\")\n\n\nRows: 220582 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): SNP\ndbl (15): Arya_f, Huang_f_18, Huang_f_25, Huang_f_28, Wilson_f_25, Durham_f_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nH sexes combined\n\n\nCode\n# load GWAS results\n\nArya_f_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_f_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_f = T)\n\n\nRows: 224164 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_f_18_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_18_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_18 = T)\n\n\nRows: 225148 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_f_25_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_25_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_25 = T)\n\n\nRows: 225593 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_f_28_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_f_28_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_f_28 = T)\n\n\nRows: 225938 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nWilson_f_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Wilson_f_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Wilson_f_25  = T)\n\n\nRows: 223416 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nDurham_f_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Durham_f_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Durham_f_25 = T)\n\n\nRows: 225819 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nPatel_f_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Patel_f_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;%  \n  rename(Patel_f_23 = T)\n\n\nRows: 226248 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nArya_m_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Arya_m_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Arya_m = T)\n\n\nRows: 224164 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_m_18_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_18_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_18  = T)\n\n\nRows: 225148 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_m_25_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_25_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_25 = T)\n\n\nRows: 225593 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nHuang_m_28_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/Huang_m_28_h.tsv.gz\") %&gt;% \n  dplyr::select(SNP, T) %&gt;% \n  rename(Huang_m_28  = T)\n\n\nRows: 225938 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nall_h_effect_sizes &lt;-\n  Arya_f_h_GWAS %&gt;%\n  inner_join(Huang_f_18_h_GWAS, by = \"SNP\") %&gt;%\n  inner_join(Huang_f_25_h_GWAS, by = \"SNP\") %&gt;%\n  inner_join(Huang_f_28_h_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Wilson_f_h_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Durham_f_h_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Patel_f_h_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Arya_m_h_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Huang_m_18_h_GWAS, by = \"SNP\") %&gt;% \n  inner_join(Huang_m_25_h_GWAS, by = \"SNP\") %&gt;%\n  inner_join(Huang_m_28_h_GWAS, by = \"SNP\") \n  \n\nall_h_effect_sizes_values &lt;-\n  all_h_effect_sizes %&gt;% \n  dplyr::select(2:12)\n\nif(!file.exists(\"data/Derived/all_h_meta_results.csv\")) {\n\nS_hom &lt;- SHom(all_h_effect_sizes_values, Sample_size_all, all_h_corr_matrix)\n\n# calculate meta-p-values and bind the two together with the SNP names\n\np_S_hom &lt;- pchisq(S_hom, df = 1, ncp = 0, lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_hom) %&gt;% \n  rename(meta_p_hom = value, \n         S_hom = ...2)\n\n# Calculate S_het, an extension of S_hom that improves power when the genetic effect sizes vary for different traits (probably not such a problem here given all traits we investigate are some version of life expectancy)\n\n# estimate parameters of gamma distribution\n\npara &lt;- EstimateGamma(N = 1E4, Sample_size_all, all_h_corr_matrix);\n\nS_het &lt;- SHet(all_h_effect_sizes_values, Sample_size_all, all_h_corr_matrix)\n\n# obtain P-values of S_Het using the estimated gamma parameters\n  \np_S_het &lt;- pgamma(q = S_het-para[3], shape = para[1], scale = para[2], lower.tail = F) %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(S_het) %&gt;% \n  rename(meta_p_het = value, \n         S_het = ...2)\n\n\nall_h_meta_results &lt;- \n  all_e0_effect_sizes %&gt;% \n  bind_cols(p_S_hom,\n            p_S_het) # add the unadjusted p values\n\nwrite_csv(all_h_meta_results, \"data/Derived/all_h_meta_results.csv\")\n} else all_h_meta_results &lt;- read_csv(\"data/Derived/all_h_meta_results.csv\")\n\n\nRows: 220582 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): SNP\ndbl (15): Arya_f, Huang_f_18, Huang_f_25, Huang_f_28, Wilson_f_25, Durham_f_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "GWAS.html#plot-the-results",
    "href": "GWAS.html#plot-the-results",
    "title": "Genome wide analyses",
    "section": "Plot the results",
    "text": "Plot the results\nWe combine GWAS summary statistics calculated from lifespan data measured across different contexts. It’s possible that some SNPs have G x E interactions that would lead to a heterogeneous effect across phenotypes. We therefore plot the S_het calculated p-values.\n\n\nCode\ncommon_SNPs &lt;- \n  all_e0_meta_results %&gt;% filter(meta_p_het &lt; 0.00005) %&gt;% \n  inner_join(all_h_meta_results %&gt;% filter(meta_p_het &lt; 0.00005), by = \"SNP\") %&gt;% \n  mutate(common_SNP = \"YES\") %&gt;% \n  dplyr::select(SNP, common_SNP)\n\ne0_results &lt;- \n  all_e0_meta_results %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  left_join(common_SNPs) %&gt;% \n  mutate(common_SNP = if_else(is.na(common_SNP), \"NO\", common_SNP))\n\n\nJoining with `by = join_by(SNP)`\n\n\nCode\nh_results &lt;- \n  all_h_meta_results %&gt;% \n  dplyr::select(SNP, meta_p_hom, meta_p_het) %&gt;% \n  rename(P = meta_p_het) %&gt;% \n  left_join(common_SNPs) %&gt;% \n  mutate(common_SNP = if_else(is.na(common_SNP), \"NO\", common_SNP))\n\n\nJoining with `by = join_by(SNP)`\n\n\nCode\n# plot the results using the manhattan plot custom function we defined earlier\n\ne0_het_plot &lt;- build_manhattan_plot(e0_results) +\n  labs(title = \"Life expectancy\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5))\n\nh_het_plot &lt;- build_manhattan_plot(h_results) +\n  labs(title = \"Lifespan equality\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5))\n\n\ne0_het_plot + h_het_plot"
  },
  {
    "objectID": "GWAS.html#calculate-genetic-correlations",
    "href": "GWAS.html#calculate-genetic-correlations",
    "title": "Genome wide analyses",
    "section": "Calculate genetic correlations",
    "text": "Calculate genetic correlations\nUsing a hierarchical model, we previously partitioned the variance in life expectancy and lifespan equality caused by variation in:\n\nTemperature\nMating status\nStudy conditions e.g. lab effects such as diet used.\nMeasurement error\n\nWith these sources of variation quantified, we can account for them and predict line means for both life expectancy and lifespan equality. These means represent very close approximations to the true across-context genotypic value of each line. Put another way, these estimates reflect the phenotypic product of the genotype that is not affected by the (measured) environment.\n\n\nCode\nresidual_f_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/residual_f_l.tsv.gz\") \n\n\nRows: 226770 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nresidual_m_l_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/residual_m_l.tsv.gz\") \n\n\nRows: 226628 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nresidual_f_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/residual_f_h.tsv.gz\") \n\n\nRows: 226770 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nresidual_m_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/residual_m_h.tsv.gz\") \n\n\nRows: 226628 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nresidual_SNP_data &lt;-\n  residual_f_l_GWAS %&gt;% \n  rename(Lifespan_female = BETA) %&gt;% \n  #mutate(Sex = \"Female\") %&gt;% \n  dplyr::select(SNP, Lifespan_female) %&gt;% \n  left_join(\n    residual_m_l_GWAS %&gt;% \n      rename(Lifespan_male = BETA) %&gt;% \n      #mutate(Sex = \"Male\") %&gt;% \n      dplyr::select(SNP, Lifespan_male)) %&gt;% \n  left_join(\n    residual_f_h_GWAS %&gt;% \n      rename(Equality_female = BETA) %&gt;% \n      #mutate(Sex = \"Female\") %&gt;% \n      dplyr::select(SNP, Equality_female)) %&gt;% \n  left_join(\n    residual_m_h_GWAS %&gt;% \n      rename(Equality_male = BETA) %&gt;% \n      #mutate(Sex = \"Male\") %&gt;% \n      dplyr::select(SNP, Equality_male))\n\n\nJoining with `by = join_by(SNP)`\nJoining with `by = join_by(SNP)`\nJoining with `by = join_by(SNP)`\n\n\nCalculate the genetic correlation between life expectancy and lifespan equality, measured in both sexes.\n\n\nCode\nresidual_SNP_data %&gt;% \n  dplyr::select(-SNP) %&gt;% \n  cor(use = \"pairwise.complete.obs\") %&gt;% \n  kable(digits = 3) %&gt;% kable_styling()\n\n\n\n\n\n\nLifespan_female\nLifespan_male\nEquality_female\nEquality_male\n\n\n\n\nLifespan_female\n1.000\n0.720\n-0.262\n-0.188\n\n\nLifespan_male\n0.720\n1.000\n-0.313\n-0.243\n\n\nEquality_female\n-0.262\n-0.313\n1.000\n0.676\n\n\nEquality_male\n-0.188\n-0.243\n0.676\n1.000\n\n\n\n\n\n\n\nThere is a strong positive intersex-genetic correlation for both traits. However, and most intriguingly, lifespan has a negative genetic correlation with lifespan equality. Is this an artefact of how lifespan equality is calculated? I don’t think so, as we’ve previously seen positive correlations using the same metrics. What’s different is we’re now looking at the GWA beta coefficients calculated from the residual line mean values.\nLets plot the data to show these genetic correlations\n\n\nCode\np1 &lt;-\n  residual_SNP_data %&gt;% \n  ggplot(aes(x = Lifespan_female, y = Lifespan_male)) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_moma_c(\"Exter\", direction = -1) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"#33CC66\") +\n  coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) +\n  xlab(\"Effect on female life expectancy\") + \n  ylab(\"Effect on male life expectancy\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 12))\np2 &lt;-\n  residual_SNP_data %&gt;% \n  ggplot(aes(x = Equality_female, y = Equality_male)) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_moma_c(\"Exter\", direction = -1) +\n  #geom_point() +\n  #stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), linewidth = 0.75, colour = \"#33CC66\") +\n  coord_cartesian(xlim = c(-0.1, 0.1), ylim = c(-0.1, 0.1)) +\n  xlab(\"Effect on female lifespan equality\") + \n  ylab(\"Effect on male lifespan equality\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 12))\n  \np3 &lt;-\n  residual_SNP_data %&gt;% \n  ggplot(aes(x = Lifespan_female, y = Equality_female)) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_moma_c(\"Exter\", direction = -1) +\n  coord_cartesian(xlim = c(-5, 5), ylim = c(-0.1, 0.1)) +\n  xlab(\"Effect on female lifespan\") + \n  ylab(\"Effect on female lifespan equality\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 12))\n\np4 &lt;-\n  residual_SNP_data %&gt;% \n  ggplot(aes(x = Lifespan_male, y = Equality_male)) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  stat_binhex(bins = 50) +\n  scale_fill_moma_c(\"Exter\", direction = -1) +\n  coord_cartesian(xlim = c(-5, 5), ylim = c(-0.1, 0.1)) +\n  xlab(\"Effect on male lifespan\") + \n  ylab(\"Effect on male lifespan equality\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        text = element_text(size = 12))\n\n(p1 + p2) / (p3 + p4) + plot_annotation(tag_levels = \"A\")\n\n\nWarning: Removed 142 rows containing non-finite values (`stat_binhex()`).\nRemoved 142 rows containing non-finite values (`stat_binhex()`).\nRemoved 142 rows containing non-finite values (`stat_binhex()`)."
  },
  {
    "objectID": "GWAS.html#analysis-of-sexual-antagonism-over-lifespan",
    "href": "GWAS.html#analysis-of-sexual-antagonism-over-lifespan",
    "title": "Genome wide analyses",
    "section": "Analysis of sexual antagonism over lifespan",
    "text": "Analysis of sexual antagonism over lifespan\nWhile there is a strong inter-sex genetic correlation for both life expectancy and lifespan equality, both correlations are significantly lower than one. Thus, it is likely that there are alleles that have sex-limited or sex-opposite effects on lifespan/lifespan equality. To identify the latter, we calculate a sexual antagonism index for each line, following previous studies focused on similar questions (e.g. Berger et al, 2014, Grieshop and Arnqvist, 2018, Ruzicka et al, 2020). To create the index, we rotate the coordinate system of the female and male fitness plane by 45 degrees, by multiplying the 204 x 2 fitness matrix by the rotation matrix, R. Figure XX A and B can help visualise this transformation\n\\[R = \\]\n\n\nCode\ne0_matrix &lt;-\n  residual_means %&gt;% \n  pivot_wider(names_from = \"Sex\", values_from = c(e0, h)) %&gt;% \n  filter(!is.na(e0_Male)) %&gt;% \n  dplyr::select(e0_Female, e0_Male) %&gt;% \n  as.matrix()\n\nh_matrix &lt;- \n  residual_means %&gt;% \n  pivot_wider(names_from = \"Sex\", values_from = c(e0, h)) %&gt;% \n  filter(!is.na(h_Male)) %&gt;% \n  dplyr::select(h_Female, h_Male) %&gt;% \n  as.matrix()\n  \n\nrotation_matrix &lt;- matrix(c(-1/sqrt(2), -1/sqrt(2), -1/sqrt(2), 1/sqrt(2)),\n        nrow = 2)\n\ne0_antagonism_index &lt;- \n  residual_means %&gt;% \n  pivot_wider(names_from = \"Sex\", values_from = c(e0, h)) %&gt;% \n  filter(!is.na(e0_Male)) %&gt;% \n  dplyr::select(line, e0_Female, e0_Male) %&gt;% \n  bind_cols(\n    e0_matrix %*% rotation_matrix %&gt;% \n      as_tibble() %&gt;% \n      rename(SC_axis  = V1,\n             SA_axis = V2))\n\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\nCode\nh_antagonism_index &lt;- \n  residual_means %&gt;% \n  pivot_wider(names_from = \"Sex\", values_from = c(e0, h)) %&gt;% \n  filter(!is.na(h_Male)) %&gt;% \n  dplyr::select(line, h_Female, h_Male) %&gt;% \n  bind_cols(\n    h_matrix %*% rotation_matrix %&gt;% \n      as_tibble() %&gt;% \n      rename(SC_axis  = V1,\n             SA_axis = V2))\n\np5 &lt;-\n  e0_antagonism_index %&gt;% \n  ggplot(aes(x = e0_Female, y = e0_Male)) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  geom_abline(intercept = 0, slope = -1, linewidth = 1, linetype = 2, colour = \"salmon\") +\n  geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = 2, colour = \"salmon\") +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  geom_point(aes(fill = SA_axis), shape = 21, size = 5) +\n  scale_fill_moma_c(\"Avedon\", direction = -1) +\n  coord_cartesian(xlim = c(-20, 20), ylim = c(-20, 20)) +\n  labs(fill = \"SA index\",\n       x = \"Life expectancy (female)\",\n       y = \"Life expectancy (male)\") +\n  theme_classic()\n\np6 &lt;-\n  h_antagonism_index %&gt;% \n  ggplot(aes(x = h_Female, y = h_Male)) +\n  geom_vline(xintercept = 0, linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2, linewidth = 1) +\n  geom_abline(intercept = 0, slope = -1, linewidth = 1, linetype = 2, colour = \"salmon\") +\n  geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = 2, colour = \"salmon\") +\n  geom_point(aes(fill = SA_axis), shape = 21, size = 5) +\n  scale_fill_moma_c(\"Avedon\", direction = -1) +\n  coord_cartesian(xlim = c(-0.6, 0.6), ylim = c(-0.6, 0.6)) +\n  labs(fill = \"SA index\",\n       x = \"Lifespan equality (female)\",\n       y = \"Lifespan equality (male)\") +\n  theme_classic()\n\np5 / p6\n\n\n\n\n\nFig XX. Residual line means for female and male life expectancy. Points indicate a single line. The sexual antagonism index ranges from male-beneficial and female-detrimental (orange points) to female-beneficial and male-detrimental (green points). The red lines show the rotation that has been performed to create the antagonism and concordance axis. I don’t actually agree with the use of this metric completely. It finds departures from the perfect regression, which I guess probably are in part caused by SNPs with sex-opposite effects, but they don’t have to be!\nRun GWAS\n\n\nCode\nSA_e0 &lt;- prep_for_SA_GWAS(e0_antagonism_index)\n\nSA_h &lt;- prep_for_SA_GWAS(h_antagonism_index)\n\n\nif(!file.exists(\"data/Derived/GWAS_results/SA_e0.tsv.gz\")) {\nrun_GWAS(SA_e0)\nrun_GWAS(SA_h)\n}\n\nSA_e0_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_e0.tsv.gz\") \n\n\nRows: 226628 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nSA_h_GWAS &lt;- read_tsv(\"data/Derived/GWAS_results/SA_h.tsv.gz\") \n\n\nRows: 226628 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): SNP\ndbl (4): BETA, SE, T, P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nPlot\n\n\nCode\n# plot the results using the manhattan plot custom function we defined earlier\n\nSA_e0_manhattan_plot &lt;- build_manhattan_plot(SA_e0_GWAS) +\n  labs(title = \"Life expectancy sexual antagonism\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5))\n\nSA_h_manhattan_plot &lt;- build_manhattan_plot(SA_e0_GWAS) +\n  labs(title = \"Lifespan equality sexual antagonism\") +\n  theme(plot.title = element_text(size = 20, hjust = 0.5))\n\nSA_e0_manhattan_plot + SA_h_manhattan_plot + plot_annotation(tag_levels = \"A\")"
  },
  {
    "objectID": "GWAS.html#data-preparation",
    "href": "GWAS.html#data-preparation",
    "title": "Genome wide analyses",
    "section": "Data preparation",
    "text": "Data preparation\nWe classified mutations as putatively deleterious if:\n\nThey are rare in the DGRP (&lt;5% minor allele frequency)\nThey occur in a coding region\nThey have an effect that is likely to incur some functional change.\n\nFollowing Holman and Wong (2023), we use the SnpEff designation of variants with major effects as those likely to incur a functional change. These variants are:\n\nEXON_DELETED\nNON_SYNONYMOUS_CODING\nFRAME_SHIFT\nCODON_CHANGE\nCODON_INSERTION\nCODON_CHANGE_PLUS_CODON_INSERTION\nCODON_DELETION\nCODON_CHANGE_PLUS_CODON_DELETION\nSTOP_GAINED\nSTOP_LOST\nRARE_AMINO_ACID\nSTART_LOST\nSTART_GAINED\n\n\n\nCode\n# Load the DGRP genotype data using bigsnpr\n\nif(!file.exists(\"snp_backing_file.bk\")) {\nrds &lt;- snp_readBed(\"data/Input/dgrp2.bed\", backingfile = \"snp_backing_file\")\n}\n\nbed_file &lt;- snp_attach(\"snp_backing_file.rds\")\n\nannotations &lt;- read.table(\"data/Input/dgrp.fb557.annot.txt\", \n                    header = FALSE, stringsAsFactors = FALSE)\n\n# Use PLINK to get the allele frequencies across the 205 DGRP lines\n\nrun_command(\"--bfile dgrp2  --freq\", path = \"/data/Input\")\n\nmajor_effect_types &lt;- c(\n  \"EXON_DELETED\", \"NON_SYNONYMOUS_CODING\",\n  \"FRAME_SHIFT\", \"CODON_CHANGE\",\n  \"CODON_INSERTION\",\n  \"CODON_CHANGE_PLUS_CODON_INSERTION\",\n  \"CODON_DELETION\",\n  \"CODON_CHANGE_PLUS_CODON_DELETION\",\n  \"STOP_GAINED\",\n  \"STOP_LOST\",\n  \"RARE_AMINO_ACID\",\n  \"START_LOST\",\n  \"START_GAINED\"\n)\n\n# this chunk detects and filters for any of the above variant types in the annotation dataset\n\nall_major_mutations &lt;- annotations$V1[unique(c(\n  which(str_detect(annotations$V3, major_effect_types[1])),\n  which(str_detect(annotations$V3, major_effect_types[2])),\n  which(str_detect(annotations$V3, major_effect_types[3])),\n  which(str_detect(annotations$V3, major_effect_types[4])),\n  which(str_detect(annotations$V3, major_effect_types[5])),\n  which(str_detect(annotations$V3, major_effect_types[6])),\n  which(str_detect(annotations$V3, major_effect_types[7])),\n  which(str_detect(annotations$V3, major_effect_types[8])),\n  which(str_detect(annotations$V3, major_effect_types[9])),\n  which(str_detect(annotations$V3, major_effect_types[10])),\n  which(str_detect(annotations$V3, major_effect_types[11])),\n  which(str_detect(annotations$V3, major_effect_types[12])),\n  which(str_detect(annotations$V3, major_effect_types[13]))\n))]\n\n# now filter down to those with 0 &lt; MAF &lt; 0.05\n\nrare_alleles &lt;- read.table(\"data/Input/plink.frq\", header = T) %&gt;% \n  filter(MAF &lt; 0.05 & MAF &gt; 0) %&gt;% pull(SNP)\n\n# find alleles on the X\n\nX_linked_alleles &lt;- read.table(\"data/Input/plink.frq\", header = T) %&gt;% \n  filter(CHR == 5) %&gt;% pull(SNP)\n\n# and those on autosomes\n\nautosomal_alleles &lt;- read.table(\"data/Input/plink.frq\", header = T) %&gt;% \n  filter(CHR != 5) %&gt;% pull(SNP)\n\n# Get the indexes of variants that are major mutations and also have MAF &lt; 0.05\n\nindexes &lt;- intersect(\n  which(bed_file$map$marker.ID %in% all_major_mutations), \n  which(bed_file$map$marker.ID %in% rare_alleles)\n)\n\n# Get the indexes of variants that are major mutations and also have MAF &lt; 0.05 and that are on the X\n\nindexes_X &lt;- intersect(\n  indexes,\n  which(bed_file$map$marker.ID %in% X_linked_alleles)\n)\n\nindexes_a &lt;- intersect(\n  indexes,\n  which(bed_file$map$marker.ID %in% autosomal_alleles)\n)\n\n# Function to count the number of mutations in all 205 DGRP lines\n\ncount_mutations &lt;- function(indexes){\n  tibble(\n    line = bed_file$fam$family.ID,\n    mutation_count = sapply(\n      1:205, function(i) sum(bed_file$genotypes[i, ][indexes] == 2, na.rm = T))\n  ) %&gt;% \n    mutate(line = str_remove(line, \"_\"))\n}\n\nmutational_burden &lt;- count_mutations(indexes)\n\nX_burden &lt;- count_mutations(indexes_X)\n\nautosomal_burden &lt;- count_mutations(indexes_a)\n\n\n# Integrate mutational burden with line lifespan data \n\nmutational_burden_line_data &lt;-\n  left_join(Arya_female_lifespan %&gt;% rename(Female_lifespan = Lifespan),\n            Arya_male_lifespan %&gt;% rename(Male_lifespan = Lifespan)) %&gt;% \n  left_join(mutational_burden,\n            by = \"line\")"
  },
  {
    "objectID": "GWAS.html#run-the-bayesian-linear-regression",
    "href": "GWAS.html#run-the-bayesian-linear-regression",
    "title": "Genome wide analyses",
    "section": "Run the bayesian linear regression",
    "text": "Run the bayesian linear regression\n\n\nCode\nmutational_burden_line_data &lt;-\n  mutational_burden_line_data %&gt;% \n  mutate(Female_lifespan_standard = (Female_lifespan - mean(Female_lifespan))/ sd(Female_lifespan),\n         Male_lifespan_standard = (Male_lifespan - mean(Male_lifespan))/ sd(Male_lifespan),\n         mutation_count_100 = mutation_count/100)\n\n# run this on individual data\nindividual_level_data &lt;- \n  Arya_raw_data %&gt;% dplyr::select(line, Lifespan, Sex) %&gt;% \n  mutate(line = as.character(line),\n         line = paste(\"line\", line, sep = \"\")) %&gt;%\n  group_by(Sex) %&gt;% \n  mutate(row = row_number()) %&gt;%\n  pivot_wider(names_from = Sex, values_from = Lifespan) %&gt;% \n  dplyr::select(-row) %&gt;% \n  right_join(mutational_burden, by = \"line\") %&gt;% \n  rename(Female_lifespan = F, Male_lifespan = M) %&gt;% \n  mutate(Female_lifespan_standard = \n           (Female_lifespan - mean(Female_lifespan, na.rm = T))/ sd(Female_lifespan, na.rm = T),\n         Male_lifespan_standard = \n           (Male_lifespan - mean(Male_lifespan, na.rm = T))/ sd(Male_lifespan, na.rm = T),\n         mutation_count_100 = mutation_count/100)\n\n# raw data\n\nindividual_multivariate_mutational_burden_model &lt;-\n  brm(bf(\n    mvbind(Female_lifespan, \n           Male_lifespan) ~ mutation_count_100 + (1|line)) + set_rescor(TRUE), \n    data = individual_level_data,\n    family = gaussian,\n    prior = c(prior(normal(60, 20), class = Intercept, resp = Femalelifespan),\n              prior(normal(60, 20), class = Intercept, resp = Malelifespan),\n              prior(normal(0, 2), class = b, resp = Femalelifespan),\n              prior(normal(0, 2), class = b, resp = Malelifespan),\n              prior(normal(1, 1), class = sigma, resp = Femalelifespan),\n              prior(normal(1, 1), class = sigma, resp = Malelifespan),\n              prior(lkj(2), class = rescor)),\n    warmup = 2000, iter = 6000, chains = 4, cores = 4)\n\n# means\n\nmultivariate_mutational_burden_model &lt;-\n  brm(bf(\n    mvbind(Female_lifespan, \n           Male_lifespan) ~ mutation_count_100) + set_rescor(TRUE), \n    data = mutational_burden_line_data,\n    family = gaussian,\n    prior = c(prior(normal(60, 20), class = Intercept, resp = Femalelifespan),\n              prior(normal(60, 20), class = Intercept, resp = Malelifespan),\n              prior(normal(0, 2), class = b, resp = Femalelifespan),\n              prior(normal(0, 2), class = b, resp = Malelifespan),\n              prior(normal(1, 1), class = sigma, resp = Femalelifespan),\n              prior(normal(1, 1), class = sigma, resp = Malelifespan),\n              prior(lkj(2), class = rescor)),\n    warmup = 2000, iter = 6000, chains = 4, cores = 4)\n\n\nmultivariate_mutational_burden_model"
  },
  {
    "objectID": "GWAS.html#plot-results",
    "href": "GWAS.html#plot-results",
    "title": "Genome wide analyses",
    "section": "Plot results",
    "text": "Plot results\n\n\nCode\nregression_lines &lt;- conditional_effects(multivariate_mutational_burden_model, plot = F)\n\nregression_lines &lt;-\n  bind_rows(\n  regression_lines[[1]] %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(mutation_count_100, estimate__, se__, lower__, upper__) %&gt;% \n  rename(Posterior_lifespan = estimate__, lower = lower__, upper = upper__) %&gt;% \n  mutate(Sex = \"Female\"),\n\n  regression_lines[[2]] %&gt;% \n  as_tibble() %&gt;% \n  dplyr::select(mutation_count_100, estimate__, se__, lower__, upper__) %&gt;% \n  rename(Posterior_lifespan = estimate__, lower = lower__, upper = upper__) %&gt;% \n  mutate(Sex= \"Male\")\n)\n\n\nmutational_burden_line_data %&gt;%\n  dplyr::select(2:3, mutation_count_100) %&gt;% \n  pivot_longer(1:2, names_to = \"Sex\",\n               values_to = \"Posterior_lifespan\") %&gt;% \n  mutate(Sex = str_remove(Sex, \"_lifespan\")) %&gt;% \nggplot(aes(x = mutation_count_100,\n           y = Posterior_lifespan)) +\n  geom_point(size = 3) +\n  geom_line(data = regression_lines, aes(y = Posterior_lifespan, x = mutation_count_100,\n                                         colour = Sex), linewidth = 1.2) +\n  geom_ribbon(data = regression_lines, aes(ymin = lower, ymax = upper,\n                                           fill = Sex),\n              alpha = 0.5) +\n  scale_fill_manual(values = c(met.brewer(\"Hokusai3\")[2], met.brewer(\"Hokusai3\")[3])) +\n  scale_colour_manual(values = c(met.brewer(\"Hokusai3\")[2], met.brewer(\"Hokusai3\")[3])) +\n  facet_wrap(~Sex) +\n  labs(x = \"No. deleterious mutations (100s)\",\n       y = \"Mean lifespan (days)\") +\n  theme_bigstatsr() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Project home",
    "section": "",
    "text": "Is ageing really invariant within species? A case study using Drosophila melanogaster.\nThis page is a work in progress. Eventually it will contain a report that documents our analysis, with the aim to make it as reproducible and freely available as possible. For now, we just include the list of studies that we used to produce the results you might have seen on our poster.\n\n\nStudies\nNatural variation, functional pleiotropy and transcriptional contexts of odorant binding proteins in Drosophila melanogaster\nAuthors: Arya, Weber, Wang, Magwire, Mackay and Anholt\nYear: 2010\nJournal: Genetics\nDOI: 10.1534/genetics.110.123166\nAbstract: How functional diversification affects the organization of the transcriptome is a central question in systems genetics. To explore this issue, we sequenced all six Odorant binding protein ( Obp) genes located on the X chromosome, four of which occur as a cluster, in 219 inbred wild-derived lines of Drosophila melanogaster and tested for associations between genetic and phenotypic variation at the organismal and transcriptional level. We observed polymorphisms in Obp8a, Obp19a, Obp19b,and Obp19c associated with variation in olfactory responses and polymorphisms in Obp19d associated with variation in life span. We inferred the transcriptional context, or “niche,” of each gene by identifying expression polymorphisms where genetic variation in these Obp genes was associated with variation in expression of transcripts genetically correlated to each Obp gene. All six Obp genes occupied a distinct transcriptional niche. Gene ontology enrichment analysis revealed associations of different Obp transcriptional niches with olfactory behavior, synaptic transmission, detection of signals regulating tissue development and apoptosis, postmating behavior and oviposition, and nutrient sensing. Our results show that diversification of the Obp family has organized distinct transcriptional niches that reflect their acquisition of additional functions.\nGenetic variation of dietary restriction and the effects of nutrient-free water and amino acid supplements on lifespan and fecundity of Drosophila\nAuthors: Dick, Ross and Yampolsky\nYear: 2011\nJournal: Genetics Research\nDOI: 10.1017/S001667231100019X\nAbstract: We measure genetic variation in lifespan and fecundity at two food levels in 34 core lines of the Drosophila Genetic Reference Panel collection. Lines were significantly different from each other in lifespan and fecundity at both restricted and full food. There was a strong food-by-line interaction for the slope of age-specific mortality, fecundity and proportion of fertilized eggs, indicating the presence of genetic variation for the strength of the dietary restriction effect, likely to represent standing genetic variation in a natural population from which the lines used have originated. No trade-off between fecundity and lifespan manifested in life-history variation among inbred lines. Our data partially corroborate the recent proposition that availability of nutrient-free water eliminates the apparent dietary restriction at least in some conditions. Although flies on full food with water added had lifespan slightly higher than those without a water source, it was still significantly lower than that in flies on restricted food, with no indication of interaction. We fully corroborate the recently discovered effect of addition of essential amino acids to the medium: addition of 1.5 mM methionine to restricted food significantly increased fecundity without a measurable decrease in lifespan; addition of each of 10 essential amino acids increased fecundity and decreased females lifespan to the levels observed on full food, again with no evidence of line-by-food interactions. We propose a mechanistic hypothesis explaining the observed data, based on the assumption that food consumption by flies is adjusted according to flies’ saturation in water and methionine.\nGenome-wide analysis in Drosophila reveals age-specific effects of SNPs on fitness traits\nAuthors: Durham, Magwire, Stone, Leips\nYear: 2014\nJournal: Nature Communications\nDOI: 10.1038/ncomms5338\nAbstract: Most organisms exhibit senescence; a decline in physiological function with age. In nature, rates of senescence vary extensively among individuals and this variation has a significant genetic component; however, we know little about the genes underlying senescence. Here we show the first evidence that individual alleles influence fecundity in an age-specific manner and so the genetic basis of natural variation in fecundity changes dramatically with age. We complete a genome-wide association to identify single-nucleotide polymorphisms (SNPs) affecting lifespan and age-specific fecundity using the Drosophila melanogaster Genetic Reference Panel. We identify 1,031 SNPs affecting fecundity and 52 influencing lifespan. Only one SNP is associated with both early- and late-age fecundity. The age-specific effect of candidate genes on fecundity is validated using RNA interference. In addition, there is a dramatic increase in the number of SNPs influencing fecundity with age. This result provides support for the mutation accumulation theory of aging.\nContext-dependent genetic architecture of Drosophila lifespan\nAuthors: Huang, Campbell, Carbone, Jones, Unselt, Anholt and Mackay\nYear: 2020\nJournal: PLoS Biology\nDOI: https://doi.org/10.1371/journal.pbio.3000645\nAbstract: Understanding the genetic basis of variation in life span is a major challenge that is difficult to address in human populations. Evolutionary theory predicts that alleles affecting natural variation in life span will have properties that enable them to persist in populations at intermediate frequencies, such as late-life–specific deleterious effects, antagonistic pleiotropic effects on early and late-age fitness components, and/or sex- and environment-specific or antagonistic effects. Here, we quantified variation in life span in males and females reared in 3 thermal environments for the sequenced, inbred lines of the Drosophila melanogaster Genetic Reference Panel (DGRP) and an advanced intercross outbred population derived from a subset of DGRP lines. Quantitative genetic analyses of life span and the micro-environmental variance of life span in the DGRP revealed significant genetic variance for both traits within each sex and environment, as well as significant genotype-by-sex interaction (GSI) and genotype-by-environment interaction (GEI). Genome-wide association (GWA) mapping in both populations implicates over 2,000 candidate genes with sex- and environment-specific or antagonistic pleiotropic allelic effects. Over 1,000 of these genes are associated with variation in life span in other D. melanogaster populations. We functionally assessed the effects of 15 candidate genes using RNA interference (RNAi): all affected life span and/or micro-environmental variance of life span in at least one sex and environment and exhibited sex-and environment-specific effects. Our results implicate novel candidate genes affecting life span and suggest that variation for life span may be maintained by variable allelic effects in heterogeneous environments.\nGWAS for Lifespan and Decline in Climbing Ability in Flies upon Dietary Restriction Reveal decima as a Mediator of Insulin-like Peptide Production\nAuthors: Wilson, Beck, Nelson, Hilsabeck, Promislow, Brem and Kapahi\nYear: 2020\nJournal: Current Biology\nDOI: https://doi.org/10.1016/j.cub.2020.05.020\nAbstract: Dietary restriction (DR) is the most robust means to extend lifespan and delay age-related diseases across species. An underlying assumption in the aging field is that DR enhances both lifespan and physical activity through similar mechanisms, but this has not been rigorously tested in different genetic backgrounds. Furthermore, nutrient response genes responsible for lifespan extension or age-related decline in functionality remain underexplored in natural populations. To address this, we measured nutrient-dependent changes in lifespan and age-related decline in climbing ability in the Drosophila Genetic Reference Panel fly strains. On average, DR extended lifespan and delayed decline in climbing ability, but there was a lack of correlation between these traits across individual strains, suggesting that distinct genetic factors modulate these traits independently and that genotype determines response to diet. Only 50% of strains showed positive response to DR for both lifespan and climbing ability, 14% showed a negative response for one trait but not both, and 35% showed no change in one or both traits. Through GWAS, we uncovered a number of genes previously not known to be diet responsive nor to influence lifespan or climbing ability. We validated decima as a gene that alters lifespan and daedalus as one that influences age-related decline in climbing ability. We found that decima influences insulin-like peptide transcription in the GABA receptor neurons downstream of short neuropeptide F precursor ( sNPF) signaling. Modulating these genes produced independent effects on lifespan and physical activity decline, which suggests that these age-related traits can be regulated through distinct mechanisms.\nIdentification of genetic modifiers of lifespan on a high sugar diet in the Drosophila Genetic Reference Panel\nAuthors: Patel and Talbert\nYear: 2021\nJournal: Heliyon\nDOI: https://doi.org/10.1016/j.heliyon.2021.e07153\nAbstract: Genome-wide association studies (GWAS) have become beneficial in identifying genetic variants underlying susceptibility to various complex diseases and conditions, including obesity. Utilizing the Drosophila Genetic Reference Panel (DGRP), we performed a GWAS of lifespan of 193 genetically distinct lines on a high sugar diet (HSD). The DGRP analysis pipeline determined the most significant lifespan associated polymorphisms were within loci of genes involved in: neural processes, behavior, development, and apoptosis, among other functions. Next, based on the relevance to obesity pathology, and the availability of transgenic RNAi lines targeting the genes we identified, whole-body in vivo knockdown of several candidate genes was performed. We utilized the GAL4-UAS binary expression system to independently validate the impacts of these loci on Drosophila lifespan during HSD. These loci were largely confirmed to affect lifespan in that HSD setting, as well as a normal diet setting. However, we also detected unexpected dietary effects of the HSD, including inconsistent diet effects on lifespan relative to a normal diet and a strong downregulation of feeding quantity.\nSex, mating and repeatability of Drosophila melanogaster longevity\nAuthors: Hoffman, Dudeck, Patterson and Austad\nYear: 2021\nJournal: Royal Society Open Science\nDOI: https://doi.org/10.1098/rsos.210273\nAbstract: Costs of reproduction are seemingly ubiquitous across the animal kingdom, and these reproductive costs are generally defined by increased reproduction leading to decreases in other fitness components, often longevity. However, some recent reports question whether reproductive costs exist in every species or population. To provide insight on this issue, we sought to determine the extent to which genetic variation might play a role in one type of reproductive cost—survival—using Drosophila melanogaster. We found, surprisingly, no costs of reproduction nor sex differences in longevity across all 15 genetic backgrounds in two cohorts. We did find significant variation within some genotypes, though these were much smaller than expected. We also observed that small laboratory changes lead to significant changes in longevity within genotypes, suggesting that longevity repeatability in flies may be difficult. We finally compared our results to previously published longevities and found that reproducibility is similar to what we saw in our own laboratory, further suggesting that stochasticity is a strong component of fruit fly lifespan. Overall, our results suggest that there are still large gaps in our knowledge about the effects of sex and mating, as well as genetic background and laboratory conditions on lifespan reproducibility.\nThe metabolome as a biomarker of aging in Drosophila melanogaster\nAuthors: Zhao, Golic, Harrison, Manoj, Hoffman, Simon, Johnson, MacCoss, McIntyre and Promislow\nYear: 2022\nJournal: Ageing Cell\nDOI: 10.1111/acel.13548\nAbstract: Many biomarkers have been shown to be associated not only with chronological age but also with functional measures of biological age. In human populations, it is difficult to show whether variation in biological age is truly predictive of life expectancy, as such research would require longitudinal studies over many years, or even decades. We followed adult cohorts of 20 Drosophila Genetic Reference Panel (DGRP) strains chosen to represent the breadth of lifespan variation, obtain estimates of lifespan, baseline mortality, and rate of aging, and associate these parameters with age-specific functional traits including fecundity and climbing activity and with age-specific targeted metabolomic profiles. We show that activity levels and metabolome-wide profiles are strongly associated with age, that numerous individual metabolites show a strong association with lifespan, and that the metabolome provides a biological clock that predicts not only sample age but also future mortality rates and lifespan. This study with 20 genotypes and 87 metabolites, while relatively small in scope, establishes strong proof of principle for the fly as a powerful experimental model to test hypotheses about biomarkers and aging and provides further evidence for the potential value of metabolomic profiles as biomarkers of aging."
  }
]